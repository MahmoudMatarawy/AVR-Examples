
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000250  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000002c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000934  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000749  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000505  00000000  00000000  000013f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000018fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044e  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d2  00000000  00000000  00001db2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	a2 00       	.word	0x00a2	; ????
  56:	a6 00       	.word	0x00a6	; ????
  58:	aa 00       	.word	0x00aa	; ????
  5a:	ae 00       	.word	0x00ae	; ????
  5c:	b2 00       	.word	0x00b2	; ????
  5e:	b6 00       	.word	0x00b6	; ????
  60:	ba 00       	.word	0x00ba	; ????

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d4 e0       	ldi	r29, 0x04	; 4
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_clear_bss>:
  6e:	20 e0       	ldi	r18, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	01 c0       	rjmp	.+2      	; 0x78 <.do_clear_bss_start>

00000076 <.do_clear_bss_loop>:
  76:	1d 92       	st	X+, r1

00000078 <.do_clear_bss_start>:
  78:	a1 36       	cpi	r26, 0x61	; 97
  7a:	b2 07       	cpc	r27, r18
  7c:	e1 f7       	brne	.-8      	; 0x76 <.do_clear_bss_loop>
  7e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  82:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <ADC_INIT>:

#include "ADC.h"

uint8_t ADC_STATUS = NOT_INIT; 
void ADC_INIT(ADC_CONFIG *param)
{
  8a:	fc 01       	movw	r30, r24
	ADC_DDR = 0x00;
  8c:	1a ba       	out	0x1a, r1	; 26
	ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_ENABLE);
  8e:	86 b1       	in	r24, 0x06	; 6
  90:	80 68       	ori	r24, 0x80	; 128
  92:	86 b9       	out	0x06, r24	; 6
	switch(param->ref_selection)
  94:	80 81       	ld	r24, Z
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	19 f0       	breq	.+6      	; 0xa0 <ADC_INIT+0x16>
  9a:	83 30       	cpi	r24, 0x03	; 3
  9c:	29 f0       	breq	.+10     	; 0xa8 <ADC_INIT+0x1e>
  9e:	07 c0       	rjmp	.+14     	; 0xae <ADC_INIT+0x24>
	{
		case AVCC :
		ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(REF_SELCTION_BIT_0);
  a0:	87 b1       	in	r24, 0x07	; 7
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	87 b9       	out	0x07, r24	; 7
		break;
  a6:	03 c0       	rjmp	.+6      	; 0xae <ADC_INIT+0x24>
		
		case INTERNAL_2_56V_REF :
		ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(REF_SELCTION_BIT_0) | ENABLE(REF_SELCTION_BIT_1);
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	80 6c       	ori	r24, 0xC0	; 192
  ac:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	if(param->ADC_LEFT_ADJUST_RESULT_enable == INIT)
  ae:	81 81       	ldd	r24, Z+1	; 0x01
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	19 f4       	brne	.+6      	; 0xba <ADC_INIT+0x30>
	{
		ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(ADC_LEFT_ADJUST_RESULT);
  b4:	87 b1       	in	r24, 0x07	; 7
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	87 b9       	out	0x07, r24	; 7
	}
	
	switch(param->prescaler_selection)
  ba:	82 81       	ldd	r24, Z+2	; 0x02
  bc:	80 31       	cpi	r24, 0x10	; 16
  be:	d9 f0       	breq	.+54     	; 0xf6 <ADC_INIT+0x6c>
  c0:	38 f4       	brcc	.+14     	; 0xd0 <ADC_INIT+0x46>
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	81 f0       	breq	.+32     	; 0xe6 <ADC_INIT+0x5c>
  c6:	88 30       	cpi	r24, 0x08	; 8
  c8:	91 f0       	breq	.+36     	; 0xee <ADC_INIT+0x64>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	19 f5       	brne	.+70     	; 0x114 <ADC_INIT+0x8a>
  ce:	07 c0       	rjmp	.+14     	; 0xde <ADC_INIT+0x54>
  d0:	80 34       	cpi	r24, 0x40	; 64
  d2:	c9 f0       	breq	.+50     	; 0x106 <ADC_INIT+0x7c>
  d4:	80 38       	cpi	r24, 0x80	; 128
  d6:	d9 f0       	breq	.+54     	; 0x10e <ADC_INIT+0x84>
  d8:	80 32       	cpi	r24, 0x20	; 32
  da:	e1 f4       	brne	.+56     	; 0x114 <ADC_INIT+0x8a>
  dc:	10 c0       	rjmp	.+32     	; 0xfe <ADC_INIT+0x74>
	{
		case PRESCALER_2 :
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_PRESCALER_SELECTION_BIT_0);
  de:	86 b1       	in	r24, 0x06	; 6
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	86 b9       	out	0x06, r24	; 6
		break;
  e4:	17 c0       	rjmp	.+46     	; 0x114 <ADC_INIT+0x8a>
		
		case PRESCALER_4 :
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_PRESCALER_SELECTION_BIT_1);
  e6:	86 b1       	in	r24, 0x06	; 6
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	86 b9       	out	0x06, r24	; 6
		break;
  ec:	13 c0       	rjmp	.+38     	; 0x114 <ADC_INIT+0x8a>
		
		case PRESCALER_8 :
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_PRESCALER_SELECTION_BIT_0) | ENABLE(ADC_PRESCALER_SELECTION_BIT_1);
  ee:	86 b1       	in	r24, 0x06	; 6
  f0:	83 60       	ori	r24, 0x03	; 3
  f2:	86 b9       	out	0x06, r24	; 6
		break;
  f4:	0f c0       	rjmp	.+30     	; 0x114 <ADC_INIT+0x8a>
		
		case PRESCALER_16 :
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_PRESCALER_SELECTION_BIT_2);
  f6:	86 b1       	in	r24, 0x06	; 6
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	86 b9       	out	0x06, r24	; 6
		break;
  fc:	0b c0       	rjmp	.+22     	; 0x114 <ADC_INIT+0x8a>
		
		case PRESCALER_32 :
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_PRESCALER_SELECTION_BIT_0) | ENABLE(ADC_PRESCALER_SELECTION_BIT_2);
  fe:	86 b1       	in	r24, 0x06	; 6
 100:	85 60       	ori	r24, 0x05	; 5
 102:	86 b9       	out	0x06, r24	; 6
		break;
 104:	07 c0       	rjmp	.+14     	; 0x114 <ADC_INIT+0x8a>
		
		case PRESCALER_64 :
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_PRESCALER_SELECTION_BIT_1) | ENABLE(ADC_PRESCALER_SELECTION_BIT_2);
 106:	86 b1       	in	r24, 0x06	; 6
 108:	86 60       	ori	r24, 0x06	; 6
 10a:	86 b9       	out	0x06, r24	; 6
		break;
 10c:	03 c0       	rjmp	.+6      	; 0x114 <ADC_INIT+0x8a>
		
		case PRESCALER_128 :
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_PRESCALER_SELECTION_BIT_0) | ENABLE(ADC_PRESCALER_SELECTION_BIT_1) | ENABLE(ADC_PRESCALER_SELECTION_BIT_2);
 10e:	86 b1       	in	r24, 0x06	; 6
 110:	87 60       	ori	r24, 0x07	; 7
 112:	86 b9       	out	0x06, r24	; 6
		break;
	}
	
	if (param->ADC_Enable_Interrupt == INIT)
 114:	84 81       	ldd	r24, Z+4	; 0x04
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	19 f4       	brne	.+6      	; 0x120 <ADC_INIT+0x96>
	{
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_INTERRUPT_ENABLE);
 11a:	86 b1       	in	r24, 0x06	; 6
 11c:	88 60       	ori	r24, 0x08	; 8
 11e:	86 b9       	out	0x06, r24	; 6
	}
	
	if (param->ADC_Enable_Auto_Trigger == INIT)
 120:	83 81       	ldd	r24, Z+3	; 0x03
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	19 f4       	brne	.+6      	; 0x12c <ADC_INIT+0xa2>
	{
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_AUTO_TRIGGER_ENABLE);
 126:	86 b1       	in	r24, 0x06	; 6
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	86 b9       	out	0x06, r24	; 6
	}
	
	switch(param->ADC_Auto_Trigger_Source)
 12c:	e5 81       	ldd	r30, Z+5	; 0x05
 12e:	8e 2f       	mov	r24, r30
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	fc 01       	movw	r30, r24
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	e7 30       	cpi	r30, 0x07	; 7
 138:	f1 05       	cpc	r31, r1
 13a:	f8 f4       	brcc	.+62     	; 0x17a <ADC_INIT+0xf0>
 13c:	e6 5d       	subi	r30, 0xD6	; 214
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	0c 94 20 01 	jmp	0x240	; 0x240 <__tablejump2__>
	{
		case ANALOG_COMPARATOR :
		SPECIAL_FUNCTION_REG |= ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_0);
 144:	80 b7       	in	r24, 0x30	; 48
 146:	80 62       	ori	r24, 0x20	; 32
 148:	80 bf       	out	0x30, r24	; 48
		break;
 14a:	17 c0       	rjmp	.+46     	; 0x17a <ADC_INIT+0xf0>
		
		case EXTERNAL_INTERRUPT_REQ :
		SPECIAL_FUNCTION_REG |= ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_1);
 14c:	80 b7       	in	r24, 0x30	; 48
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	80 bf       	out	0x30, r24	; 48
		break;
 152:	13 c0       	rjmp	.+38     	; 0x17a <ADC_INIT+0xf0>
		
		case TIMER_0_COMPARE_MATCH :
		SPECIAL_FUNCTION_REG |= ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_0) | ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_1);
 154:	80 b7       	in	r24, 0x30	; 48
 156:	80 66       	ori	r24, 0x60	; 96
 158:	80 bf       	out	0x30, r24	; 48
		break;
 15a:	0f c0       	rjmp	.+30     	; 0x17a <ADC_INIT+0xf0>
		
		case  TIMER_0_OVERFLOW :
		SPECIAL_FUNCTION_REG |= ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_2);
 15c:	80 b7       	in	r24, 0x30	; 48
 15e:	80 68       	ori	r24, 0x80	; 128
 160:	80 bf       	out	0x30, r24	; 48
		break;
 162:	0b c0       	rjmp	.+22     	; 0x17a <ADC_INIT+0xf0>
		
		case TIMER_1_COMPARE_MATCH:
		SPECIAL_FUNCTION_REG |= ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_0) | ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_2);
 164:	80 b7       	in	r24, 0x30	; 48
 166:	80 6a       	ori	r24, 0xA0	; 160
 168:	80 bf       	out	0x30, r24	; 48
		break;
 16a:	07 c0       	rjmp	.+14     	; 0x17a <ADC_INIT+0xf0>
		
		case TIMER_1_OVERFLOW_MATCH :
		SPECIAL_FUNCTION_REG |= ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_1) | ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_2);
 16c:	80 b7       	in	r24, 0x30	; 48
 16e:	80 6c       	ori	r24, 0xC0	; 192
 170:	80 bf       	out	0x30, r24	; 48
		break;
 172:	03 c0       	rjmp	.+6      	; 0x17a <ADC_INIT+0xf0>
		
		case TIMER_1_CAPTURE_MODE :
		SPECIAL_FUNCTION_REG |= ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_0) | ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_1) | ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_2);
 174:	80 b7       	in	r24, 0x30	; 48
 176:	80 6e       	ori	r24, 0xE0	; 224
 178:	80 bf       	out	0x30, r24	; 48
		break;
	}
	ADC_STATUS = INIT;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 180:	08 95       	ret

00000182 <ADC_READ>:


uint16_t ADC_READ(uint8_t channel)
{
	uint16_t data=0;
	if (ADC_STATUS == INIT)
 182:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 186:	91 30       	cpi	r25, 0x01	; 1
 188:	b9 f5       	brne	.+110    	; 0x1f8 <ADC_READ+0x76>
	{
		ADC_MULTIPLEXER_SELECTION_REG |= (ADC_MULTIPLEXER_SELECTION_REG&0xf8);
 18a:	97 b1       	in	r25, 0x07	; 7
 18c:	27 b1       	in	r18, 0x07	; 7
 18e:	98 7f       	andi	r25, 0xF8	; 248
 190:	92 2b       	or	r25, r18
 192:	97 b9       	out	0x07, r25	; 7
		switch(channel)
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	a1 f0       	breq	.+40     	; 0x1c0 <ADC_READ+0x3e>
 198:	28 f4       	brcc	.+10     	; 0x1a4 <ADC_READ+0x22>
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	49 f0       	breq	.+18     	; 0x1b0 <ADC_READ+0x2e>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	59 f0       	breq	.+22     	; 0x1b8 <ADC_READ+0x36>
 1a2:	1d c0       	rjmp	.+58     	; 0x1de <ADC_READ+0x5c>
 1a4:	85 30       	cpi	r24, 0x05	; 5
 1a6:	a1 f0       	breq	.+40     	; 0x1d0 <ADC_READ+0x4e>
 1a8:	78 f0       	brcs	.+30     	; 0x1c8 <ADC_READ+0x46>
 1aa:	86 30       	cpi	r24, 0x06	; 6
 1ac:	a9 f0       	breq	.+42     	; 0x1d8 <ADC_READ+0x56>
 1ae:	17 c0       	rjmp	.+46     	; 0x1de <ADC_READ+0x5c>
		{
			case CHANNEL_1 :
			ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(ANALOG_CHANNEL_SELECTION_BIT_0);
 1b0:	87 b1       	in	r24, 0x07	; 7
 1b2:	81 60       	ori	r24, 0x01	; 1
 1b4:	87 b9       	out	0x07, r24	; 7
			break;
 1b6:	13 c0       	rjmp	.+38     	; 0x1de <ADC_READ+0x5c>
			
			case CHANNEL_2 :
			ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(ANALOG_CHANNEL_SELECTION_BIT_1);
 1b8:	87 b1       	in	r24, 0x07	; 7
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	87 b9       	out	0x07, r24	; 7
			break;
 1be:	0f c0       	rjmp	.+30     	; 0x1de <ADC_READ+0x5c>
			
			case CHANNEL_3 :
			ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(ANALOG_CHANNEL_SELECTION_BIT_0) | ENABLE(ANALOG_CHANNEL_SELECTION_BIT_1);
 1c0:	87 b1       	in	r24, 0x07	; 7
 1c2:	83 60       	ori	r24, 0x03	; 3
 1c4:	87 b9       	out	0x07, r24	; 7
			break;
 1c6:	0b c0       	rjmp	.+22     	; 0x1de <ADC_READ+0x5c>
			
			case CHANNEL_4 :
			ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(ANALOG_CHANNEL_SELECTION_BIT_2);
 1c8:	87 b1       	in	r24, 0x07	; 7
 1ca:	84 60       	ori	r24, 0x04	; 4
 1cc:	87 b9       	out	0x07, r24	; 7
			break;
 1ce:	07 c0       	rjmp	.+14     	; 0x1de <ADC_READ+0x5c>
			
			case CHANNEL_5 :
			ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(ANALOG_CHANNEL_SELECTION_BIT_0) | ENABLE(ANALOG_CHANNEL_SELECTION_BIT_2);
 1d0:	87 b1       	in	r24, 0x07	; 7
 1d2:	85 60       	ori	r24, 0x05	; 5
 1d4:	87 b9       	out	0x07, r24	; 7
			break;
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <ADC_READ+0x5c>
			
			case CHANNEL_6 :
			ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(ANALOG_CHANNEL_SELECTION_BIT_1) | ENABLE(ANALOG_CHANNEL_SELECTION_BIT_2);
 1d8:	87 b1       	in	r24, 0x07	; 7
 1da:	86 60       	ori	r24, 0x06	; 6
 1dc:	87 b9       	out	0x07, r24	; 7
			break;
		}
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_START_CONVERSION);
 1de:	86 b1       	in	r24, 0x06	; 6
 1e0:	80 64       	ori	r24, 0x40	; 64
 1e2:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e4:	8a e1       	ldi	r24, 0x1A	; 26
 1e6:	8a 95       	dec	r24
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <ADC_READ+0x64>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <ADC_READ+0x6a>
		_delay_us(10);
		while(!(ADC_CONTROL_AND_STATUS_A_REG&&(ENABLE(ADC_INTERRUPT_FLAG))));
 1ec:	86 b1       	in	r24, 0x06	; 6
 1ee:	88 23       	and	r24, r24
 1f0:	e9 f3       	breq	.-6      	; 0x1ec <ADC_READ+0x6a>
		data = ADC_DATA_REG;
 1f2:	84 b1       	in	r24, 0x04	; 4
 1f4:	95 b1       	in	r25, 0x05	; 5
 1f6:	08 95       	ret



uint16_t ADC_READ(uint8_t channel)
{
	uint16_t data=0;
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
		_delay_us(10);
		while(!(ADC_CONTROL_AND_STATUS_A_REG&&(ENABLE(ADC_INTERRUPT_FLAG))));
		data = ADC_DATA_REG;
	}
	return data;
 1fc:	08 95       	ret

000001fe <main>:

 #include "ADC.h"


 int main(void)
 {
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	00 d0       	rcall	.+0      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 204:	00 d0       	rcall	.+0      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 206:	00 d0       	rcall	.+0      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
	 DDRC = 0xff;
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	84 bb       	out	0x14, r24	; 20
	 ADC_CONFIG s1;
	 s1.ref_selection = AVCC;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	89 83       	std	Y+1, r24	; 0x01
	 s1.prescaler_selection = PRESCALER_2;
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	8b 83       	std	Y+3, r24	; 0x03
	 ADC_INIT(&s1);
 218:	ce 01       	movw	r24, r28
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	0e 94 45 00 	call	0x8a	; 0x8a <ADC_INIT>
	 uint16_t x = 0 ;
	 while (1)
		{
			x = ADC_READ(0);
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 c1 00 	call	0x182	; 0x182 <ADC_READ>
			if (x!=0)
 226:	00 97       	sbiw	r24, 0x00	; 0
 228:	09 f0       	breq	.+2      	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
			{
				PORTC = x ;
 22a:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	2f ef       	ldi	r18, 0xFF	; 255
 22e:	83 e2       	ldi	r24, 0x23	; 35
 230:	94 ef       	ldi	r25, 0xF4	; 244
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
 23c:	00 00       	nop
 23e:	f0 cf       	rjmp	.-32     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>

00000240 <__tablejump2__>:
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	05 90       	lpm	r0, Z+
 246:	f4 91       	lpm	r31, Z
 248:	e0 2d       	mov	r30, r0
 24a:	09 94       	ijmp

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
