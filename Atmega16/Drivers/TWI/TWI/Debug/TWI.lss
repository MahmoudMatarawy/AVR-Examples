
TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c3  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000658  00000000  00000000  00000a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000322  00000000  00000000  00001077  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  0000139c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034a  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000116  00000000  00000000  000017aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000018c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "TWI.h"


int main(void)
{
	twi_init();
  6c:	0e 94 58 00 	call	0xb0	; 0xb0 <twi_init>
	twi_start();
  70:	0e 94 6b 00 	call	0xd6	; 0xd6 <twi_start>
	twi_write(0xaf);
  74:	8f ea       	ldi	r24, 0xAF	; 175
  76:	0e 94 74 00 	call	0xe8	; 0xe8 <twi_write>
	twi_stop();
  7a:	0e 94 71 00 	call	0xe2	; 0xe2 <twi_stop>
  7e:	ff cf       	rjmp	.-2      	; 0x7e <main+0x12>

00000080 <power>:
 * Author: Mahmoud Sarhan
 * Email  : eng.mahmoud.adel94@gmail.com
 */ 
#include "TWI.h"
unsigned int power(int base , int factor)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
	if (factor == 0)
  84:	61 15       	cp	r22, r1
  86:	71 05       	cpc	r23, r1
  88:	71 f0       	breq	.+28     	; 0xa6 <power+0x26>
  8a:	ec 01       	movw	r28, r24
	{
		return 1;
	}
	return base * power(base,factor-1);
  8c:	61 50       	subi	r22, 0x01	; 1
  8e:	71 09       	sbc	r23, r1
  90:	0e 94 40 00 	call	0x80	; 0x80 <power>
  94:	9c 01       	movw	r18, r24
  96:	2c 9f       	mul	r18, r28
  98:	c0 01       	movw	r24, r0
  9a:	2d 9f       	mul	r18, r29
  9c:	90 0d       	add	r25, r0
  9e:	3c 9f       	mul	r19, r28
  a0:	90 0d       	add	r25, r0
  a2:	11 24       	eor	r1, r1
  a4:	02 c0       	rjmp	.+4      	; 0xaa <power+0x2a>
#include "TWI.h"
unsigned int power(int base , int factor)
{
	if (factor == 0)
	{
		return 1;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
	}
	return base * power(base,factor-1);
}
  aa:	df 91       	pop	r29
  ac:	cf 91       	pop	r28
  ae:	08 95       	ret

000000b0 <twi_init>:

// Function to initialize TWI 
void twi_init(void)
{
	// set SCL to 100KHZ
	TWSR = 0X00;
  b0:	11 b8       	out	0x01, r1	; 1
	TWBR = BIT_RATE(100000);
  b2:	61 b1       	in	r22, 0x01	; 1
  b4:	63 70       	andi	r22, 0x03	; 3
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	84 e0       	ldi	r24, 0x04	; 4
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 40 00 	call	0x80	; 0x80 <power>
  c0:	bc 01       	movw	r22, r24
  c2:	66 0f       	add	r22, r22
  c4:	77 1f       	adc	r23, r23
  c6:	80 e4       	ldi	r24, 0x40	; 64
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 7b 00 	call	0xf6	; 0xf6 <__udivmodhi4>
  ce:	60 b9       	out	0x00, r22	; 0
	//enable TWI 
	TWCR = (1<<TWEN);
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	86 bf       	out	0x36, r24	; 54
  d4:	08 95       	ret

000000d6 <twi_start>:

// function to start TWI
void twi_start(void)
{
	// SET TWI to start mode 
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  d6:	84 ea       	ldi	r24, 0xA4	; 164
  d8:	86 bf       	out	0x36, r24	; 54
	// WAIT till TWI start 
	while ((TWCR & (1<<TWINT))==0);
  da:	06 b6       	in	r0, 0x36	; 54
  dc:	07 fe       	sbrs	r0, 7
  de:	fd cf       	rjmp	.-6      	; 0xda <twi_start+0x4>
}
  e0:	08 95       	ret

000000e2 <twi_stop>:

// function to stop TWI
void twi_stop(void)
{
	// SET TWI to stop mode 
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  e2:	84 e9       	ldi	r24, 0x94	; 148
  e4:	86 bf       	out	0x36, r24	; 54
  e6:	08 95       	ret

000000e8 <twi_write>:
}

// function to write 
void twi_write(uint8_t u8_data)
{
	TWDR = u8_data;
  e8:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
  ea:	84 e8       	ldi	r24, 0x84	; 132
  ec:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & (1<<TWINT))==0);
  ee:	06 b6       	in	r0, 0x36	; 54
  f0:	07 fe       	sbrs	r0, 7
  f2:	fd cf       	rjmp	.-6      	; 0xee <twi_write+0x6>
}
  f4:	08 95       	ret

000000f6 <__udivmodhi4>:
  f6:	aa 1b       	sub	r26, r26
  f8:	bb 1b       	sub	r27, r27
  fa:	51 e1       	ldi	r21, 0x11	; 17
  fc:	07 c0       	rjmp	.+14     	; 0x10c <__udivmodhi4_ep>

000000fe <__udivmodhi4_loop>:
  fe:	aa 1f       	adc	r26, r26
 100:	bb 1f       	adc	r27, r27
 102:	a6 17       	cp	r26, r22
 104:	b7 07       	cpc	r27, r23
 106:	10 f0       	brcs	.+4      	; 0x10c <__udivmodhi4_ep>
 108:	a6 1b       	sub	r26, r22
 10a:	b7 0b       	sbc	r27, r23

0000010c <__udivmodhi4_ep>:
 10c:	88 1f       	adc	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	5a 95       	dec	r21
 112:	a9 f7       	brne	.-22     	; 0xfe <__udivmodhi4_loop>
 114:	80 95       	com	r24
 116:	90 95       	com	r25
 118:	bc 01       	movw	r22, r24
 11a:	cd 01       	movw	r24, r26
 11c:	08 95       	ret

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
