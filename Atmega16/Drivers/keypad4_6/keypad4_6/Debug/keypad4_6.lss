
keypad4_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000432  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000432  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000464  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b7  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f4  00000000  00000000  00000b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000470  00000000  00000000  00001193  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001604  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000316  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019e  00000000  00000000  00001972  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <main>
  64:	0c 94 ed 01 	jmp	0x3da	; 0x3da <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <v_Keypad_Init>:
*				 and lines as input
*/
void v_Keypad_Init(void)
{
	// Set all ROWS as output
	ROW0_DDR |= (1U<<ROW0);
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	84 bb       	out	0x14, r24	; 20
	ROW1_DDR |= (1U<<ROW1);
  72:	84 b3       	in	r24, 0x14	; 20
  74:	82 60       	ori	r24, 0x02	; 2
  76:	84 bb       	out	0x14, r24	; 20
	ROW2_DDR |= (1U<<ROW2);
  78:	84 b3       	in	r24, 0x14	; 20
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	84 bb       	out	0x14, r24	; 20
	ROW3_DDR |= (1U<<ROW3);
  7e:	84 b3       	in	r24, 0x14	; 20
  80:	88 60       	ori	r24, 0x08	; 8
  82:	84 bb       	out	0x14, r24	; 20
	// Set all LINES as input
	LINE0_DDR &=~(1U<<LINE0);
  84:	84 b3       	in	r24, 0x14	; 20
  86:	8f 7e       	andi	r24, 0xEF	; 239
  88:	84 bb       	out	0x14, r24	; 20
	LINE1_DDR &=~(1U<<LINE1);
  8a:	84 b3       	in	r24, 0x14	; 20
  8c:	8f 7d       	andi	r24, 0xDF	; 223
  8e:	84 bb       	out	0x14, r24	; 20
	LINE2_DDR &=~(1U<<LINE2);
  90:	84 b3       	in	r24, 0x14	; 20
  92:	8f 7b       	andi	r24, 0xBF	; 191
  94:	84 bb       	out	0x14, r24	; 20
	LINE3_DDR &=~(1U<<LINE3);
  96:	84 b3       	in	r24, 0x14	; 20
  98:	8f 77       	andi	r24, 0x7F	; 127
  9a:	84 bb       	out	0x14, r24	; 20
	LINE4_DDR &=~(1U<<LINE4);
  9c:	81 b3       	in	r24, 0x11	; 17
  9e:	8e 7f       	andi	r24, 0xFE	; 254
  a0:	81 bb       	out	0x11, r24	; 17
	LINE5_DDR &=~(1U<<LINE5);
  a2:	81 b3       	in	r24, 0x11	; 17
  a4:	8d 7f       	andi	r24, 0xFD	; 253
  a6:	81 bb       	out	0x11, r24	; 17
	// Enable PULLUP
	LINE0_PULLUP |=(1U<<LINE0);
  a8:	85 b3       	in	r24, 0x15	; 21
  aa:	80 61       	ori	r24, 0x10	; 16
  ac:	85 bb       	out	0x15, r24	; 21
	LINE1_PULLUP |=(1U<<LINE1);
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	85 bb       	out	0x15, r24	; 21
	LINE2_PULLUP |=(1U<<LINE2);
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	85 bb       	out	0x15, r24	; 21
	LINE3_PULLUP |=(1U<<LINE3);
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	85 bb       	out	0x15, r24	; 21
	LINE4_PULLUP |=(1U<<LINE4);
  c0:	82 b3       	in	r24, 0x12	; 18
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	82 bb       	out	0x12, r24	; 18
	LINE5_PULLUP |=(1U<<LINE5);
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	82 bb       	out	0x12, r24	; 18
	// Set all ROWS as HIGH
	ROW0_PORT |=(1U<<ROW0);
  cc:	85 b3       	in	r24, 0x15	; 21
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	85 bb       	out	0x15, r24	; 21
	ROW1_PORT |=(1U<<ROW1);
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	85 bb       	out	0x15, r24	; 21
	ROW2_PORT |=(1U<<ROW2);
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	85 bb       	out	0x15, r24	; 21
	ROW3_PORT |=(1U<<ROW3);
  de:	85 b3       	in	r24, 0x15	; 21
  e0:	88 60       	ori	r24, 0x08	; 8
  e2:	85 bb       	out	0x15, r24	; 21
  e4:	08 95       	ret

000000e6 <u8_cKeypad_Scan>:
*purpose       : scan the keypad and return the pressed key
*				and returns null if no key pressed
*/
uint8_t u8_cKeypad_Scan(void)
{
	uint8_t row=0,input=0;
  e6:	80 e0       	ldi	r24, 0x00	; 0
	// loop for ROW
	for (row=0;row<4;row++)
  e8:	e0 e0       	ldi	r30, 0x00	; 0
  ea:	e9 c0       	rjmp	.+466    	; 0x2be <__EEPROM_REGION_LENGTH__+0xbe>
	{
		//set all rows high
		ROW0_PORT |=(1U<<ROW0);
  ec:	85 b3       	in	r24, 0x15	; 21
  ee:	81 60       	ori	r24, 0x01	; 1
  f0:	85 bb       	out	0x15, r24	; 21
		ROW1_PORT |=(1U<<ROW1);
  f2:	85 b3       	in	r24, 0x15	; 21
  f4:	82 60       	ori	r24, 0x02	; 2
  f6:	85 bb       	out	0x15, r24	; 21
		ROW2_PORT |=(1U<<ROW2);
  f8:	85 b3       	in	r24, 0x15	; 21
  fa:	84 60       	ori	r24, 0x04	; 4
  fc:	85 bb       	out	0x15, r24	; 21
		ROW3_PORT |=(1U<<ROW3);
  fe:	85 b3       	in	r24, 0x15	; 21
 100:	88 60       	ori	r24, 0x08	; 8
 102:	85 bb       	out	0x15, r24	; 21
		//clear row number from iteration
		switch(row)
 104:	e1 30       	cpi	r30, 0x01	; 1
 106:	51 f0       	breq	.+20     	; 0x11c <u8_cKeypad_Scan+0x36>
 108:	28 f0       	brcs	.+10     	; 0x114 <u8_cKeypad_Scan+0x2e>
 10a:	e2 30       	cpi	r30, 0x02	; 2
 10c:	59 f0       	breq	.+22     	; 0x124 <u8_cKeypad_Scan+0x3e>
 10e:	e3 30       	cpi	r30, 0x03	; 3
 110:	69 f0       	breq	.+26     	; 0x12c <u8_cKeypad_Scan+0x46>
 112:	0f c0       	rjmp	.+30     	; 0x132 <u8_cKeypad_Scan+0x4c>
		{
			case 0:ROW0_PORT &=~(1U<<ROW0);
 114:	85 b3       	in	r24, 0x15	; 21
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	85 bb       	out	0x15, r24	; 21
			break;
 11a:	0b c0       	rjmp	.+22     	; 0x132 <u8_cKeypad_Scan+0x4c>
			case 1:ROW1_PORT &=~(1U<<ROW1);
 11c:	85 b3       	in	r24, 0x15	; 21
 11e:	8d 7f       	andi	r24, 0xFD	; 253
 120:	85 bb       	out	0x15, r24	; 21
			break;
 122:	07 c0       	rjmp	.+14     	; 0x132 <u8_cKeypad_Scan+0x4c>
			case 2:ROW2_PORT &=~(1U<<ROW2);
 124:	85 b3       	in	r24, 0x15	; 21
 126:	8b 7f       	andi	r24, 0xFB	; 251
 128:	85 bb       	out	0x15, r24	; 21
			break;
 12a:	03 c0       	rjmp	.+6      	; 0x132 <u8_cKeypad_Scan+0x4c>
			case 3:ROW3_PORT &=~(1U<<ROW3);
 12c:	85 b3       	in	r24, 0x15	; 21
 12e:	87 7f       	andi	r24, 0xF7	; 247
 130:	85 bb       	out	0x15, r24	; 21
			break;
		}
		//read the input
		input  = (((LINE0_PIN&(1U<<LINE0))>>LINE0));
 132:	23 b3       	in	r18, 0x13	; 19
 134:	20 71       	andi	r18, 0x10	; 16
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	32 95       	swap	r19
 13a:	22 95       	swap	r18
 13c:	2f 70       	andi	r18, 0x0F	; 15
 13e:	23 27       	eor	r18, r19
 140:	3f 70       	andi	r19, 0x0F	; 15
 142:	23 27       	eor	r18, r19
		input |= (((LINE1_PIN&(1U<<LINE1))>>LINE1)<<1);
 144:	93 b3       	in	r25, 0x13	; 19
 146:	90 72       	andi	r25, 0x20	; 32
 148:	89 2f       	mov	r24, r25
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	96 95       	lsr	r25
 14e:	87 95       	ror	r24
 150:	92 95       	swap	r25
 152:	82 95       	swap	r24
 154:	8f 70       	andi	r24, 0x0F	; 15
 156:	89 27       	eor	r24, r25
 158:	9f 70       	andi	r25, 0x0F	; 15
 15a:	89 27       	eor	r24, r25
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	28 2b       	or	r18, r24
		input |= (((LINE2_PIN&(1U<<LINE2))>>LINE2)<<2);
 162:	93 b3       	in	r25, 0x13	; 19
 164:	90 74       	andi	r25, 0x40	; 64
 166:	89 2f       	mov	r24, r25
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	00 24       	eor	r0, r0
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	00 1c       	adc	r0, r0
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	00 1c       	adc	r0, r0
 178:	89 2f       	mov	r24, r25
 17a:	90 2d       	mov	r25, r0
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	82 2b       	or	r24, r18
		input |= (((LINE3_PIN&(1U<<LINE3))>>LINE3)<<3);
 186:	23 b3       	in	r18, 0x13	; 19
 188:	22 1f       	adc	r18, r18
 18a:	22 27       	eor	r18, r18
 18c:	22 1f       	adc	r18, r18
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	22 0f       	add	r18, r18
 192:	33 1f       	adc	r19, r19
 194:	22 0f       	add	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	22 0f       	add	r18, r18
 19a:	33 1f       	adc	r19, r19
 19c:	82 2b       	or	r24, r18
		input |= (((LINE4_PIN&(1U<<LINE4))>>LINE4)<<4);
 19e:	90 b3       	in	r25, 0x10	; 16
 1a0:	49 2f       	mov	r20, r25
 1a2:	41 70       	andi	r20, 0x01	; 1
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	9a 01       	movw	r18, r20
 1a8:	22 95       	swap	r18
 1aa:	32 95       	swap	r19
 1ac:	30 7f       	andi	r19, 0xF0	; 240
 1ae:	32 27       	eor	r19, r18
 1b0:	20 7f       	andi	r18, 0xF0	; 240
 1b2:	32 27       	eor	r19, r18
 1b4:	82 2b       	or	r24, r18
		input |= (((LINE5_PIN&(1U<<LINE5))>>LINE5)<<5);
 1b6:	20 b3       	in	r18, 0x10	; 16
 1b8:	22 70       	andi	r18, 0x02	; 2
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	36 95       	lsr	r19
 1be:	27 95       	ror	r18
 1c0:	22 0f       	add	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	22 95       	swap	r18
 1c6:	32 95       	swap	r19
 1c8:	30 7f       	andi	r19, 0xF0	; 240
 1ca:	32 27       	eor	r19, r18
 1cc:	20 7f       	andi	r18, 0xF0	; 240
 1ce:	32 27       	eor	r19, r18
 1d0:	82 2b       	or	r24, r18
		//0x3F
		//if it was input
		if(ALL_LINES != 1)
 1d2:	23 b3       	in	r18, 0x13	; 19
 1d4:	20 71       	andi	r18, 0x10	; 16
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	d9 01       	movw	r26, r18
 1da:	b2 95       	swap	r27
 1dc:	a2 95       	swap	r26
 1de:	af 70       	andi	r26, 0x0F	; 15
 1e0:	ab 27       	eor	r26, r27
 1e2:	bf 70       	andi	r27, 0x0F	; 15
 1e4:	ab 27       	eor	r26, r27
 1e6:	63 b3       	in	r22, 0x13	; 19
 1e8:	60 72       	andi	r22, 0x20	; 32
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	9b 01       	movw	r18, r22
 1ee:	36 95       	lsr	r19
 1f0:	27 95       	ror	r18
 1f2:	32 95       	swap	r19
 1f4:	22 95       	swap	r18
 1f6:	2f 70       	andi	r18, 0x0F	; 15
 1f8:	23 27       	eor	r18, r19
 1fa:	3f 70       	andi	r19, 0x0F	; 15
 1fc:	23 27       	eor	r18, r19
 1fe:	2a 23       	and	r18, r26
 200:	3b 23       	and	r19, r27
 202:	63 b3       	in	r22, 0x13	; 19
 204:	60 74       	andi	r22, 0x40	; 64
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	00 24       	eor	r0, r0
 20a:	66 0f       	add	r22, r22
 20c:	77 1f       	adc	r23, r23
 20e:	00 1c       	adc	r0, r0
 210:	66 0f       	add	r22, r22
 212:	77 1f       	adc	r23, r23
 214:	00 1c       	adc	r0, r0
 216:	67 2f       	mov	r22, r23
 218:	70 2d       	mov	r23, r0
 21a:	26 23       	and	r18, r22
 21c:	37 23       	and	r19, r23
 21e:	63 b3       	in	r22, 0x13	; 19
 220:	66 1f       	adc	r22, r22
 222:	66 27       	eor	r22, r22
 224:	66 1f       	adc	r22, r22
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	26 23       	and	r18, r22
 22a:	37 23       	and	r19, r23
 22c:	60 b3       	in	r22, 0x10	; 16
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	26 23       	and	r18, r22
 232:	37 23       	and	r19, r23
 234:	60 b3       	in	r22, 0x10	; 16
 236:	62 70       	andi	r22, 0x02	; 2
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	76 95       	lsr	r23
 23c:	67 95       	ror	r22
 23e:	26 23       	and	r18, r22
 240:	37 23       	and	r19, r23
 242:	23 2b       	or	r18, r19
 244:	d9 f5       	brne	.+118    	; 0x2bc <__EEPROM_REGION_LENGTH__+0xbc>
		{
			//wait till the input is gone
			while(ALL_LINES != 1);
 246:	23 b3       	in	r18, 0x13	; 19
 248:	20 71       	andi	r18, 0x10	; 16
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	b9 01       	movw	r22, r18
 24e:	72 95       	swap	r23
 250:	62 95       	swap	r22
 252:	6f 70       	andi	r22, 0x0F	; 15
 254:	67 27       	eor	r22, r23
 256:	7f 70       	andi	r23, 0x0F	; 15
 258:	67 27       	eor	r22, r23
 25a:	43 b3       	in	r20, 0x13	; 19
 25c:	40 72       	andi	r20, 0x20	; 32
 25e:	50 e0       	ldi	r21, 0x00	; 0
 260:	9a 01       	movw	r18, r20
 262:	36 95       	lsr	r19
 264:	27 95       	ror	r18
 266:	32 95       	swap	r19
 268:	22 95       	swap	r18
 26a:	2f 70       	andi	r18, 0x0F	; 15
 26c:	23 27       	eor	r18, r19
 26e:	3f 70       	andi	r19, 0x0F	; 15
 270:	23 27       	eor	r18, r19
 272:	26 23       	and	r18, r22
 274:	37 23       	and	r19, r23
 276:	43 b3       	in	r20, 0x13	; 19
 278:	40 74       	andi	r20, 0x40	; 64
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	00 24       	eor	r0, r0
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	00 1c       	adc	r0, r0
 284:	44 0f       	add	r20, r20
 286:	55 1f       	adc	r21, r21
 288:	00 1c       	adc	r0, r0
 28a:	45 2f       	mov	r20, r21
 28c:	50 2d       	mov	r21, r0
 28e:	24 23       	and	r18, r20
 290:	35 23       	and	r19, r21
 292:	43 b3       	in	r20, 0x13	; 19
 294:	44 1f       	adc	r20, r20
 296:	44 27       	eor	r20, r20
 298:	44 1f       	adc	r20, r20
 29a:	50 e0       	ldi	r21, 0x00	; 0
 29c:	24 23       	and	r18, r20
 29e:	35 23       	and	r19, r21
 2a0:	40 b3       	in	r20, 0x10	; 16
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	24 23       	and	r18, r20
 2a6:	35 23       	and	r19, r21
 2a8:	40 b3       	in	r20, 0x10	; 16
 2aa:	42 70       	andi	r20, 0x02	; 2
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	56 95       	lsr	r21
 2b0:	47 95       	ror	r20
 2b2:	24 23       	and	r18, r20
 2b4:	35 23       	and	r19, r21
 2b6:	23 2b       	or	r18, r19
 2b8:	31 f2       	breq	.-116    	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
*/
uint8_t u8_cKeypad_Scan(void)
{
	uint8_t row=0,input=0;
	// loop for ROW
	for (row=0;row<4;row++)
 2bc:	ef 5f       	subi	r30, 0xFF	; 255
 2be:	e4 30       	cpi	r30, 0x04	; 4
 2c0:	08 f4       	brcc	.+2      	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
 2c2:	14 cf       	rjmp	.-472    	; 0xec <u8_cKeypad_Scan+0x6>
			//wait till the input is gone
			while(ALL_LINES != 1);
			break;
		}
	}
	if(row == 4)
 2c4:	e4 30       	cpi	r30, 0x04	; 4
 2c6:	09 f4       	brne	.+2      	; 0x2ca <__EEPROM_REGION_LENGTH__+0xca>
 2c8:	71 c0       	rjmp	.+226    	; 0x3ac <__EEPROM_REGION_LENGTH__+0x1ac>
	{
		return 0;
	}
	//switch the rows
	switch(row)
 2ca:	e1 30       	cpi	r30, 0x01	; 1
 2cc:	09 f1       	breq	.+66     	; 0x310 <__EEPROM_REGION_LENGTH__+0x110>
 2ce:	30 f0       	brcs	.+12     	; 0x2dc <__EEPROM_REGION_LENGTH__+0xdc>
 2d0:	e2 30       	cpi	r30, 0x02	; 2
 2d2:	c1 f1       	breq	.+112    	; 0x344 <__EEPROM_REGION_LENGTH__+0x144>
 2d4:	e3 30       	cpi	r30, 0x03	; 3
 2d6:	09 f4       	brne	.+2      	; 0x2da <__EEPROM_REGION_LENGTH__+0xda>
 2d8:	4e c0       	rjmp	.+156    	; 0x376 <__EEPROM_REGION_LENGTH__+0x176>
 2da:	6a c0       	rjmp	.+212    	; 0x3b0 <__EEPROM_REGION_LENGTH__+0x1b0>
	{
		case 0 :
		switch(input)
 2dc:	87 33       	cpi	r24, 0x37	; 55
 2de:	81 f0       	breq	.+32     	; 0x300 <__EEPROM_REGION_LENGTH__+0x100>
 2e0:	30 f4       	brcc	.+12     	; 0x2ee <__EEPROM_REGION_LENGTH__+0xee>
 2e2:	8f 31       	cpi	r24, 0x1F	; 31
 2e4:	59 f0       	breq	.+22     	; 0x2fc <__EEPROM_REGION_LENGTH__+0xfc>
 2e6:	8f 32       	cpi	r24, 0x2F	; 47
 2e8:	09 f4       	brne	.+2      	; 0x2ec <__EEPROM_REGION_LENGTH__+0xec>
 2ea:	64 c0       	rjmp	.+200    	; 0x3b4 <__EEPROM_REGION_LENGTH__+0x1b4>
 2ec:	11 c0       	rjmp	.+34     	; 0x310 <__EEPROM_REGION_LENGTH__+0x110>
 2ee:	8d 33       	cpi	r24, 0x3D	; 61
 2f0:	59 f0       	breq	.+22     	; 0x308 <__EEPROM_REGION_LENGTH__+0x108>
 2f2:	8e 33       	cpi	r24, 0x3E	; 62
 2f4:	59 f0       	breq	.+22     	; 0x30c <__EEPROM_REGION_LENGTH__+0x10c>
 2f6:	8b 33       	cpi	r24, 0x3B	; 59
 2f8:	59 f4       	brne	.+22     	; 0x310 <__EEPROM_REGION_LENGTH__+0x110>
 2fa:	04 c0       	rjmp	.+8      	; 0x304 <__EEPROM_REGION_LENGTH__+0x104>
		{
			case 0x1F : return '/';
 2fc:	8f e2       	ldi	r24, 0x2F	; 47
 2fe:	08 95       	ret
			case 0x2F : return '*';
			case 0x37 : return '9';
 300:	89 e3       	ldi	r24, 0x39	; 57
 302:	08 95       	ret
			case 0x3B : return '8';
 304:	88 e3       	ldi	r24, 0x38	; 56
 306:	08 95       	ret
			case 0x3D : return '7';
 308:	87 e3       	ldi	r24, 0x37	; 55
 30a:	08 95       	ret
			case 0x3E : return 'C';
 30c:	83 e4       	ldi	r24, 0x43	; 67
 30e:	08 95       	ret
		}
		case 1 :
		switch(input)
 310:	87 33       	cpi	r24, 0x37	; 55
 312:	81 f0       	breq	.+32     	; 0x334 <__EEPROM_REGION_LENGTH__+0x134>
 314:	30 f4       	brcc	.+12     	; 0x322 <__EEPROM_REGION_LENGTH__+0x122>
 316:	8f 31       	cpi	r24, 0x1F	; 31
 318:	59 f0       	breq	.+22     	; 0x330 <__EEPROM_REGION_LENGTH__+0x130>
 31a:	8f 32       	cpi	r24, 0x2F	; 47
 31c:	09 f4       	brne	.+2      	; 0x320 <__EEPROM_REGION_LENGTH__+0x120>
 31e:	4c c0       	rjmp	.+152    	; 0x3b8 <__EEPROM_REGION_LENGTH__+0x1b8>
 320:	11 c0       	rjmp	.+34     	; 0x344 <__EEPROM_REGION_LENGTH__+0x144>
 322:	8d 33       	cpi	r24, 0x3D	; 61
 324:	59 f0       	breq	.+22     	; 0x33c <__EEPROM_REGION_LENGTH__+0x13c>
 326:	8e 33       	cpi	r24, 0x3E	; 62
 328:	59 f0       	breq	.+22     	; 0x340 <__EEPROM_REGION_LENGTH__+0x140>
 32a:	8b 33       	cpi	r24, 0x3B	; 59
 32c:	59 f4       	brne	.+22     	; 0x344 <__EEPROM_REGION_LENGTH__+0x144>
 32e:	04 c0       	rjmp	.+8      	; 0x338 <__EEPROM_REGION_LENGTH__+0x138>
		{
			case 0x1F : return 'M';
 330:	8d e4       	ldi	r24, 0x4D	; 77
 332:	08 95       	ret
			case 0x2F : return '-';
			case 0x37 : return '6';
 334:	86 e3       	ldi	r24, 0x36	; 54
 336:	08 95       	ret
			case 0x3B : return '5';
 338:	85 e3       	ldi	r24, 0x35	; 53
 33a:	08 95       	ret
			case 0x3D : return '4';
 33c:	84 e3       	ldi	r24, 0x34	; 52
 33e:	08 95       	ret
			case 0x3E : return 'S';
 340:	83 e5       	ldi	r24, 0x53	; 83
 342:	08 95       	ret
		}
		case 2 :
		switch(input)
 344:	87 33       	cpi	r24, 0x37	; 55
 346:	79 f0       	breq	.+30     	; 0x366 <__EEPROM_REGION_LENGTH__+0x166>
 348:	28 f4       	brcc	.+10     	; 0x354 <__EEPROM_REGION_LENGTH__+0x154>
 34a:	8f 31       	cpi	r24, 0x1F	; 31
 34c:	51 f0       	breq	.+20     	; 0x362 <__EEPROM_REGION_LENGTH__+0x162>
 34e:	8f 32       	cpi	r24, 0x2F	; 47
 350:	a9 f1       	breq	.+106    	; 0x3bc <__EEPROM_REGION_LENGTH__+0x1bc>
 352:	11 c0       	rjmp	.+34     	; 0x376 <__EEPROM_REGION_LENGTH__+0x176>
 354:	8d 33       	cpi	r24, 0x3D	; 61
 356:	59 f0       	breq	.+22     	; 0x36e <__EEPROM_REGION_LENGTH__+0x16e>
 358:	8e 33       	cpi	r24, 0x3E	; 62
 35a:	59 f0       	breq	.+22     	; 0x372 <__EEPROM_REGION_LENGTH__+0x172>
 35c:	8b 33       	cpi	r24, 0x3B	; 59
 35e:	59 f4       	brne	.+22     	; 0x376 <__EEPROM_REGION_LENGTH__+0x176>
 360:	04 c0       	rjmp	.+8      	; 0x36a <__EEPROM_REGION_LENGTH__+0x16a>
		{
			case 0x1F : return 'A';
 362:	81 e4       	ldi	r24, 0x41	; 65
 364:	08 95       	ret
			case 0x2F : return '+';
			case 0x37 : return '3';
 366:	83 e3       	ldi	r24, 0x33	; 51
 368:	08 95       	ret
			case 0x3B : return '2';
 36a:	82 e3       	ldi	r24, 0x32	; 50
 36c:	08 95       	ret
			case 0x3D : return '1';
 36e:	81 e3       	ldi	r24, 0x31	; 49
 370:	08 95       	ret
			case 0x3E : return 'P';
 372:	80 e5       	ldi	r24, 0x50	; 80
 374:	08 95       	ret
		}
		case 3 :
		switch(input)
 376:	87 33       	cpi	r24, 0x37	; 55
 378:	89 f0       	breq	.+34     	; 0x39c <__EEPROM_REGION_LENGTH__+0x19c>
 37a:	28 f4       	brcc	.+10     	; 0x386 <__EEPROM_REGION_LENGTH__+0x186>
 37c:	8f 31       	cpi	r24, 0x1F	; 31
 37e:	51 f0       	breq	.+20     	; 0x394 <__EEPROM_REGION_LENGTH__+0x194>
 380:	8f 32       	cpi	r24, 0x2F	; 47
 382:	f1 f0       	breq	.+60     	; 0x3c0 <__EEPROM_REGION_LENGTH__+0x1c0>
 384:	09 c0       	rjmp	.+18     	; 0x398 <__EEPROM_REGION_LENGTH__+0x198>
 386:	8d 33       	cpi	r24, 0x3D	; 61
 388:	69 f0       	breq	.+26     	; 0x3a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 38a:	8e 33       	cpi	r24, 0x3E	; 62
 38c:	69 f0       	breq	.+26     	; 0x3a8 <__EEPROM_REGION_LENGTH__+0x1a8>
 38e:	8b 33       	cpi	r24, 0x3B	; 59
 390:	19 f4       	brne	.+6      	; 0x398 <__EEPROM_REGION_LENGTH__+0x198>
 392:	06 c0       	rjmp	.+12     	; 0x3a0 <__EEPROM_REGION_LENGTH__+0x1a0>
		{
			case 0x1F : return 'B';
 394:	82 e4       	ldi	r24, 0x42	; 66
 396:	08 95       	ret
			case 0x3B : return '.';
			case 0x3D : return '0';
			case 0x3E : return 'R';
		}
	}
	return 0;
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	08 95       	ret
		case 3 :
		switch(input)
		{
			case 0x1F : return 'B';
			case 0x2F : return '+';
			case 0x37 : return '=';
 39c:	8d e3       	ldi	r24, 0x3D	; 61
 39e:	08 95       	ret
			case 0x3B : return '.';
 3a0:	8e e2       	ldi	r24, 0x2E	; 46
 3a2:	08 95       	ret
			case 0x3D : return '0';
 3a4:	80 e3       	ldi	r24, 0x30	; 48
 3a6:	08 95       	ret
			case 0x3E : return 'R';
 3a8:	82 e5       	ldi	r24, 0x52	; 82
 3aa:	08 95       	ret
			break;
		}
	}
	if(row == 4)
	{
		return 0;
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	08 95       	ret
			case 0x3B : return '.';
			case 0x3D : return '0';
			case 0x3E : return 'R';
		}
	}
	return 0;
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	08 95       	ret
	{
		case 0 :
		switch(input)
		{
			case 0x1F : return '/';
			case 0x2F : return '*';
 3b4:	8a e2       	ldi	r24, 0x2A	; 42
 3b6:	08 95       	ret
		}
		case 1 :
		switch(input)
		{
			case 0x1F : return 'M';
			case 0x2F : return '-';
 3b8:	8d e2       	ldi	r24, 0x2D	; 45
 3ba:	08 95       	ret
		}
		case 2 :
		switch(input)
		{
			case 0x1F : return 'A';
			case 0x2F : return '+';
 3bc:	8b e2       	ldi	r24, 0x2B	; 43
 3be:	08 95       	ret
		}
		case 3 :
		switch(input)
		{
			case 0x1F : return 'B';
			case 0x2F : return '+';
 3c0:	8b e2       	ldi	r24, 0x2B	; 43
			case 0x3D : return '0';
			case 0x3E : return 'R';
		}
	}
	return 0;
 3c2:	08 95       	ret

000003c4 <main>:
#include "keypad4-6.h"


int main(void)
{
    v_Keypad_Init();
 3c4:	0e 94 36 00 	call	0x6c	; 0x6c <v_Keypad_Init>
    DDRA = 0xff;
 3c8:	8f ef       	ldi	r24, 0xFF	; 255
 3ca:	8a bb       	out	0x1a, r24	; 26
    char x =0;
    while (1)
    {
	    x=u8_cKeypad_Scan();
 3cc:	0e 94 73 00 	call	0xe6	; 0xe6 <u8_cKeypad_Scan>
	    if (x>0)
 3d0:	88 23       	and	r24, r24
 3d2:	e1 f3       	breq	.-8      	; 0x3cc <main+0x8>
	    {
		    PORTA = x-48;
 3d4:	80 53       	subi	r24, 0x30	; 48
 3d6:	8b bb       	out	0x1b, r24	; 27
 3d8:	f9 cf       	rjmp	.-14     	; 0x3cc <main+0x8>

000003da <_exit>:
 3da:	f8 94       	cli

000003dc <__stop_program>:
 3dc:	ff cf       	rjmp	.-2      	; 0x3dc <__stop_program>
