
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000abb  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b6  00000000  00000000  00000d93  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000581  00000000  00000000  00001549  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00001acc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a7  00000000  00000000  00001bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027a  00000000  00000000  00001f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000021e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  64:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <EEReadbyte>:

#include "EEPROM.h"


uint8_t EEReadbyte(uint16_t add)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	c8 2f       	mov	r28, r24
  72:	d9 2f       	mov	r29, r25
	uint8_t data;
	twi_start();
  74:	0e 94 a6 00 	call	0x14c	; 0x14c <twi_start>
	twi_write(0xA0);		// Device Address
  78:	80 ea       	ldi	r24, 0xA0	; 160
  7a:	0e 94 af 00 	call	0x15e	; 0x15e <twi_write>
	twi_write(add>>8);		// Address high bits
  7e:	8d 2f       	mov	r24, r29
  80:	0e 94 af 00 	call	0x15e	; 0x15e <twi_write>
	twi_write(add);			// Address low bits
  84:	8c 2f       	mov	r24, r28
  86:	0e 94 af 00 	call	0x15e	; 0x15e <twi_write>
	twi_start();			// Restart
  8a:	0e 94 a6 00 	call	0x14c	; 0x14c <twi_start>
	twi_write(0xA1);		// Device Address
  8e:	81 ea       	ldi	r24, 0xA1	; 161
  90:	0e 94 af 00 	call	0x15e	; 0x15e <twi_write>
	data = twi_read_Nack();
  94:	0e 94 b6 00 	call	0x16c	; 0x16c <twi_read_Nack>
  98:	c8 2f       	mov	r28, r24
	twi_stop();
  9a:	0e 94 ac 00 	call	0x158	; 0x158 <twi_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	8f e1       	ldi	r24, 0x1F	; 31
  a0:	9e e4       	ldi	r25, 0x4E	; 78
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <EEReadbyte+0x36>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <EEReadbyte+0x3c>
  a8:	00 00       	nop
	_delay_ms(10);
	return data;
}
  aa:	8c 2f       	mov	r24, r28
  ac:	df 91       	pop	r29
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <EEWritebyte>:

void EEWritebyte(uint16_t add , uint8_t data)
{
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	d8 2f       	mov	r29, r24
  ba:	19 2f       	mov	r17, r25
  bc:	c6 2f       	mov	r28, r22
	twi_start();
  be:	0e 94 a6 00 	call	0x14c	; 0x14c <twi_start>
	twi_write(0xA0);		// Device Address
  c2:	80 ea       	ldi	r24, 0xA0	; 160
  c4:	0e 94 af 00 	call	0x15e	; 0x15e <twi_write>
	twi_write(add>>8);		// Address high bits
  c8:	81 2f       	mov	r24, r17
  ca:	0e 94 af 00 	call	0x15e	; 0x15e <twi_write>
	twi_write(add);			// Address low bits
  ce:	8d 2f       	mov	r24, r29
  d0:	0e 94 af 00 	call	0x15e	; 0x15e <twi_write>
	twi_write(data);
  d4:	8c 2f       	mov	r24, r28
  d6:	0e 94 af 00 	call	0x15e	; 0x15e <twi_write>
	twi_stop();
  da:	0e 94 ac 00 	call	0x158	; 0x158 <twi_stop>
  de:	8f ec       	ldi	r24, 0xCF	; 207
  e0:	97 e0       	ldi	r25, 0x07	; 7
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <EEWritebyte+0x30>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <EEWritebyte+0x36>
  e8:	00 00       	nop
	_delay_ms(1);
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	1f 91       	pop	r17
  f0:	08 95       	ret

000000f2 <main>:

#include "EEPROM.h"

int main(void)
{
	twi_init();
  f2:	0e 94 a0 00 	call	0x140	; 0x140 <twi_init>
	DDRA = 0xff;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	8a bb       	out	0x1a, r24	; 26
  fa:	8f e1       	ldi	r24, 0x1F	; 31
  fc:	9e e4       	ldi	r25, 0x4E	; 78
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0xc>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x12>
 104:	00 00       	nop
	_delay_ms(10);
	EEWritebyte(0x20,0xFA);
 106:	6a ef       	ldi	r22, 0xFA	; 250
 108:	80 e2       	ldi	r24, 0x20	; 32
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 59 00 	call	0xb2	; 0xb2 <EEWritebyte>
 110:	9f ef       	ldi	r25, 0xFF	; 255
 112:	21 e1       	ldi	r18, 0x11	; 17
 114:	8a e7       	ldi	r24, 0x7A	; 122
 116:	91 50       	subi	r25, 0x01	; 1
 118:	20 40       	sbci	r18, 0x00	; 0
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x24>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x2e>
 120:	00 00       	nop
	_delay_ms(5000);
	PORTA = EEReadbyte(0x20);
 122:	80 e2       	ldi	r24, 0x20	; 32
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 36 00 	call	0x6c	; 0x6c <EEReadbyte>
 12a:	8b bb       	out	0x1b, r24	; 27
 12c:	9f ef       	ldi	r25, 0xFF	; 255
 12e:	23 e2       	ldi	r18, 0x23	; 35
 130:	84 ef       	ldi	r24, 0xF4	; 244
 132:	91 50       	subi	r25, 0x01	; 1
 134:	20 40       	sbci	r18, 0x00	; 0
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x40>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x4a>
 13c:	00 00       	nop
 13e:	ff cf       	rjmp	.-2      	; 0x13e <main+0x4c>

00000140 <twi_init>:
uint8_t twi_read_ack(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
	while (!(TWCR & (1<<TWINT)));
	return TWDR;
}
 140:	11 b8       	out	0x01, r1	; 1
 142:	80 e2       	ldi	r24, 0x20	; 32
 144:	80 b9       	out	0x00, r24	; 0
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	86 bf       	out	0x36, r24	; 54
 14a:	08 95       	ret

0000014c <twi_start>:
 14c:	84 ea       	ldi	r24, 0xA4	; 164
 14e:	86 bf       	out	0x36, r24	; 54
 150:	06 b6       	in	r0, 0x36	; 54
 152:	07 fe       	sbrs	r0, 7
 154:	fd cf       	rjmp	.-6      	; 0x150 <twi_start+0x4>
 156:	08 95       	ret

00000158 <twi_stop>:
 158:	84 e9       	ldi	r24, 0x94	; 148
 15a:	86 bf       	out	0x36, r24	; 54
 15c:	08 95       	ret

0000015e <twi_write>:
 15e:	83 b9       	out	0x03, r24	; 3
 160:	84 e8       	ldi	r24, 0x84	; 132
 162:	86 bf       	out	0x36, r24	; 54
 164:	06 b6       	in	r0, 0x36	; 54
 166:	07 fe       	sbrs	r0, 7
 168:	fd cf       	rjmp	.-6      	; 0x164 <twi_write+0x6>
 16a:	08 95       	ret

0000016c <twi_read_Nack>:

// function to read in NACK mode 
uint8_t twi_read_Nack(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
 16c:	84 e8       	ldi	r24, 0x84	; 132
 16e:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));
 170:	06 b6       	in	r0, 0x36	; 54
 172:	07 fe       	sbrs	r0, 7
 174:	fd cf       	rjmp	.-6      	; 0x170 <twi_read_Nack+0x4>
	return TWDR ;
 176:	83 b1       	in	r24, 0x03	; 3
}
 178:	08 95       	ret

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
