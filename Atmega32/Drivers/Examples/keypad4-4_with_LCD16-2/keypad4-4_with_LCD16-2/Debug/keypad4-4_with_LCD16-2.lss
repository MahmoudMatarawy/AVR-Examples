
keypad4-4_with_LCD16-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000846  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000089a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000089a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f7b  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000761  00000000  00000000  00001933  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ab2  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00002b48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a5  00000000  00000000  00002c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e31  00000000  00000000  0000312d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003f5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 0b 04 	call	0x816	; 0x816 <main>
  64:	0c 94 21 04 	jmp	0x842	; 0x842 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <v_Keypad_Init>:
*/

void v_Keypad_Init(void)
{
	//set the rows direction as output
	ROW0_DDR |=(1U<<ROW0);
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	84 bb       	out	0x14, r24	; 20
	ROW1_DDR |=(1U<<ROW1);
  72:	84 b3       	in	r24, 0x14	; 20
  74:	82 60       	ori	r24, 0x02	; 2
  76:	84 bb       	out	0x14, r24	; 20
	ROW2_DDR |=(1U<<ROW2);
  78:	84 b3       	in	r24, 0x14	; 20
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	84 bb       	out	0x14, r24	; 20
	ROW3_DDR |=(1U<<ROW3);
  7e:	84 b3       	in	r24, 0x14	; 20
  80:	88 60       	ori	r24, 0x08	; 8
  82:	84 bb       	out	0x14, r24	; 20
	//set the line direction as input
	LINE0_DDR &=~(1U<<LINE0);
  84:	84 b3       	in	r24, 0x14	; 20
  86:	8f 7e       	andi	r24, 0xEF	; 239
  88:	84 bb       	out	0x14, r24	; 20
	LINE1_DDR &=~(1U<<LINE1);
  8a:	84 b3       	in	r24, 0x14	; 20
  8c:	8f 7d       	andi	r24, 0xDF	; 223
  8e:	84 bb       	out	0x14, r24	; 20
	LINE2_DDR &=~(1U<<LINE2);
  90:	84 b3       	in	r24, 0x14	; 20
  92:	8f 7b       	andi	r24, 0xBF	; 191
  94:	84 bb       	out	0x14, r24	; 20
	LINE3_DDR &=~(1U<<LINE3);
  96:	84 b3       	in	r24, 0x14	; 20
  98:	8f 77       	andi	r24, 0x7F	; 127
  9a:	84 bb       	out	0x14, r24	; 20
	//enable line pullup
	LINE0_PULLUP |=(1U<<LINE0);
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	85 bb       	out	0x15, r24	; 21
	LINE1_PULLUP |=(1U<<LINE1);
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	85 bb       	out	0x15, r24	; 21
	LINE2_PULLUP |=(1U<<LINE2);
  a8:	85 b3       	in	r24, 0x15	; 21
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	85 bb       	out	0x15, r24	; 21
	LINE3_PULLUP |=(1U<<LINE3);
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bb       	out	0x15, r24	; 21
	//set the rows high
	ROW0_PORT |=(1U<<ROW0);
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	85 bb       	out	0x15, r24	; 21
	ROW1_PORT |=(1U<<ROW1);
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	85 bb       	out	0x15, r24	; 21
	ROW2_PORT |=(1U<<ROW2);
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	85 bb       	out	0x15, r24	; 21
	ROW3_PORT |=(1U<<ROW3);
  c6:	85 b3       	in	r24, 0x15	; 21
  c8:	88 60       	ori	r24, 0x08	; 8
  ca:	85 bb       	out	0x15, r24	; 21
  cc:	08 95       	ret

000000ce <u8_cKeypad_Scan>:
*/
uint8_t u8_cKeypad_Scan(void)
{
	uint8_t row=0,input;
	//loop on row
	for(row=0;row<4;row++)
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	9a c0       	rjmp	.+308    	; 0x206 <u8_cKeypad_Scan+0x138>
	{
		//set all row high
		ROW0_PORT |=(1U<<ROW0);
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	85 bb       	out	0x15, r24	; 21
		ROW1_PORT |=(1U<<ROW1);
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	85 bb       	out	0x15, r24	; 21
		ROW2_PORT |=(1U<<ROW2);
  de:	85 b3       	in	r24, 0x15	; 21
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	85 bb       	out	0x15, r24	; 21
		ROW3_PORT |=(1U<<ROW3);
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	88 60       	ori	r24, 0x08	; 8
  e8:	85 bb       	out	0x15, r24	; 21
		//clear row number from iteration
		switch(row)
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	51 f0       	breq	.+20     	; 0x102 <u8_cKeypad_Scan+0x34>
  ee:	28 f0       	brcs	.+10     	; 0xfa <u8_cKeypad_Scan+0x2c>
  f0:	42 30       	cpi	r20, 0x02	; 2
  f2:	59 f0       	breq	.+22     	; 0x10a <u8_cKeypad_Scan+0x3c>
  f4:	43 30       	cpi	r20, 0x03	; 3
  f6:	69 f0       	breq	.+26     	; 0x112 <u8_cKeypad_Scan+0x44>
  f8:	0f c0       	rjmp	.+30     	; 0x118 <u8_cKeypad_Scan+0x4a>
		{
			case 0:ROW0_PORT &=~(1U<<ROW0);
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	8e 7f       	andi	r24, 0xFE	; 254
  fe:	85 bb       	out	0x15, r24	; 21
			break;
 100:	0b c0       	rjmp	.+22     	; 0x118 <u8_cKeypad_Scan+0x4a>
			case 1:ROW1_PORT &=~(1U<<ROW1);
 102:	85 b3       	in	r24, 0x15	; 21
 104:	8d 7f       	andi	r24, 0xFD	; 253
 106:	85 bb       	out	0x15, r24	; 21
			break;
 108:	07 c0       	rjmp	.+14     	; 0x118 <u8_cKeypad_Scan+0x4a>
			case 2:ROW2_PORT &=~(1U<<ROW2);
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	8b 7f       	andi	r24, 0xFB	; 251
 10e:	85 bb       	out	0x15, r24	; 21
			break;
 110:	03 c0       	rjmp	.+6      	; 0x118 <u8_cKeypad_Scan+0x4a>
			case 3:ROW3_PORT &=~(1U<<ROW3);
 112:	85 b3       	in	r24, 0x15	; 21
 114:	87 7f       	andi	r24, 0xF7	; 247
 116:	85 bb       	out	0x15, r24	; 21
			break;
		}
		//read the input
		input  = (((LINE0_PIN&(1U<<LINE0))>>LINE0)<<4);
 118:	93 b3       	in	r25, 0x13	; 19
 11a:	29 2f       	mov	r18, r25
 11c:	20 71       	andi	r18, 0x10	; 16
		input |= (((LINE1_PIN&(1U<<LINE1))>>LINE1)<<5);
 11e:	53 b3       	in	r21, 0x13	; 19
 120:	50 72       	andi	r21, 0x20	; 32
 122:	95 2f       	mov	r25, r21
 124:	92 2b       	or	r25, r18
		input |= (((LINE2_PIN&(1U<<LINE2))>>LINE2)<<6);
 126:	53 b3       	in	r21, 0x13	; 19
 128:	50 74       	andi	r21, 0x40	; 64
 12a:	59 2b       	or	r21, r25
		input |= (((LINE3_PIN&(1U<<LINE3))>>LINE3)<<7);
 12c:	83 b3       	in	r24, 0x13	; 19
 12e:	98 2f       	mov	r25, r24
 130:	99 1f       	adc	r25, r25
 132:	99 27       	eor	r25, r25
 134:	99 1f       	adc	r25, r25
 136:	89 2f       	mov	r24, r25
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	96 95       	lsr	r25
 13c:	98 2f       	mov	r25, r24
 13e:	88 27       	eor	r24, r24
 140:	97 95       	ror	r25
 142:	87 95       	ror	r24
 144:	58 2b       	or	r21, r24
		//0xF0
		//if it was input
		if(ALL_LINES != 1)
 146:	83 b3       	in	r24, 0x13	; 19
 148:	80 71       	andi	r24, 0x10	; 16
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	9c 01       	movw	r18, r24
 14e:	32 95       	swap	r19
 150:	22 95       	swap	r18
 152:	2f 70       	andi	r18, 0x0F	; 15
 154:	23 27       	eor	r18, r19
 156:	3f 70       	andi	r19, 0x0F	; 15
 158:	23 27       	eor	r18, r19
 15a:	93 b3       	in	r25, 0x13	; 19
 15c:	90 72       	andi	r25, 0x20	; 32
 15e:	89 2f       	mov	r24, r25
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	92 95       	swap	r25
 168:	82 95       	swap	r24
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	89 27       	eor	r24, r25
 16e:	9f 70       	andi	r25, 0x0F	; 15
 170:	89 27       	eor	r24, r25
 172:	82 23       	and	r24, r18
 174:	93 23       	and	r25, r19
 176:	23 b3       	in	r18, 0x13	; 19
 178:	20 74       	andi	r18, 0x40	; 64
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	00 24       	eor	r0, r0
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	00 1c       	adc	r0, r0
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	00 1c       	adc	r0, r0
 18a:	23 2f       	mov	r18, r19
 18c:	30 2d       	mov	r19, r0
 18e:	82 23       	and	r24, r18
 190:	93 23       	and	r25, r19
 192:	23 b3       	in	r18, 0x13	; 19
 194:	22 1f       	adc	r18, r18
 196:	22 27       	eor	r18, r18
 198:	22 1f       	adc	r18, r18
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	82 23       	and	r24, r18
 19e:	93 23       	and	r25, r19
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	81 f1       	breq	.+96     	; 0x204 <u8_cKeypad_Scan+0x136>
		{
			//wait till the input is gone
			while(ALL_LINES != 1);
 1a4:	83 b3       	in	r24, 0x13	; 19
 1a6:	80 71       	andi	r24, 0x10	; 16
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	9c 01       	movw	r18, r24
 1ac:	32 95       	swap	r19
 1ae:	22 95       	swap	r18
 1b0:	2f 70       	andi	r18, 0x0F	; 15
 1b2:	23 27       	eor	r18, r19
 1b4:	3f 70       	andi	r19, 0x0F	; 15
 1b6:	23 27       	eor	r18, r19
 1b8:	93 b3       	in	r25, 0x13	; 19
 1ba:	90 72       	andi	r25, 0x20	; 32
 1bc:	89 2f       	mov	r24, r25
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	96 95       	lsr	r25
 1c2:	87 95       	ror	r24
 1c4:	92 95       	swap	r25
 1c6:	82 95       	swap	r24
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	89 27       	eor	r24, r25
 1cc:	9f 70       	andi	r25, 0x0F	; 15
 1ce:	89 27       	eor	r24, r25
 1d0:	82 23       	and	r24, r18
 1d2:	93 23       	and	r25, r19
 1d4:	23 b3       	in	r18, 0x13	; 19
 1d6:	20 74       	andi	r18, 0x40	; 64
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	00 24       	eor	r0, r0
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	00 1c       	adc	r0, r0
 1e2:	22 0f       	add	r18, r18
 1e4:	33 1f       	adc	r19, r19
 1e6:	00 1c       	adc	r0, r0
 1e8:	23 2f       	mov	r18, r19
 1ea:	30 2d       	mov	r19, r0
 1ec:	82 23       	and	r24, r18
 1ee:	93 23       	and	r25, r19
 1f0:	23 b3       	in	r18, 0x13	; 19
 1f2:	22 1f       	adc	r18, r18
 1f4:	22 27       	eor	r18, r18
 1f6:	22 1f       	adc	r18, r18
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	82 23       	and	r24, r18
 1fc:	93 23       	and	r25, r19
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	89 f6       	brne	.-94     	; 0x1a4 <u8_cKeypad_Scan+0xd6>
 202:	04 c0       	rjmp	.+8      	; 0x20c <u8_cKeypad_Scan+0x13e>
*/
uint8_t u8_cKeypad_Scan(void)
{
	uint8_t row=0,input;
	//loop on row
	for(row=0;row<4;row++)
 204:	4f 5f       	subi	r20, 0xFF	; 255
 206:	44 30       	cpi	r20, 0x04	; 4
 208:	08 f4       	brcc	.+2      	; 0x20c <u8_cKeypad_Scan+0x13e>
 20a:	63 cf       	rjmp	.-314    	; 0xd2 <u8_cKeypad_Scan+0x4>
			//wait till the input is gone
			while(ALL_LINES != 1);
			break;
		}
	}
	if(row == 4)
 20c:	44 30       	cpi	r20, 0x04	; 4
 20e:	09 f4       	brne	.+2      	; 0x212 <u8_cKeypad_Scan+0x144>
 210:	4f c0       	rjmp	.+158    	; 0x2b0 <u8_cKeypad_Scan+0x1e2>
	{
		return 0;
	}
	//switch the rows
	switch(row)
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	c1 f0       	breq	.+48     	; 0x246 <u8_cKeypad_Scan+0x178>
 216:	28 f0       	brcs	.+10     	; 0x222 <u8_cKeypad_Scan+0x154>
 218:	42 30       	cpi	r20, 0x02	; 2
 21a:	31 f1       	breq	.+76     	; 0x268 <u8_cKeypad_Scan+0x19a>
 21c:	43 30       	cpi	r20, 0x03	; 3
 21e:	a9 f1       	breq	.+106    	; 0x28a <u8_cKeypad_Scan+0x1bc>
 220:	49 c0       	rjmp	.+146    	; 0x2b4 <u8_cKeypad_Scan+0x1e6>
	{
		case 0://switch the input
		switch(input)
 222:	50 3b       	cpi	r21, 0xB0	; 176
 224:	09 f4       	brne	.+2      	; 0x228 <u8_cKeypad_Scan+0x15a>
 226:	48 c0       	rjmp	.+144    	; 0x2b8 <u8_cKeypad_Scan+0x1ea>
 228:	18 f4       	brcc	.+6      	; 0x230 <u8_cKeypad_Scan+0x162>
 22a:	50 37       	cpi	r21, 0x70	; 112
 22c:	31 f0       	breq	.+12     	; 0x23a <u8_cKeypad_Scan+0x16c>
 22e:	0b c0       	rjmp	.+22     	; 0x246 <u8_cKeypad_Scan+0x178>
 230:	50 3d       	cpi	r21, 0xD0	; 208
 232:	29 f0       	breq	.+10     	; 0x23e <u8_cKeypad_Scan+0x170>
 234:	50 3e       	cpi	r21, 0xE0	; 224
 236:	29 f0       	breq	.+10     	; 0x242 <u8_cKeypad_Scan+0x174>
 238:	06 c0       	rjmp	.+12     	; 0x246 <u8_cKeypad_Scan+0x178>
		{
			case 0x70: return '/';
 23a:	8f e2       	ldi	r24, 0x2F	; 47
 23c:	08 95       	ret
			case 0xB0: return '9';
			case 0xD0: return '8';
 23e:	88 e3       	ldi	r24, 0x38	; 56
 240:	08 95       	ret
			case 0xE0: return '7';
 242:	87 e3       	ldi	r24, 0x37	; 55
 244:	08 95       	ret
		}
		case 1://switch the input
		switch(input)
 246:	50 3b       	cpi	r21, 0xB0	; 176
 248:	c9 f1       	breq	.+114    	; 0x2bc <u8_cKeypad_Scan+0x1ee>
 24a:	18 f4       	brcc	.+6      	; 0x252 <u8_cKeypad_Scan+0x184>
 24c:	50 37       	cpi	r21, 0x70	; 112
 24e:	31 f0       	breq	.+12     	; 0x25c <u8_cKeypad_Scan+0x18e>
 250:	0b c0       	rjmp	.+22     	; 0x268 <u8_cKeypad_Scan+0x19a>
 252:	50 3d       	cpi	r21, 0xD0	; 208
 254:	29 f0       	breq	.+10     	; 0x260 <u8_cKeypad_Scan+0x192>
 256:	50 3e       	cpi	r21, 0xE0	; 224
 258:	29 f0       	breq	.+10     	; 0x264 <u8_cKeypad_Scan+0x196>
 25a:	06 c0       	rjmp	.+12     	; 0x268 <u8_cKeypad_Scan+0x19a>
		{
			case 0x70: return '*';
 25c:	8a e2       	ldi	r24, 0x2A	; 42
 25e:	08 95       	ret
			case 0xB0: return '6';
			case 0xD0: return '5';
 260:	85 e3       	ldi	r24, 0x35	; 53
 262:	08 95       	ret
			case 0xE0: return '4';
 264:	84 e3       	ldi	r24, 0x34	; 52
 266:	08 95       	ret
		}
		case 2://switch the input
		switch(input)
 268:	50 3b       	cpi	r21, 0xB0	; 176
 26a:	51 f1       	breq	.+84     	; 0x2c0 <u8_cKeypad_Scan+0x1f2>
 26c:	18 f4       	brcc	.+6      	; 0x274 <u8_cKeypad_Scan+0x1a6>
 26e:	50 37       	cpi	r21, 0x70	; 112
 270:	31 f0       	breq	.+12     	; 0x27e <u8_cKeypad_Scan+0x1b0>
 272:	0b c0       	rjmp	.+22     	; 0x28a <u8_cKeypad_Scan+0x1bc>
 274:	50 3d       	cpi	r21, 0xD0	; 208
 276:	29 f0       	breq	.+10     	; 0x282 <u8_cKeypad_Scan+0x1b4>
 278:	50 3e       	cpi	r21, 0xE0	; 224
 27a:	29 f0       	breq	.+10     	; 0x286 <u8_cKeypad_Scan+0x1b8>
 27c:	06 c0       	rjmp	.+12     	; 0x28a <u8_cKeypad_Scan+0x1bc>
		{
			case 0x70: return '-';
 27e:	8d e2       	ldi	r24, 0x2D	; 45
 280:	08 95       	ret
			case 0xB0: return '3';
			case 0xD0: return '2';
 282:	82 e3       	ldi	r24, 0x32	; 50
 284:	08 95       	ret
			case 0xE0: return '1';
 286:	81 e3       	ldi	r24, 0x31	; 49
 288:	08 95       	ret
		}
		case 3://switch the input
		switch(input)
 28a:	50 3b       	cpi	r21, 0xB0	; 176
 28c:	d9 f0       	breq	.+54     	; 0x2c4 <u8_cKeypad_Scan+0x1f6>
 28e:	18 f4       	brcc	.+6      	; 0x296 <u8_cKeypad_Scan+0x1c8>
 290:	50 37       	cpi	r21, 0x70	; 112
 292:	31 f0       	breq	.+12     	; 0x2a0 <u8_cKeypad_Scan+0x1d2>
 294:	07 c0       	rjmp	.+14     	; 0x2a4 <u8_cKeypad_Scan+0x1d6>
 296:	50 3d       	cpi	r21, 0xD0	; 208
 298:	39 f0       	breq	.+14     	; 0x2a8 <u8_cKeypad_Scan+0x1da>
 29a:	50 3e       	cpi	r21, 0xE0	; 224
 29c:	39 f0       	breq	.+14     	; 0x2ac <u8_cKeypad_Scan+0x1de>
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <u8_cKeypad_Scan+0x1d6>
		{
			case 0x70: return '+';
 2a0:	8b e2       	ldi	r24, 0x2B	; 43
 2a2:	08 95       	ret
			case 0xB0: return '=';
			case 0xD0: return '0';
			case 0xE0: return 'C';
		}
	}
	return 0;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	08 95       	ret
		case 3://switch the input
		switch(input)
		{
			case 0x70: return '+';
			case 0xB0: return '=';
			case 0xD0: return '0';
 2a8:	80 e3       	ldi	r24, 0x30	; 48
 2aa:	08 95       	ret
			case 0xE0: return 'C';
 2ac:	83 e4       	ldi	r24, 0x43	; 67
 2ae:	08 95       	ret
			break;
		}
	}
	if(row == 4)
	{
		return 0;
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	08 95       	ret
			case 0xB0: return '=';
			case 0xD0: return '0';
			case 0xE0: return 'C';
		}
	}
	return 0;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret
	{
		case 0://switch the input
		switch(input)
		{
			case 0x70: return '/';
			case 0xB0: return '9';
 2b8:	89 e3       	ldi	r24, 0x39	; 57
 2ba:	08 95       	ret
		}
		case 1://switch the input
		switch(input)
		{
			case 0x70: return '*';
			case 0xB0: return '6';
 2bc:	86 e3       	ldi	r24, 0x36	; 54
 2be:	08 95       	ret
		}
		case 2://switch the input
		switch(input)
		{
			case 0x70: return '-';
			case 0xB0: return '3';
 2c0:	83 e3       	ldi	r24, 0x33	; 51
 2c2:	08 95       	ret
		}
		case 3://switch the input
		switch(input)
		{
			case 0x70: return '+';
			case 0xB0: return '=';
 2c4:	8d e3       	ldi	r24, 0x3D	; 61
			case 0xD0: return '0';
			case 0xE0: return 'C';
		}
	}
	return 0;
 2c6:	08 95       	ret

000002c8 <pinChange>:
		UN_CH_LCD_VAR3 = UN_CH_LCD_VAR2>>4;
		UN_CH_LCD_VAR4 = (0xC0+UN_CH_LCD_COLUMN) & 0x0F;
		Lcd4_Cmd(UN_CH_LCD_VAR3);
		Lcd4_Cmd(UN_CH_LCD_VAR4);
	}
}
 2c8:	67 2b       	or	r22, r23
 2ca:	09 f0       	breq	.+2      	; 0x2ce <pinChange+0x6>
 2cc:	df c0       	rjmp	.+446    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 2ce:	00 97       	sbiw	r24, 0x00	; 0
 2d0:	21 f4       	brne	.+8      	; 0x2da <pinChange+0x12>
 2d2:	8b b3       	in	r24, 0x1b	; 27
 2d4:	8e 7f       	andi	r24, 0xFE	; 254
 2d6:	8b bb       	out	0x1b, r24	; 27
 2d8:	08 95       	ret
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	91 05       	cpc	r25, r1
 2de:	21 f4       	brne	.+8      	; 0x2e8 <pinChange+0x20>
 2e0:	8b b3       	in	r24, 0x1b	; 27
 2e2:	8d 7f       	andi	r24, 0xFD	; 253
 2e4:	8b bb       	out	0x1b, r24	; 27
 2e6:	08 95       	ret
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	91 05       	cpc	r25, r1
 2ec:	21 f4       	brne	.+8      	; 0x2f6 <pinChange+0x2e>
 2ee:	8b b3       	in	r24, 0x1b	; 27
 2f0:	8b 7f       	andi	r24, 0xFB	; 251
 2f2:	8b bb       	out	0x1b, r24	; 27
 2f4:	08 95       	ret
 2f6:	83 30       	cpi	r24, 0x03	; 3
 2f8:	91 05       	cpc	r25, r1
 2fa:	21 f4       	brne	.+8      	; 0x304 <pinChange+0x3c>
 2fc:	8b b3       	in	r24, 0x1b	; 27
 2fe:	87 7f       	andi	r24, 0xF7	; 247
 300:	8b bb       	out	0x1b, r24	; 27
 302:	08 95       	ret
 304:	84 30       	cpi	r24, 0x04	; 4
 306:	91 05       	cpc	r25, r1
 308:	21 f4       	brne	.+8      	; 0x312 <pinChange+0x4a>
 30a:	8b b3       	in	r24, 0x1b	; 27
 30c:	8f 7e       	andi	r24, 0xEF	; 239
 30e:	8b bb       	out	0x1b, r24	; 27
 310:	08 95       	ret
 312:	85 30       	cpi	r24, 0x05	; 5
 314:	91 05       	cpc	r25, r1
 316:	21 f4       	brne	.+8      	; 0x320 <pinChange+0x58>
 318:	8b b3       	in	r24, 0x1b	; 27
 31a:	8f 7d       	andi	r24, 0xDF	; 223
 31c:	8b bb       	out	0x1b, r24	; 27
 31e:	08 95       	ret
 320:	86 30       	cpi	r24, 0x06	; 6
 322:	91 05       	cpc	r25, r1
 324:	21 f4       	brne	.+8      	; 0x32e <pinChange+0x66>
 326:	8b b3       	in	r24, 0x1b	; 27
 328:	8f 7b       	andi	r24, 0xBF	; 191
 32a:	8b bb       	out	0x1b, r24	; 27
 32c:	08 95       	ret
 32e:	87 30       	cpi	r24, 0x07	; 7
 330:	91 05       	cpc	r25, r1
 332:	21 f4       	brne	.+8      	; 0x33c <pinChange+0x74>
 334:	8b b3       	in	r24, 0x1b	; 27
 336:	8f 77       	andi	r24, 0x7F	; 127
 338:	8b bb       	out	0x1b, r24	; 27
 33a:	08 95       	ret
 33c:	8a 30       	cpi	r24, 0x0A	; 10
 33e:	91 05       	cpc	r25, r1
 340:	21 f4       	brne	.+8      	; 0x34a <pinChange+0x82>
 342:	88 b3       	in	r24, 0x18	; 24
 344:	8e 7f       	andi	r24, 0xFE	; 254
 346:	88 bb       	out	0x18, r24	; 24
 348:	08 95       	ret
 34a:	8b 30       	cpi	r24, 0x0B	; 11
 34c:	91 05       	cpc	r25, r1
 34e:	21 f4       	brne	.+8      	; 0x358 <pinChange+0x90>
 350:	88 b3       	in	r24, 0x18	; 24
 352:	8d 7f       	andi	r24, 0xFD	; 253
 354:	88 bb       	out	0x18, r24	; 24
 356:	08 95       	ret
 358:	8c 30       	cpi	r24, 0x0C	; 12
 35a:	91 05       	cpc	r25, r1
 35c:	21 f4       	brne	.+8      	; 0x366 <pinChange+0x9e>
 35e:	88 b3       	in	r24, 0x18	; 24
 360:	8b 7f       	andi	r24, 0xFB	; 251
 362:	88 bb       	out	0x18, r24	; 24
 364:	08 95       	ret
 366:	8d 30       	cpi	r24, 0x0D	; 13
 368:	91 05       	cpc	r25, r1
 36a:	21 f4       	brne	.+8      	; 0x374 <pinChange+0xac>
 36c:	88 b3       	in	r24, 0x18	; 24
 36e:	87 7f       	andi	r24, 0xF7	; 247
 370:	88 bb       	out	0x18, r24	; 24
 372:	08 95       	ret
 374:	8e 30       	cpi	r24, 0x0E	; 14
 376:	91 05       	cpc	r25, r1
 378:	21 f4       	brne	.+8      	; 0x382 <pinChange+0xba>
 37a:	88 b3       	in	r24, 0x18	; 24
 37c:	8f 7e       	andi	r24, 0xEF	; 239
 37e:	88 bb       	out	0x18, r24	; 24
 380:	08 95       	ret
 382:	8f 30       	cpi	r24, 0x0F	; 15
 384:	91 05       	cpc	r25, r1
 386:	21 f4       	brne	.+8      	; 0x390 <pinChange+0xc8>
 388:	88 b3       	in	r24, 0x18	; 24
 38a:	8f 7d       	andi	r24, 0xDF	; 223
 38c:	88 bb       	out	0x18, r24	; 24
 38e:	08 95       	ret
 390:	80 31       	cpi	r24, 0x10	; 16
 392:	91 05       	cpc	r25, r1
 394:	21 f4       	brne	.+8      	; 0x39e <pinChange+0xd6>
 396:	88 b3       	in	r24, 0x18	; 24
 398:	8f 7b       	andi	r24, 0xBF	; 191
 39a:	88 bb       	out	0x18, r24	; 24
 39c:	08 95       	ret
 39e:	81 31       	cpi	r24, 0x11	; 17
 3a0:	91 05       	cpc	r25, r1
 3a2:	21 f4       	brne	.+8      	; 0x3ac <pinChange+0xe4>
 3a4:	88 b3       	in	r24, 0x18	; 24
 3a6:	8f 77       	andi	r24, 0x7F	; 127
 3a8:	88 bb       	out	0x18, r24	; 24
 3aa:	08 95       	ret
 3ac:	84 31       	cpi	r24, 0x14	; 20
 3ae:	91 05       	cpc	r25, r1
 3b0:	21 f4       	brne	.+8      	; 0x3ba <pinChange+0xf2>
 3b2:	85 b3       	in	r24, 0x15	; 21
 3b4:	8e 7f       	andi	r24, 0xFE	; 254
 3b6:	85 bb       	out	0x15, r24	; 21
 3b8:	08 95       	ret
 3ba:	85 31       	cpi	r24, 0x15	; 21
 3bc:	91 05       	cpc	r25, r1
 3be:	21 f4       	brne	.+8      	; 0x3c8 <pinChange+0x100>
 3c0:	85 b3       	in	r24, 0x15	; 21
 3c2:	8d 7f       	andi	r24, 0xFD	; 253
 3c4:	85 bb       	out	0x15, r24	; 21
 3c6:	08 95       	ret
 3c8:	86 31       	cpi	r24, 0x16	; 22
 3ca:	91 05       	cpc	r25, r1
 3cc:	21 f4       	brne	.+8      	; 0x3d6 <pinChange+0x10e>
 3ce:	85 b3       	in	r24, 0x15	; 21
 3d0:	8b 7f       	andi	r24, 0xFB	; 251
 3d2:	85 bb       	out	0x15, r24	; 21
 3d4:	08 95       	ret
 3d6:	87 31       	cpi	r24, 0x17	; 23
 3d8:	91 05       	cpc	r25, r1
 3da:	21 f4       	brne	.+8      	; 0x3e4 <pinChange+0x11c>
 3dc:	85 b3       	in	r24, 0x15	; 21
 3de:	87 7f       	andi	r24, 0xF7	; 247
 3e0:	85 bb       	out	0x15, r24	; 21
 3e2:	08 95       	ret
 3e4:	88 31       	cpi	r24, 0x18	; 24
 3e6:	91 05       	cpc	r25, r1
 3e8:	21 f4       	brne	.+8      	; 0x3f2 <pinChange+0x12a>
 3ea:	85 b3       	in	r24, 0x15	; 21
 3ec:	8f 7e       	andi	r24, 0xEF	; 239
 3ee:	85 bb       	out	0x15, r24	; 21
 3f0:	08 95       	ret
 3f2:	89 31       	cpi	r24, 0x19	; 25
 3f4:	91 05       	cpc	r25, r1
 3f6:	21 f4       	brne	.+8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3f8:	85 b3       	in	r24, 0x15	; 21
 3fa:	8f 7d       	andi	r24, 0xDF	; 223
 3fc:	85 bb       	out	0x15, r24	; 21
 3fe:	08 95       	ret
 400:	8a 31       	cpi	r24, 0x1A	; 26
 402:	91 05       	cpc	r25, r1
 404:	21 f4       	brne	.+8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 406:	85 b3       	in	r24, 0x15	; 21
 408:	8f 7b       	andi	r24, 0xBF	; 191
 40a:	85 bb       	out	0x15, r24	; 21
 40c:	08 95       	ret
 40e:	8b 31       	cpi	r24, 0x1B	; 27
 410:	91 05       	cpc	r25, r1
 412:	21 f4       	brne	.+8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 414:	85 b3       	in	r24, 0x15	; 21
 416:	8f 77       	andi	r24, 0x7F	; 127
 418:	85 bb       	out	0x15, r24	; 21
 41a:	08 95       	ret
 41c:	8e 31       	cpi	r24, 0x1E	; 30
 41e:	91 05       	cpc	r25, r1
 420:	21 f4       	brne	.+8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 422:	82 b3       	in	r24, 0x12	; 18
 424:	8e 7f       	andi	r24, 0xFE	; 254
 426:	82 bb       	out	0x12, r24	; 18
 428:	08 95       	ret
 42a:	8f 31       	cpi	r24, 0x1F	; 31
 42c:	91 05       	cpc	r25, r1
 42e:	21 f4       	brne	.+8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 430:	82 b3       	in	r24, 0x12	; 18
 432:	8d 7f       	andi	r24, 0xFD	; 253
 434:	82 bb       	out	0x12, r24	; 18
 436:	08 95       	ret
 438:	80 32       	cpi	r24, 0x20	; 32
 43a:	91 05       	cpc	r25, r1
 43c:	21 f4       	brne	.+8      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 43e:	82 b3       	in	r24, 0x12	; 18
 440:	8b 7f       	andi	r24, 0xFB	; 251
 442:	82 bb       	out	0x12, r24	; 18
 444:	08 95       	ret
 446:	81 32       	cpi	r24, 0x21	; 33
 448:	91 05       	cpc	r25, r1
 44a:	21 f4       	brne	.+8      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 44c:	82 b3       	in	r24, 0x12	; 18
 44e:	87 7f       	andi	r24, 0xF7	; 247
 450:	82 bb       	out	0x12, r24	; 18
 452:	08 95       	ret
 454:	82 32       	cpi	r24, 0x22	; 34
 456:	91 05       	cpc	r25, r1
 458:	21 f4       	brne	.+8      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 45a:	82 b3       	in	r24, 0x12	; 18
 45c:	8f 7e       	andi	r24, 0xEF	; 239
 45e:	82 bb       	out	0x12, r24	; 18
 460:	08 95       	ret
 462:	83 32       	cpi	r24, 0x23	; 35
 464:	91 05       	cpc	r25, r1
 466:	21 f4       	brne	.+8      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 468:	82 b3       	in	r24, 0x12	; 18
 46a:	8f 7d       	andi	r24, 0xDF	; 223
 46c:	82 bb       	out	0x12, r24	; 18
 46e:	08 95       	ret
 470:	84 32       	cpi	r24, 0x24	; 36
 472:	91 05       	cpc	r25, r1
 474:	21 f4       	brne	.+8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 476:	82 b3       	in	r24, 0x12	; 18
 478:	8f 7b       	andi	r24, 0xBF	; 191
 47a:	82 bb       	out	0x12, r24	; 18
 47c:	08 95       	ret
 47e:	85 97       	sbiw	r24, 0x25	; 37
 480:	09 f0       	breq	.+2      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 482:	e1 c0       	rjmp	.+450    	; 0x646 <__EEPROM_REGION_LENGTH__+0x246>
 484:	82 b3       	in	r24, 0x12	; 18
 486:	8f 77       	andi	r24, 0x7F	; 127
 488:	82 bb       	out	0x12, r24	; 18
 48a:	08 95       	ret
 48c:	00 97       	sbiw	r24, 0x00	; 0
 48e:	21 f4       	brne	.+8      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 490:	8b b3       	in	r24, 0x1b	; 27
 492:	81 60       	ori	r24, 0x01	; 1
 494:	8b bb       	out	0x1b, r24	; 27
 496:	08 95       	ret
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	91 05       	cpc	r25, r1
 49c:	21 f4       	brne	.+8      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 49e:	8b b3       	in	r24, 0x1b	; 27
 4a0:	82 60       	ori	r24, 0x02	; 2
 4a2:	8b bb       	out	0x1b, r24	; 27
 4a4:	08 95       	ret
 4a6:	82 30       	cpi	r24, 0x02	; 2
 4a8:	91 05       	cpc	r25, r1
 4aa:	21 f4       	brne	.+8      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4ac:	8b b3       	in	r24, 0x1b	; 27
 4ae:	84 60       	ori	r24, 0x04	; 4
 4b0:	8b bb       	out	0x1b, r24	; 27
 4b2:	08 95       	ret
 4b4:	83 30       	cpi	r24, 0x03	; 3
 4b6:	91 05       	cpc	r25, r1
 4b8:	21 f4       	brne	.+8      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4ba:	8b b3       	in	r24, 0x1b	; 27
 4bc:	88 60       	ori	r24, 0x08	; 8
 4be:	8b bb       	out	0x1b, r24	; 27
 4c0:	08 95       	ret
 4c2:	84 30       	cpi	r24, 0x04	; 4
 4c4:	91 05       	cpc	r25, r1
 4c6:	21 f4       	brne	.+8      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
 4c8:	8b b3       	in	r24, 0x1b	; 27
 4ca:	80 61       	ori	r24, 0x10	; 16
 4cc:	8b bb       	out	0x1b, r24	; 27
 4ce:	08 95       	ret
 4d0:	85 30       	cpi	r24, 0x05	; 5
 4d2:	91 05       	cpc	r25, r1
 4d4:	21 f4       	brne	.+8      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4d6:	8b b3       	in	r24, 0x1b	; 27
 4d8:	80 62       	ori	r24, 0x20	; 32
 4da:	8b bb       	out	0x1b, r24	; 27
 4dc:	08 95       	ret
 4de:	86 30       	cpi	r24, 0x06	; 6
 4e0:	91 05       	cpc	r25, r1
 4e2:	21 f4       	brne	.+8      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4e4:	8b b3       	in	r24, 0x1b	; 27
 4e6:	80 64       	ori	r24, 0x40	; 64
 4e8:	8b bb       	out	0x1b, r24	; 27
 4ea:	08 95       	ret
 4ec:	87 30       	cpi	r24, 0x07	; 7
 4ee:	91 05       	cpc	r25, r1
 4f0:	21 f4       	brne	.+8      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4f2:	8b b3       	in	r24, 0x1b	; 27
 4f4:	80 68       	ori	r24, 0x80	; 128
 4f6:	8b bb       	out	0x1b, r24	; 27
 4f8:	08 95       	ret
 4fa:	8a 30       	cpi	r24, 0x0A	; 10
 4fc:	91 05       	cpc	r25, r1
 4fe:	21 f4       	brne	.+8      	; 0x508 <__EEPROM_REGION_LENGTH__+0x108>
 500:	88 b3       	in	r24, 0x18	; 24
 502:	81 60       	ori	r24, 0x01	; 1
 504:	88 bb       	out	0x18, r24	; 24
 506:	08 95       	ret
 508:	8b 30       	cpi	r24, 0x0B	; 11
 50a:	91 05       	cpc	r25, r1
 50c:	21 f4       	brne	.+8      	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 50e:	88 b3       	in	r24, 0x18	; 24
 510:	82 60       	ori	r24, 0x02	; 2
 512:	88 bb       	out	0x18, r24	; 24
 514:	08 95       	ret
 516:	8c 30       	cpi	r24, 0x0C	; 12
 518:	91 05       	cpc	r25, r1
 51a:	21 f4       	brne	.+8      	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 51c:	88 b3       	in	r24, 0x18	; 24
 51e:	84 60       	ori	r24, 0x04	; 4
 520:	88 bb       	out	0x18, r24	; 24
 522:	08 95       	ret
 524:	8d 30       	cpi	r24, 0x0D	; 13
 526:	91 05       	cpc	r25, r1
 528:	21 f4       	brne	.+8      	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 52a:	88 b3       	in	r24, 0x18	; 24
 52c:	88 60       	ori	r24, 0x08	; 8
 52e:	88 bb       	out	0x18, r24	; 24
 530:	08 95       	ret
 532:	8e 30       	cpi	r24, 0x0E	; 14
 534:	91 05       	cpc	r25, r1
 536:	21 f4       	brne	.+8      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 538:	88 b3       	in	r24, 0x18	; 24
 53a:	80 61       	ori	r24, 0x10	; 16
 53c:	88 bb       	out	0x18, r24	; 24
 53e:	08 95       	ret
 540:	8f 30       	cpi	r24, 0x0F	; 15
 542:	91 05       	cpc	r25, r1
 544:	21 f4       	brne	.+8      	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
 546:	88 b3       	in	r24, 0x18	; 24
 548:	80 62       	ori	r24, 0x20	; 32
 54a:	88 bb       	out	0x18, r24	; 24
 54c:	08 95       	ret
 54e:	80 31       	cpi	r24, 0x10	; 16
 550:	91 05       	cpc	r25, r1
 552:	21 f4       	brne	.+8      	; 0x55c <__EEPROM_REGION_LENGTH__+0x15c>
 554:	88 b3       	in	r24, 0x18	; 24
 556:	80 64       	ori	r24, 0x40	; 64
 558:	88 bb       	out	0x18, r24	; 24
 55a:	08 95       	ret
 55c:	81 31       	cpi	r24, 0x11	; 17
 55e:	91 05       	cpc	r25, r1
 560:	21 f4       	brne	.+8      	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
 562:	88 b3       	in	r24, 0x18	; 24
 564:	80 68       	ori	r24, 0x80	; 128
 566:	88 bb       	out	0x18, r24	; 24
 568:	08 95       	ret
 56a:	84 31       	cpi	r24, 0x14	; 20
 56c:	91 05       	cpc	r25, r1
 56e:	21 f4       	brne	.+8      	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
 570:	85 b3       	in	r24, 0x15	; 21
 572:	81 60       	ori	r24, 0x01	; 1
 574:	85 bb       	out	0x15, r24	; 21
 576:	08 95       	ret
 578:	85 31       	cpi	r24, 0x15	; 21
 57a:	91 05       	cpc	r25, r1
 57c:	21 f4       	brne	.+8      	; 0x586 <__EEPROM_REGION_LENGTH__+0x186>
 57e:	85 b3       	in	r24, 0x15	; 21
 580:	82 60       	ori	r24, 0x02	; 2
 582:	85 bb       	out	0x15, r24	; 21
 584:	08 95       	ret
 586:	86 31       	cpi	r24, 0x16	; 22
 588:	91 05       	cpc	r25, r1
 58a:	21 f4       	brne	.+8      	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
 58c:	85 b3       	in	r24, 0x15	; 21
 58e:	84 60       	ori	r24, 0x04	; 4
 590:	85 bb       	out	0x15, r24	; 21
 592:	08 95       	ret
 594:	87 31       	cpi	r24, 0x17	; 23
 596:	91 05       	cpc	r25, r1
 598:	21 f4       	brne	.+8      	; 0x5a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 59a:	85 b3       	in	r24, 0x15	; 21
 59c:	88 60       	ori	r24, 0x08	; 8
 59e:	85 bb       	out	0x15, r24	; 21
 5a0:	08 95       	ret
 5a2:	88 31       	cpi	r24, 0x18	; 24
 5a4:	91 05       	cpc	r25, r1
 5a6:	21 f4       	brne	.+8      	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
 5a8:	85 b3       	in	r24, 0x15	; 21
 5aa:	80 61       	ori	r24, 0x10	; 16
 5ac:	85 bb       	out	0x15, r24	; 21
 5ae:	08 95       	ret
 5b0:	89 31       	cpi	r24, 0x19	; 25
 5b2:	91 05       	cpc	r25, r1
 5b4:	21 f4       	brne	.+8      	; 0x5be <__EEPROM_REGION_LENGTH__+0x1be>
 5b6:	85 b3       	in	r24, 0x15	; 21
 5b8:	80 62       	ori	r24, 0x20	; 32
 5ba:	85 bb       	out	0x15, r24	; 21
 5bc:	08 95       	ret
 5be:	8a 31       	cpi	r24, 0x1A	; 26
 5c0:	91 05       	cpc	r25, r1
 5c2:	21 f4       	brne	.+8      	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
 5c4:	85 b3       	in	r24, 0x15	; 21
 5c6:	80 64       	ori	r24, 0x40	; 64
 5c8:	85 bb       	out	0x15, r24	; 21
 5ca:	08 95       	ret
 5cc:	8b 31       	cpi	r24, 0x1B	; 27
 5ce:	91 05       	cpc	r25, r1
 5d0:	21 f4       	brne	.+8      	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
 5d2:	85 b3       	in	r24, 0x15	; 21
 5d4:	80 68       	ori	r24, 0x80	; 128
 5d6:	85 bb       	out	0x15, r24	; 21
 5d8:	08 95       	ret
 5da:	8e 31       	cpi	r24, 0x1E	; 30
 5dc:	91 05       	cpc	r25, r1
 5de:	21 f4       	brne	.+8      	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
 5e0:	82 b3       	in	r24, 0x12	; 18
 5e2:	81 60       	ori	r24, 0x01	; 1
 5e4:	82 bb       	out	0x12, r24	; 18
 5e6:	08 95       	ret
 5e8:	8f 31       	cpi	r24, 0x1F	; 31
 5ea:	91 05       	cpc	r25, r1
 5ec:	21 f4       	brne	.+8      	; 0x5f6 <__EEPROM_REGION_LENGTH__+0x1f6>
 5ee:	82 b3       	in	r24, 0x12	; 18
 5f0:	82 60       	ori	r24, 0x02	; 2
 5f2:	82 bb       	out	0x12, r24	; 18
 5f4:	08 95       	ret
 5f6:	80 32       	cpi	r24, 0x20	; 32
 5f8:	91 05       	cpc	r25, r1
 5fa:	21 f4       	brne	.+8      	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
 5fc:	82 b3       	in	r24, 0x12	; 18
 5fe:	84 60       	ori	r24, 0x04	; 4
 600:	82 bb       	out	0x12, r24	; 18
 602:	08 95       	ret
 604:	81 32       	cpi	r24, 0x21	; 33
 606:	91 05       	cpc	r25, r1
 608:	21 f4       	brne	.+8      	; 0x612 <__EEPROM_REGION_LENGTH__+0x212>
 60a:	82 b3       	in	r24, 0x12	; 18
 60c:	88 60       	ori	r24, 0x08	; 8
 60e:	82 bb       	out	0x12, r24	; 18
 610:	08 95       	ret
 612:	82 32       	cpi	r24, 0x22	; 34
 614:	91 05       	cpc	r25, r1
 616:	21 f4       	brne	.+8      	; 0x620 <__EEPROM_REGION_LENGTH__+0x220>
 618:	82 b3       	in	r24, 0x12	; 18
 61a:	80 61       	ori	r24, 0x10	; 16
 61c:	82 bb       	out	0x12, r24	; 18
 61e:	08 95       	ret
 620:	83 32       	cpi	r24, 0x23	; 35
 622:	91 05       	cpc	r25, r1
 624:	21 f4       	brne	.+8      	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
 626:	82 b3       	in	r24, 0x12	; 18
 628:	80 62       	ori	r24, 0x20	; 32
 62a:	82 bb       	out	0x12, r24	; 18
 62c:	08 95       	ret
 62e:	84 32       	cpi	r24, 0x24	; 36
 630:	91 05       	cpc	r25, r1
 632:	21 f4       	brne	.+8      	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
 634:	82 b3       	in	r24, 0x12	; 18
 636:	80 64       	ori	r24, 0x40	; 64
 638:	82 bb       	out	0x12, r24	; 18
 63a:	08 95       	ret
 63c:	85 97       	sbiw	r24, 0x25	; 37
 63e:	19 f4       	brne	.+6      	; 0x646 <__EEPROM_REGION_LENGTH__+0x246>
 640:	82 b3       	in	r24, 0x12	; 18
 642:	80 68       	ori	r24, 0x80	; 128
 644:	82 bb       	out	0x12, r24	; 18
 646:	08 95       	ret

00000648 <Lcd4_Port>:
 648:	cf 93       	push	r28
 64a:	c8 2f       	mov	r28, r24
 64c:	80 ff       	sbrs	r24, 0
 64e:	07 c0       	rjmp	.+14     	; 0x65e <Lcd4_Port+0x16>
 650:	61 e0       	ldi	r22, 0x01	; 1
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	80 e0       	ldi	r24, 0x00	; 0
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinChange>
 65c:	06 c0       	rjmp	.+12     	; 0x66a <Lcd4_Port+0x22>
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	70 e0       	ldi	r23, 0x00	; 0
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinChange>
 66a:	c1 ff       	sbrs	r28, 1
 66c:	07 c0       	rjmp	.+14     	; 0x67c <Lcd4_Port+0x34>
 66e:	61 e0       	ldi	r22, 0x01	; 1
 670:	70 e0       	ldi	r23, 0x00	; 0
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinChange>
 67a:	06 c0       	rjmp	.+12     	; 0x688 <Lcd4_Port+0x40>
 67c:	60 e0       	ldi	r22, 0x00	; 0
 67e:	70 e0       	ldi	r23, 0x00	; 0
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinChange>
 688:	c2 ff       	sbrs	r28, 2
 68a:	07 c0       	rjmp	.+14     	; 0x69a <Lcd4_Port+0x52>
 68c:	61 e0       	ldi	r22, 0x01	; 1
 68e:	70 e0       	ldi	r23, 0x00	; 0
 690:	82 e0       	ldi	r24, 0x02	; 2
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinChange>
 698:	06 c0       	rjmp	.+12     	; 0x6a6 <Lcd4_Port+0x5e>
 69a:	60 e0       	ldi	r22, 0x00	; 0
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	82 e0       	ldi	r24, 0x02	; 2
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinChange>
 6a6:	c3 ff       	sbrs	r28, 3
 6a8:	07 c0       	rjmp	.+14     	; 0x6b8 <Lcd4_Port+0x70>
 6aa:	61 e0       	ldi	r22, 0x01	; 1
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	83 e0       	ldi	r24, 0x03	; 3
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinChange>
 6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <Lcd4_Port+0x7c>
 6b8:	60 e0       	ldi	r22, 0x00	; 0
 6ba:	70 e0       	ldi	r23, 0x00	; 0
 6bc:	83 e0       	ldi	r24, 0x03	; 3
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinChange>
 6c4:	cf 91       	pop	r28
 6c6:	08 95       	ret

000006c8 <Lcd4_Cmd>:
 6c8:	cf 93       	push	r28
 6ca:	c8 2f       	mov	r28, r24
 6cc:	60 e0       	ldi	r22, 0x00	; 0
 6ce:	70 e0       	ldi	r23, 0x00	; 0
 6d0:	84 e0       	ldi	r24, 0x04	; 4
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinChange>
 6d8:	8c 2f       	mov	r24, r28
 6da:	0e 94 24 03 	call	0x648	; 0x648 <Lcd4_Port>
 6de:	61 e0       	ldi	r22, 0x01	; 1
 6e0:	70 e0       	ldi	r23, 0x00	; 0
 6e2:	86 e0       	ldi	r24, 0x06	; 6
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinChange>
 6ea:	8f ec       	ldi	r24, 0xCF	; 207
 6ec:	97 e0       	ldi	r25, 0x07	; 7
 6ee:	01 97       	sbiw	r24, 0x01	; 1
 6f0:	f1 f7       	brne	.-4      	; 0x6ee <Lcd4_Cmd+0x26>
 6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <Lcd4_Cmd+0x2c>
 6f4:	00 00       	nop
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	86 e0       	ldi	r24, 0x06	; 6
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinChange>
 702:	8f ec       	ldi	r24, 0xCF	; 207
 704:	97 e0       	ldi	r25, 0x07	; 7
 706:	01 97       	sbiw	r24, 0x01	; 1
 708:	f1 f7       	brne	.-4      	; 0x706 <Lcd4_Cmd+0x3e>
 70a:	00 c0       	rjmp	.+0      	; 0x70c <Lcd4_Cmd+0x44>
 70c:	00 00       	nop
 70e:	cf 91       	pop	r28
 710:	08 95       	ret

00000712 <Lcd4_Clear>:
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Lcd4_Cmd>
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Lcd4_Cmd>
 71e:	08 95       	ret

00000720 <Lcd4_Init>:
*purpose       : initialization of LCD
*
*/
void Lcd4_Init()
{
	Lcd4_Port(0x00);
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	0e 94 24 03 	call	0x648	; 0x648 <Lcd4_Port>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 726:	8f e3       	ldi	r24, 0x3F	; 63
 728:	9c e9       	ldi	r25, 0x9C	; 156
 72a:	01 97       	sbiw	r24, 0x01	; 1
 72c:	f1 f7       	brne	.-4      	; 0x72a <Lcd4_Init+0xa>
 72e:	00 c0       	rjmp	.+0      	; 0x730 <Lcd4_Init+0x10>
 730:	00 00       	nop
	_delay_ms(20);
	Lcd4_Cmd(0x03);
 732:	83 e0       	ldi	r24, 0x03	; 3
 734:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Lcd4_Cmd>
 738:	8f e0       	ldi	r24, 0x0F	; 15
 73a:	97 e2       	ldi	r25, 0x27	; 39
 73c:	01 97       	sbiw	r24, 0x01	; 1
 73e:	f1 f7       	brne	.-4      	; 0x73c <Lcd4_Init+0x1c>
 740:	00 c0       	rjmp	.+0      	; 0x742 <Lcd4_Init+0x22>
 742:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
 744:	83 e0       	ldi	r24, 0x03	; 3
 746:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Lcd4_Cmd>
 74a:	8f ee       	ldi	r24, 0xEF	; 239
 74c:	95 e5       	ldi	r25, 0x55	; 85
 74e:	01 97       	sbiw	r24, 0x01	; 1
 750:	f1 f7       	brne	.-4      	; 0x74e <Lcd4_Init+0x2e>
 752:	00 c0       	rjmp	.+0      	; 0x754 <Lcd4_Init+0x34>
 754:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
 756:	83 e0       	ldi	r24, 0x03	; 3
 758:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 75c:	82 e0       	ldi	r24, 0x02	; 2
 75e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 762:	82 e0       	ldi	r24, 0x02	; 2
 764:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 768:	88 e0       	ldi	r24, 0x08	; 8
 76a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 774:	8c e0       	ldi	r24, 0x0C	; 12
 776:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
 780:	86 e0       	ldi	r24, 0x06	; 6
 782:	0e 94 64 03 	call	0x6c8	; 0x6c8 <Lcd4_Cmd>
 786:	08 95       	ret

00000788 <Lcd4_Write_Char>:
*return		   : void
*purpose       : WRITING CAHR ON LCD
*
*/
void Lcd4_Write_Char(unsigned char UN_CH_LCD_CHAR)
{
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
	unsigned char UN_CH_LCD_VAR5 = 0 , UN_CH_LCD_VAR6 = 0 ;
	UN_CH_LCD_VAR5 = UN_CH_LCD_CHAR & 0x0F;
 78c:	d8 2f       	mov	r29, r24
 78e:	df 70       	andi	r29, 0x0F	; 15
	UN_CH_LCD_VAR6 = UN_CH_LCD_CHAR & 0xF0;
 790:	c8 2f       	mov	r28, r24
 792:	c0 7f       	andi	r28, 0xF0	; 240
	pinChange(RS,1);             // => RS = 1
 794:	61 e0       	ldi	r22, 0x01	; 1
 796:	70 e0       	ldi	r23, 0x00	; 0
 798:	84 e0       	ldi	r24, 0x04	; 4
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinChange>
	Lcd4_Port(UN_CH_LCD_VAR6>>4);             //Data transfer
 7a0:	8c 2f       	mov	r24, r28
 7a2:	82 95       	swap	r24
 7a4:	8f 70       	andi	r24, 0x0F	; 15
 7a6:	0e 94 24 03 	call	0x648	; 0x648 <Lcd4_Port>
	pinChange(EN,1);
 7aa:	61 e0       	ldi	r22, 0x01	; 1
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	86 e0       	ldi	r24, 0x06	; 6
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinChange>
 7b6:	8f ec       	ldi	r24, 0xCF	; 207
 7b8:	97 e0       	ldi	r25, 0x07	; 7
 7ba:	01 97       	sbiw	r24, 0x01	; 1
 7bc:	f1 f7       	brne	.-4      	; 0x7ba <Lcd4_Write_Char+0x32>
 7be:	00 c0       	rjmp	.+0      	; 0x7c0 <Lcd4_Write_Char+0x38>
 7c0:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	70 e0       	ldi	r23, 0x00	; 0
 7c6:	86 e0       	ldi	r24, 0x06	; 6
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinChange>
 7ce:	8f ec       	ldi	r24, 0xCF	; 207
 7d0:	97 e0       	ldi	r25, 0x07	; 7
 7d2:	01 97       	sbiw	r24, 0x01	; 1
 7d4:	f1 f7       	brne	.-4      	; 0x7d2 <Lcd4_Write_Char+0x4a>
 7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <Lcd4_Write_Char+0x50>
 7d8:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(UN_CH_LCD_VAR5);
 7da:	8d 2f       	mov	r24, r29
 7dc:	0e 94 24 03 	call	0x648	; 0x648 <Lcd4_Port>
	pinChange(EN,1);
 7e0:	61 e0       	ldi	r22, 0x01	; 1
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	86 e0       	ldi	r24, 0x06	; 6
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinChange>
 7ec:	8f ec       	ldi	r24, 0xCF	; 207
 7ee:	97 e0       	ldi	r25, 0x07	; 7
 7f0:	01 97       	sbiw	r24, 0x01	; 1
 7f2:	f1 f7       	brne	.-4      	; 0x7f0 <Lcd4_Write_Char+0x68>
 7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <Lcd4_Write_Char+0x6e>
 7f6:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 7f8:	60 e0       	ldi	r22, 0x00	; 0
 7fa:	70 e0       	ldi	r23, 0x00	; 0
 7fc:	86 e0       	ldi	r24, 0x06	; 6
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	0e 94 64 01 	call	0x2c8	; 0x2c8 <pinChange>
 804:	8f ec       	ldi	r24, 0xCF	; 207
 806:	97 e0       	ldi	r25, 0x07	; 7
 808:	01 97       	sbiw	r24, 0x01	; 1
 80a:	f1 f7       	brne	.-4      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 80c:	00 c0       	rjmp	.+0      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80e:	00 00       	nop
	_delay_ms(1);
}
 810:	df 91       	pop	r29
 812:	cf 91       	pop	r28
 814:	08 95       	ret

00000816 <main>:
#include "lcd4.h"
#include "keypad.h"

int main(void)
{
	DDRA = 0xff;
 816:	8f ef       	ldi	r24, 0xFF	; 255
 818:	8a bb       	out	0x1a, r24	; 26
	Lcd4_Init();
 81a:	0e 94 90 03 	call	0x720	; 0x720 <Lcd4_Init>
	v_Keypad_Init();
 81e:	0e 94 36 00 	call	0x6c	; 0x6c <v_Keypad_Init>
	int a = 0;
    /* Replace with your application code */
    while (1) 
    {
		a = u8_cKeypad_Scan();
 822:	0e 94 67 00 	call	0xce	; 0xce <u8_cKeypad_Scan>
 826:	28 2f       	mov	r18, r24
 828:	30 e0       	ldi	r19, 0x00	; 0
		if(a!=0)
 82a:	21 15       	cp	r18, r1
 82c:	31 05       	cpc	r19, r1
 82e:	c9 f3       	breq	.-14     	; 0x822 <main+0xc>
		{
			if(a=='C')
 830:	23 34       	cpi	r18, 0x43	; 67
 832:	31 05       	cpc	r19, r1
 834:	19 f4       	brne	.+6      	; 0x83c <main+0x26>
			{
				Lcd4_Clear();
 836:	0e 94 89 03 	call	0x712	; 0x712 <Lcd4_Clear>
 83a:	f3 cf       	rjmp	.-26     	; 0x822 <main+0xc>
			}
			else{
				Lcd4_Write_Char(a);
 83c:	0e 94 c4 03 	call	0x788	; 0x788 <Lcd4_Write_Char>
 840:	f0 cf       	rjmp	.-32     	; 0x822 <main+0xc>

00000842 <_exit>:
 842:	f8 94       	cli

00000844 <__stop_program>:
 844:	ff cf       	rjmp	.-2      	; 0x844 <__stop_program>
