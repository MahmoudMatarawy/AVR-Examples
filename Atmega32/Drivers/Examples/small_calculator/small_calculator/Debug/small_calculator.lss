
small_calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001530  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00001584  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000183c  00000000  00000000  00001718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000958  00000000  00000000  00002f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fbc  00000000  00000000  000038ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003cc  00000000  00000000  00004868  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000533  00000000  00000000  00004c34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ce2  00000000  00000000  00005167  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00006e49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61
      60:	0e 94 0d 08 	call	0x101a	; 0x101a <main>
      64:	0c 94 96 0a 	jmp	0x152c	; 0x152c <_exit>

00000068 <__bad_interrupt>:
      68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <pir>:
#include "keypad.h"
#include "lcd4.h"
#define high 1
#define low 0
void pir(unsigned char *opp,unsigned int *pr)
{
      6c:	cf 93       	push	r28
      6e:	df 93       	push	r29
      70:	dc 01       	movw	r26, r24
	for(int i = 0 ; opp[i]!='=' ; i++)
      72:	20 e0       	ldi	r18, 0x00	; 0
      74:	30 e0       	ldi	r19, 0x00	; 0
      76:	2d c0       	rjmp	.+90     	; 0xd2 <pir+0x66>
	{
		if(opp[i]=='+')
      78:	9b 32       	cpi	r25, 0x2B	; 43
      7a:	39 f4       	brne	.+14     	; 0x8a <pir+0x1e>
		{
			pr[i] = low;
      7c:	ea 01       	movw	r28, r20
      7e:	cc 0f       	add	r28, r28
      80:	dd 1f       	adc	r29, r29
      82:	c6 0f       	add	r28, r22
      84:	d7 1f       	adc	r29, r23
      86:	19 82       	std	Y+1, r1	; 0x01
      88:	18 82       	st	Y, r1
		}
		if(opp[i]=='-')
      8a:	90 81       	ld	r25, Z
      8c:	9d 32       	cpi	r25, 0x2D	; 45
      8e:	39 f4       	brne	.+14     	; 0x9e <pir+0x32>
		{
			pr[i] = low;
      90:	ea 01       	movw	r28, r20
      92:	cc 0f       	add	r28, r28
      94:	dd 1f       	adc	r29, r29
      96:	c6 0f       	add	r28, r22
      98:	d7 1f       	adc	r29, r23
      9a:	19 82       	std	Y+1, r1	; 0x01
      9c:	18 82       	st	Y, r1
		}
		if(opp[i]=='*')
      9e:	90 81       	ld	r25, Z
      a0:	9a 32       	cpi	r25, 0x2A	; 42
      a2:	49 f4       	brne	.+18     	; 0xb6 <pir+0x4a>
		{
			pr[i] = high;
      a4:	ea 01       	movw	r28, r20
      a6:	cc 0f       	add	r28, r28
      a8:	dd 1f       	adc	r29, r29
      aa:	c6 0f       	add	r28, r22
      ac:	d7 1f       	adc	r29, r23
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	99 83       	std	Y+1, r25	; 0x01
      b4:	88 83       	st	Y, r24
		}
		if(opp[i]=='/')
      b6:	90 81       	ld	r25, Z
      b8:	9f 32       	cpi	r25, 0x2F	; 47
      ba:	49 f4       	brne	.+18     	; 0xce <pir+0x62>
		{
			pr[i] = high;
      bc:	44 0f       	add	r20, r20
      be:	55 1f       	adc	r21, r21
      c0:	fb 01       	movw	r30, r22
      c2:	e4 0f       	add	r30, r20
      c4:	f5 1f       	adc	r31, r21
      c6:	81 e0       	ldi	r24, 0x01	; 1
      c8:	90 e0       	ldi	r25, 0x00	; 0
      ca:	91 83       	std	Z+1, r25	; 0x01
      cc:	80 83       	st	Z, r24
#include "lcd4.h"
#define high 1
#define low 0
void pir(unsigned char *opp,unsigned int *pr)
{
	for(int i = 0 ; opp[i]!='=' ; i++)
      ce:	2f 5f       	subi	r18, 0xFF	; 255
      d0:	3f 4f       	sbci	r19, 0xFF	; 255
      d2:	a9 01       	movw	r20, r18
      d4:	fd 01       	movw	r30, r26
      d6:	e2 0f       	add	r30, r18
      d8:	f3 1f       	adc	r31, r19
      da:	90 81       	ld	r25, Z
      dc:	9d 33       	cpi	r25, 0x3D	; 61
      de:	61 f6       	brne	.-104    	; 0x78 <pir+0xc>
		if(opp[i]=='/')
		{
			pr[i] = high;
		}
	}
}
      e0:	df 91       	pop	r29
      e2:	cf 91       	pop	r28
      e4:	08 95       	ret

000000e6 <rearr>:
void rearr(unsigned int c, float *n,unsigned char *op,unsigned int pr[])
{
      e6:	cf 92       	push	r12
      e8:	df 92       	push	r13
      ea:	ef 92       	push	r14
      ec:	ff 92       	push	r15
      ee:	0f 93       	push	r16
      f0:	1f 93       	push	r17
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	8b 01       	movw	r16, r22
      f8:	6a 01       	movw	r12, r20
      fa:	79 01       	movw	r14, r18
	for(int i = c ; n[i] != '\0' ; i++ )
      fc:	ec 01       	movw	r28, r24
      fe:	38 c0       	rjmp	.+112    	; 0x170 <rearr+0x8a>
	{
		n[i+1]=n[i+2];
     100:	ce 01       	movw	r24, r28
     102:	01 96       	adiw	r24, 0x01	; 1
     104:	dc 01       	movw	r26, r24
     106:	aa 0f       	add	r26, r26
     108:	bb 1f       	adc	r27, r27
     10a:	aa 0f       	add	r26, r26
     10c:	bb 1f       	adc	r27, r27
     10e:	a0 0f       	add	r26, r16
     110:	b1 1f       	adc	r27, r17
     112:	fe 01       	movw	r30, r28
     114:	32 96       	adiw	r30, 0x02	; 2
     116:	ee 0f       	add	r30, r30
     118:	ff 1f       	adc	r31, r31
     11a:	ee 0f       	add	r30, r30
     11c:	ff 1f       	adc	r31, r31
     11e:	e0 0f       	add	r30, r16
     120:	f1 1f       	adc	r31, r17
     122:	40 81       	ld	r20, Z
     124:	51 81       	ldd	r21, Z+1	; 0x01
     126:	62 81       	ldd	r22, Z+2	; 0x02
     128:	73 81       	ldd	r23, Z+3	; 0x03
     12a:	4d 93       	st	X+, r20
     12c:	5d 93       	st	X+, r21
     12e:	6d 93       	st	X+, r22
     130:	7c 93       	st	X, r23
     132:	13 97       	sbiw	r26, 0x03	; 3
		n[i+2]='\0';
     134:	10 82       	st	Z, r1
     136:	11 82       	std	Z+1, r1	; 0x01
     138:	12 82       	std	Z+2, r1	; 0x02
     13a:	13 82       	std	Z+3, r1	; 0x03
		op[i]=op[i+1];
     13c:	d6 01       	movw	r26, r12
     13e:	ac 0f       	add	r26, r28
     140:	bd 1f       	adc	r27, r29
     142:	f6 01       	movw	r30, r12
     144:	e8 0f       	add	r30, r24
     146:	f9 1f       	adc	r31, r25
     148:	20 81       	ld	r18, Z
     14a:	2c 93       	st	X, r18
		op[i+1]='\0';
     14c:	10 82       	st	Z, r1
		pr[i]=pr[i+1];
     14e:	de 01       	movw	r26, r28
     150:	aa 0f       	add	r26, r26
     152:	bb 1f       	adc	r27, r27
     154:	ae 0d       	add	r26, r14
     156:	bf 1d       	adc	r27, r15
     158:	88 0f       	add	r24, r24
     15a:	99 1f       	adc	r25, r25
     15c:	f7 01       	movw	r30, r14
     15e:	e8 0f       	add	r30, r24
     160:	f9 1f       	adc	r31, r25
     162:	80 81       	ld	r24, Z
     164:	91 81       	ldd	r25, Z+1	; 0x01
     166:	8d 93       	st	X+, r24
     168:	9c 93       	st	X, r25
		pr[i+1]='\0';
     16a:	11 82       	std	Z+1, r1	; 0x01
     16c:	10 82       	st	Z, r1
		}
	}
}
void rearr(unsigned int c, float *n,unsigned char *op,unsigned int pr[])
{
	for(int i = c ; n[i] != '\0' ; i++ )
     16e:	21 96       	adiw	r28, 0x01	; 1
     170:	fe 01       	movw	r30, r28
     172:	ee 0f       	add	r30, r30
     174:	ff 1f       	adc	r31, r31
     176:	ee 0f       	add	r30, r30
     178:	ff 1f       	adc	r31, r31
     17a:	e0 0f       	add	r30, r16
     17c:	f1 1f       	adc	r31, r17
     17e:	60 81       	ld	r22, Z
     180:	71 81       	ldd	r23, Z+1	; 0x01
     182:	82 81       	ldd	r24, Z+2	; 0x02
     184:	93 81       	ldd	r25, Z+3	; 0x03
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	a9 01       	movw	r20, r18
     18c:	0e 94 bb 08 	call	0x1176	; 0x1176 <__cmpsf2>
     190:	81 11       	cpse	r24, r1
     192:	b6 cf       	rjmp	.-148    	; 0x100 <rearr+0x1a>
		op[i]=op[i+1];
		op[i+1]='\0';
		pr[i]=pr[i+1];
		pr[i+1]='\0';
	}
}
     194:	df 91       	pop	r29
     196:	cf 91       	pop	r28
     198:	1f 91       	pop	r17
     19a:	0f 91       	pop	r16
     19c:	ff 90       	pop	r15
     19e:	ef 90       	pop	r14
     1a0:	df 90       	pop	r13
     1a2:	cf 90       	pop	r12
     1a4:	08 95       	ret

000001a6 <calc_ml_d>:

int calc_ml_d( float *n , unsigned char *op,unsigned int *pr)
{
     1a6:	8f 92       	push	r8
     1a8:	9f 92       	push	r9
     1aa:	af 92       	push	r10
     1ac:	bf 92       	push	r11
     1ae:	cf 92       	push	r12
     1b0:	df 92       	push	r13
     1b2:	ef 92       	push	r14
     1b4:	ff 92       	push	r15
     1b6:	0f 93       	push	r16
     1b8:	1f 93       	push	r17
     1ba:	cf 93       	push	r28
     1bc:	df 93       	push	r29
     1be:	9c 01       	movw	r18, r24
	if(op[0] == '=')
     1c0:	fb 01       	movw	r30, r22
     1c2:	80 81       	ld	r24, Z
     1c4:	8d 33       	cpi	r24, 0x3D	; 61
     1c6:	09 f4       	brne	.+2      	; 0x1ca <calc_ml_d+0x24>
     1c8:	6a c0       	rjmp	.+212    	; 0x29e <calc_ml_d+0xf8>
     1ca:	e0 e0       	ldi	r30, 0x00	; 0
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	5c c0       	rjmp	.+184    	; 0x288 <calc_ml_d+0xe2>
	{
		return 0;
	}
	for(int i = 0 ; op[i] != '=' ; i++)
	{
		if(pr[i]==high)
     1d0:	df 01       	movw	r26, r30
     1d2:	aa 0f       	add	r26, r26
     1d4:	bb 1f       	adc	r27, r27
     1d6:	a4 0f       	add	r26, r20
     1d8:	b5 1f       	adc	r27, r21
     1da:	0d 90       	ld	r0, X+
     1dc:	bc 91       	ld	r27, X
     1de:	a0 2d       	mov	r26, r0
     1e0:	11 97       	sbiw	r26, 0x01	; 1
     1e2:	09 f0       	breq	.+2      	; 0x1e6 <calc_ml_d+0x40>
     1e4:	50 c0       	rjmp	.+160    	; 0x286 <calc_ml_d+0xe0>
     1e6:	7a 01       	movw	r14, r20
     1e8:	6b 01       	movw	r12, r22
     1ea:	59 01       	movw	r10, r18
		{
			if(op[i]=='*')
     1ec:	9a 32       	cpi	r25, 0x2A	; 42
     1ee:	f9 f4       	brne	.+62     	; 0x22e <calc_ml_d+0x88>
			{
				n[i] *= n[i+1];
     1f0:	48 01       	movw	r8, r16
     1f2:	88 0c       	add	r8, r8
     1f4:	99 1c       	adc	r9, r9
     1f6:	88 0c       	add	r8, r8
     1f8:	99 1c       	adc	r9, r9
     1fa:	82 0e       	add	r8, r18
     1fc:	93 1e       	adc	r9, r19
     1fe:	f8 01       	movw	r30, r16
     200:	31 96       	adiw	r30, 0x01	; 1
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	ee 0f       	add	r30, r30
     208:	ff 1f       	adc	r31, r31
     20a:	e2 0f       	add	r30, r18
     20c:	f3 1f       	adc	r31, r19
     20e:	20 81       	ld	r18, Z
     210:	31 81       	ldd	r19, Z+1	; 0x01
     212:	42 81       	ldd	r20, Z+2	; 0x02
     214:	53 81       	ldd	r21, Z+3	; 0x03
     216:	f4 01       	movw	r30, r8
     218:	60 81       	ld	r22, Z
     21a:	71 81       	ldd	r23, Z+1	; 0x01
     21c:	82 81       	ldd	r24, Z+2	; 0x02
     21e:	93 81       	ldd	r25, Z+3	; 0x03
     220:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__mulsf3>
     224:	f4 01       	movw	r30, r8
     226:	60 83       	st	Z, r22
     228:	71 83       	std	Z+1, r23	; 0x01
     22a:	82 83       	std	Z+2, r24	; 0x02
     22c:	93 83       	std	Z+3, r25	; 0x03
			}
			if(op[i]=='/')
     22e:	88 81       	ld	r24, Y
     230:	8f 32       	cpi	r24, 0x2F	; 47
     232:	e9 f4       	brne	.+58     	; 0x26e <calc_ml_d+0xc8>
			{
				n[i] /= n[i+1];
     234:	e8 01       	movw	r28, r16
     236:	cc 0f       	add	r28, r28
     238:	dd 1f       	adc	r29, r29
     23a:	cc 0f       	add	r28, r28
     23c:	dd 1f       	adc	r29, r29
     23e:	ca 0d       	add	r28, r10
     240:	db 1d       	adc	r29, r11
     242:	f8 01       	movw	r30, r16
     244:	31 96       	adiw	r30, 0x01	; 1
     246:	ee 0f       	add	r30, r30
     248:	ff 1f       	adc	r31, r31
     24a:	ee 0f       	add	r30, r30
     24c:	ff 1f       	adc	r31, r31
     24e:	ea 0d       	add	r30, r10
     250:	fb 1d       	adc	r31, r11
     252:	20 81       	ld	r18, Z
     254:	31 81       	ldd	r19, Z+1	; 0x01
     256:	42 81       	ldd	r20, Z+2	; 0x02
     258:	53 81       	ldd	r21, Z+3	; 0x03
     25a:	68 81       	ld	r22, Y
     25c:	79 81       	ldd	r23, Y+1	; 0x01
     25e:	8a 81       	ldd	r24, Y+2	; 0x02
     260:	9b 81       	ldd	r25, Y+3	; 0x03
     262:	0e 94 c0 08 	call	0x1180	; 0x1180 <__divsf3>
     266:	68 83       	st	Y, r22
     268:	79 83       	std	Y+1, r23	; 0x01
     26a:	8a 83       	std	Y+2, r24	; 0x02
     26c:	9b 83       	std	Y+3, r25	; 0x03
			}
			rearr(i,n,op,pr);
     26e:	97 01       	movw	r18, r14
     270:	a6 01       	movw	r20, r12
     272:	b5 01       	movw	r22, r10
     274:	c8 01       	movw	r24, r16
     276:	0e 94 73 00 	call	0xe6	; 0xe6 <rearr>
			return calc_ml_d(n,op,pr);
     27a:	a7 01       	movw	r20, r14
     27c:	b6 01       	movw	r22, r12
     27e:	c5 01       	movw	r24, r10
     280:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <calc_ml_d>
     284:	0e c0       	rjmp	.+28     	; 0x2a2 <calc_ml_d+0xfc>
{
	if(op[0] == '=')
	{
		return 0;
	}
	for(int i = 0 ; op[i] != '=' ; i++)
     286:	31 96       	adiw	r30, 0x01	; 1
     288:	8f 01       	movw	r16, r30
     28a:	eb 01       	movw	r28, r22
     28c:	ce 0f       	add	r28, r30
     28e:	df 1f       	adc	r29, r31
     290:	98 81       	ld	r25, Y
     292:	9d 33       	cpi	r25, 0x3D	; 61
     294:	09 f0       	breq	.+2      	; 0x298 <calc_ml_d+0xf2>
     296:	9c cf       	rjmp	.-200    	; 0x1d0 <calc_ml_d+0x2a>
			}
			rearr(i,n,op,pr);
			return calc_ml_d(n,op,pr);
		}
	}
	return 0;
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <calc_ml_d+0xfc>

int calc_ml_d( float *n , unsigned char *op,unsigned int *pr)
{
	if(op[0] == '=')
	{
		return 0;
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	90 e0       	ldi	r25, 0x00	; 0
			rearr(i,n,op,pr);
			return calc_ml_d(n,op,pr);
		}
	}
	return 0;
}
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	0f 91       	pop	r16
     2aa:	ff 90       	pop	r15
     2ac:	ef 90       	pop	r14
     2ae:	df 90       	pop	r13
     2b0:	cf 90       	pop	r12
     2b2:	bf 90       	pop	r11
     2b4:	af 90       	pop	r10
     2b6:	9f 90       	pop	r9
     2b8:	8f 90       	pop	r8
     2ba:	08 95       	ret

000002bc <calc_p_mi>:
int calc_p_mi( float *n , unsigned char *op,unsigned int *pr)
{
     2bc:	8f 92       	push	r8
     2be:	9f 92       	push	r9
     2c0:	af 92       	push	r10
     2c2:	bf 92       	push	r11
     2c4:	cf 92       	push	r12
     2c6:	df 92       	push	r13
     2c8:	ef 92       	push	r14
     2ca:	ff 92       	push	r15
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	9c 01       	movw	r18, r24
	if(op[0] == '=')
     2d6:	fb 01       	movw	r30, r22
     2d8:	80 81       	ld	r24, Z
     2da:	8d 33       	cpi	r24, 0x3D	; 61
     2dc:	09 f4       	brne	.+2      	; 0x2e0 <calc_p_mi+0x24>
     2de:	6a c0       	rjmp	.+212    	; 0x3b4 <calc_p_mi+0xf8>
     2e0:	e0 e0       	ldi	r30, 0x00	; 0
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	5c c0       	rjmp	.+184    	; 0x39e <calc_p_mi+0xe2>
	{
		return 0;
	}
	for(int i = 0 ; op[i] != '=' ; i++)
	{
		if(pr[i]==low)
     2e6:	df 01       	movw	r26, r30
     2e8:	aa 0f       	add	r26, r26
     2ea:	bb 1f       	adc	r27, r27
     2ec:	a4 0f       	add	r26, r20
     2ee:	b5 1f       	adc	r27, r21
     2f0:	0d 90       	ld	r0, X+
     2f2:	bc 91       	ld	r27, X
     2f4:	a0 2d       	mov	r26, r0
     2f6:	ab 2b       	or	r26, r27
     2f8:	09 f0       	breq	.+2      	; 0x2fc <calc_p_mi+0x40>
     2fa:	50 c0       	rjmp	.+160    	; 0x39c <calc_p_mi+0xe0>
     2fc:	7a 01       	movw	r14, r20
     2fe:	6b 01       	movw	r12, r22
     300:	59 01       	movw	r10, r18
		{
			if(op[i]=='+')
     302:	9b 32       	cpi	r25, 0x2B	; 43
     304:	f9 f4       	brne	.+62     	; 0x344 <calc_p_mi+0x88>
			{
				n[i] += n[i+1];
     306:	48 01       	movw	r8, r16
     308:	88 0c       	add	r8, r8
     30a:	99 1c       	adc	r9, r9
     30c:	88 0c       	add	r8, r8
     30e:	99 1c       	adc	r9, r9
     310:	82 0e       	add	r8, r18
     312:	93 1e       	adc	r9, r19
     314:	f8 01       	movw	r30, r16
     316:	31 96       	adiw	r30, 0x01	; 1
     318:	ee 0f       	add	r30, r30
     31a:	ff 1f       	adc	r31, r31
     31c:	ee 0f       	add	r30, r30
     31e:	ff 1f       	adc	r31, r31
     320:	e2 0f       	add	r30, r18
     322:	f3 1f       	adc	r31, r19
     324:	20 81       	ld	r18, Z
     326:	31 81       	ldd	r19, Z+1	; 0x01
     328:	42 81       	ldd	r20, Z+2	; 0x02
     32a:	53 81       	ldd	r21, Z+3	; 0x03
     32c:	f4 01       	movw	r30, r8
     32e:	60 81       	ld	r22, Z
     330:	71 81       	ldd	r23, Z+1	; 0x01
     332:	82 81       	ldd	r24, Z+2	; 0x02
     334:	93 81       	ldd	r25, Z+3	; 0x03
     336:	0e 94 4f 08 	call	0x109e	; 0x109e <__addsf3>
     33a:	f4 01       	movw	r30, r8
     33c:	60 83       	st	Z, r22
     33e:	71 83       	std	Z+1, r23	; 0x01
     340:	82 83       	std	Z+2, r24	; 0x02
     342:	93 83       	std	Z+3, r25	; 0x03
			}
			if(op[i]=='-')
     344:	88 81       	ld	r24, Y
     346:	8d 32       	cpi	r24, 0x2D	; 45
     348:	e9 f4       	brne	.+58     	; 0x384 <calc_p_mi+0xc8>
			{
				n[i] -= n[i+1];
     34a:	e8 01       	movw	r28, r16
     34c:	cc 0f       	add	r28, r28
     34e:	dd 1f       	adc	r29, r29
     350:	cc 0f       	add	r28, r28
     352:	dd 1f       	adc	r29, r29
     354:	ca 0d       	add	r28, r10
     356:	db 1d       	adc	r29, r11
     358:	f8 01       	movw	r30, r16
     35a:	31 96       	adiw	r30, 0x01	; 1
     35c:	ee 0f       	add	r30, r30
     35e:	ff 1f       	adc	r31, r31
     360:	ee 0f       	add	r30, r30
     362:	ff 1f       	adc	r31, r31
     364:	ea 0d       	add	r30, r10
     366:	fb 1d       	adc	r31, r11
     368:	20 81       	ld	r18, Z
     36a:	31 81       	ldd	r19, Z+1	; 0x01
     36c:	42 81       	ldd	r20, Z+2	; 0x02
     36e:	53 81       	ldd	r21, Z+3	; 0x03
     370:	68 81       	ld	r22, Y
     372:	79 81       	ldd	r23, Y+1	; 0x01
     374:	8a 81       	ldd	r24, Y+2	; 0x02
     376:	9b 81       	ldd	r25, Y+3	; 0x03
     378:	0e 94 4e 08 	call	0x109c	; 0x109c <__subsf3>
     37c:	68 83       	st	Y, r22
     37e:	79 83       	std	Y+1, r23	; 0x01
     380:	8a 83       	std	Y+2, r24	; 0x02
     382:	9b 83       	std	Y+3, r25	; 0x03
			}
			rearr(i,n,op,pr);
     384:	97 01       	movw	r18, r14
     386:	a6 01       	movw	r20, r12
     388:	b5 01       	movw	r22, r10
     38a:	c8 01       	movw	r24, r16
     38c:	0e 94 73 00 	call	0xe6	; 0xe6 <rearr>
			return calc_p_mi(n,op,pr);
     390:	a7 01       	movw	r20, r14
     392:	b6 01       	movw	r22, r12
     394:	c5 01       	movw	r24, r10
     396:	0e 94 5e 01 	call	0x2bc	; 0x2bc <calc_p_mi>
     39a:	0e c0       	rjmp	.+28     	; 0x3b8 <calc_p_mi+0xfc>
{
	if(op[0] == '=')
	{
		return 0;
	}
	for(int i = 0 ; op[i] != '=' ; i++)
     39c:	31 96       	adiw	r30, 0x01	; 1
     39e:	8f 01       	movw	r16, r30
     3a0:	eb 01       	movw	r28, r22
     3a2:	ce 0f       	add	r28, r30
     3a4:	df 1f       	adc	r29, r31
     3a6:	98 81       	ld	r25, Y
     3a8:	9d 33       	cpi	r25, 0x3D	; 61
     3aa:	09 f0       	breq	.+2      	; 0x3ae <calc_p_mi+0xf2>
     3ac:	9c cf       	rjmp	.-200    	; 0x2e6 <calc_p_mi+0x2a>
			}
			rearr(i,n,op,pr);
			return calc_p_mi(n,op,pr);
		}
	}
	return 0;
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <calc_p_mi+0xfc>
}
int calc_p_mi( float *n , unsigned char *op,unsigned int *pr)
{
	if(op[0] == '=')
	{
		return 0;
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
			rearr(i,n,op,pr);
			return calc_p_mi(n,op,pr);
		}
	}
	return 0;
}
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	ff 90       	pop	r15
     3c2:	ef 90       	pop	r14
     3c4:	df 90       	pop	r13
     3c6:	cf 90       	pop	r12
     3c8:	bf 90       	pop	r11
     3ca:	af 90       	pop	r10
     3cc:	9f 90       	pop	r9
     3ce:	8f 90       	pop	r8
     3d0:	08 95       	ret

000003d2 <ope>:
int ope(unsigned char n)
{
	switch(n)
     3d2:	8d 32       	cpi	r24, 0x2D	; 45
     3d4:	49 f0       	breq	.+18     	; 0x3e8 <ope+0x16>
     3d6:	20 f4       	brcc	.+8      	; 0x3e0 <ope+0xe>
     3d8:	8a 52       	subi	r24, 0x2A	; 42
     3da:	82 30       	cpi	r24, 0x02	; 2
     3dc:	40 f4       	brcc	.+16     	; 0x3ee <ope+0x1c>
     3de:	04 c0       	rjmp	.+8      	; 0x3e8 <ope+0x16>
     3e0:	8f 32       	cpi	r24, 0x2F	; 47
     3e2:	11 f0       	breq	.+4      	; 0x3e8 <ope+0x16>
     3e4:	8d 33       	cpi	r24, 0x3D	; 61
     3e6:	19 f4       	brne	.+6      	; 0x3ee <ope+0x1c>
	{
		case '+' : return 1 ;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	08 95       	ret
		case '-' : return 1 ;
		case '*' : return 1 ;
		case '/' : return 1 ;
		case '=' : return 1 ;
	}
	return 0 ;
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
}
     3f2:	08 95       	ret

000003f4 <power>:
int power(int base , int factor)
{
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
	if (factor==0)
     3f8:	61 15       	cp	r22, r1
     3fa:	71 05       	cpc	r23, r1
     3fc:	71 f0       	breq	.+28     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
     3fe:	ec 01       	movw	r28, r24
	{
		return 1;
	}
	return base * power(base,factor-1);
     400:	61 50       	subi	r22, 0x01	; 1
     402:	71 09       	sbc	r23, r1
     404:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <power>
     408:	9c 01       	movw	r18, r24
     40a:	c2 9f       	mul	r28, r18
     40c:	c0 01       	movw	r24, r0
     40e:	c3 9f       	mul	r28, r19
     410:	90 0d       	add	r25, r0
     412:	d2 9f       	mul	r29, r18
     414:	90 0d       	add	r25, r0
     416:	11 24       	eor	r1, r1
     418:	02 c0       	rjmp	.+4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
}
int power(int base , int factor)
{
	if (factor==0)
	{
		return 1;
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return base * power(base,factor-1);
}
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	08 95       	ret

00000424 <store_n>:
void store_n( float *n , unsigned char *arr , int pr ,  int ind , int n_c)
{
     424:	8f 92       	push	r8
     426:	9f 92       	push	r9
     428:	af 92       	push	r10
     42a:	bf 92       	push	r11
     42c:	cf 92       	push	r12
     42e:	df 92       	push	r13
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	5b 01       	movw	r10, r22
     43e:	6a 01       	movw	r12, r20
     440:	49 01       	movw	r8, r18
	n[n_c]=0;
     442:	00 0f       	add	r16, r16
     444:	11 1f       	adc	r17, r17
     446:	00 0f       	add	r16, r16
     448:	11 1f       	adc	r17, r17
     44a:	08 0f       	add	r16, r24
     44c:	19 1f       	adc	r17, r25
     44e:	f8 01       	movw	r30, r16
     450:	10 82       	st	Z, r1
     452:	11 82       	std	Z+1, r1	; 0x01
     454:	12 82       	std	Z+2, r1	; 0x02
     456:	13 82       	std	Z+3, r1	; 0x03
	for(int i=ind ; i>=pr ; i--)
     458:	e9 01       	movw	r28, r18
     45a:	2f c0       	rjmp	.+94     	; 0x4ba <store_n+0x96>
	{
		if(arr[i]>48U)
     45c:	f5 01       	movw	r30, r10
     45e:	ec 0f       	add	r30, r28
     460:	fd 1f       	adc	r31, r29
     462:	80 81       	ld	r24, Z
     464:	81 33       	cpi	r24, 0x31	; 49
     466:	40 f1       	brcs	.+80     	; 0x4b8 <store_n+0x94>
		{
			n[n_c] +=(float) ((arr[i]-48)*(power(10,ind-i)));
     468:	e8 2e       	mov	r14, r24
     46a:	f1 2c       	mov	r15, r1
     46c:	f0 e3       	ldi	r31, 0x30	; 48
     46e:	ef 1a       	sub	r14, r31
     470:	f1 08       	sbc	r15, r1
     472:	b4 01       	movw	r22, r8
     474:	6c 1b       	sub	r22, r28
     476:	7d 0b       	sbc	r23, r29
     478:	8a e0       	ldi	r24, 0x0A	; 10
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <power>
     480:	9c 01       	movw	r18, r24
     482:	e2 9e       	mul	r14, r18
     484:	c0 01       	movw	r24, r0
     486:	e3 9e       	mul	r14, r19
     488:	90 0d       	add	r25, r0
     48a:	f2 9e       	mul	r15, r18
     48c:	90 0d       	add	r25, r0
     48e:	11 24       	eor	r1, r1
     490:	bc 01       	movw	r22, r24
     492:	99 0f       	add	r25, r25
     494:	88 0b       	sbc	r24, r24
     496:	99 0b       	sbc	r25, r25
     498:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__floatsisf>
     49c:	9b 01       	movw	r18, r22
     49e:	ac 01       	movw	r20, r24
     4a0:	f8 01       	movw	r30, r16
     4a2:	60 81       	ld	r22, Z
     4a4:	71 81       	ldd	r23, Z+1	; 0x01
     4a6:	82 81       	ldd	r24, Z+2	; 0x02
     4a8:	93 81       	ldd	r25, Z+3	; 0x03
     4aa:	0e 94 4f 08 	call	0x109e	; 0x109e <__addsf3>
     4ae:	f8 01       	movw	r30, r16
     4b0:	60 83       	st	Z, r22
     4b2:	71 83       	std	Z+1, r23	; 0x01
     4b4:	82 83       	std	Z+2, r24	; 0x02
     4b6:	93 83       	std	Z+3, r25	; 0x03
	return base * power(base,factor-1);
}
void store_n( float *n , unsigned char *arr , int pr ,  int ind , int n_c)
{
	n[n_c]=0;
	for(int i=ind ; i>=pr ; i--)
     4b8:	21 97       	sbiw	r28, 0x01	; 1
     4ba:	cc 15       	cp	r28, r12
     4bc:	dd 05       	cpc	r29, r13
     4be:	74 f6       	brge	.-100    	; 0x45c <store_n+0x38>
		if(arr[i]>48U)
		{
			n[n_c] +=(float) ((arr[i]-48)*(power(10,ind-i)));
		}
	}
}
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	1f 91       	pop	r17
     4c6:	0f 91       	pop	r16
     4c8:	ff 90       	pop	r15
     4ca:	ef 90       	pop	r14
     4cc:	df 90       	pop	r13
     4ce:	cf 90       	pop	r12
     4d0:	bf 90       	pop	r11
     4d2:	af 90       	pop	r10
     4d4:	9f 90       	pop	r9
     4d6:	8f 90       	pop	r8
     4d8:	08 95       	ret

000004da <split>:
void split (unsigned char *arr ,unsigned char *op , float *n)
{
     4da:	4f 92       	push	r4
     4dc:	5f 92       	push	r5
     4de:	6f 92       	push	r6
     4e0:	7f 92       	push	r7
     4e2:	8f 92       	push	r8
     4e4:	9f 92       	push	r9
     4e6:	af 92       	push	r10
     4e8:	bf 92       	push	r11
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	7c 01       	movw	r14, r24
     4fc:	4b 01       	movw	r8, r22
     4fe:	2a 01       	movw	r4, r20
	int op_c=0 ;
	int n_c=0;
	int pr = 0 ;
	for(int i = 0 ; arr[i]!='\0' ; i++)
     500:	c0 e0       	ldi	r28, 0x00	; 0
     502:	d0 e0       	ldi	r29, 0x00	; 0
}
void split (unsigned char *arr ,unsigned char *op , float *n)
{
	int op_c=0 ;
	int n_c=0;
	int pr = 0 ;
     504:	61 2c       	mov	r6, r1
     506:	71 2c       	mov	r7, r1
	}
}
void split (unsigned char *arr ,unsigned char *op , float *n)
{
	int op_c=0 ;
	int n_c=0;
     508:	a1 2c       	mov	r10, r1
     50a:	b1 2c       	mov	r11, r1
		}
	}
}
void split (unsigned char *arr ,unsigned char *op , float *n)
{
	int op_c=0 ;
     50c:	c1 2c       	mov	r12, r1
     50e:	d1 2c       	mov	r13, r1
	int n_c=0;
	int pr = 0 ;
	for(int i = 0 ; arr[i]!='\0' ; i++)
     510:	1d c0       	rjmp	.+58     	; 0x54c <split+0x72>
	{
		if(ope(arr[i])==1)
     512:	81 2f       	mov	r24, r17
     514:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <ope>
     518:	01 97       	sbiw	r24, 0x01	; 1
     51a:	b9 f4       	brne	.+46     	; 0x54a <split+0x70>
		{
			op[op_c] = arr[i];
     51c:	f4 01       	movw	r30, r8
     51e:	ec 0d       	add	r30, r12
     520:	fd 1d       	adc	r31, r13
     522:	10 83       	st	Z, r17
			op_c++;
     524:	8f ef       	ldi	r24, 0xFF	; 255
     526:	c8 1a       	sub	r12, r24
     528:	d8 0a       	sbc	r13, r24
			store_n(n,arr,pr,i-1,n_c);
     52a:	85 01       	movw	r16, r10
     52c:	9e 01       	movw	r18, r28
     52e:	21 50       	subi	r18, 0x01	; 1
     530:	31 09       	sbc	r19, r1
     532:	a3 01       	movw	r20, r6
     534:	b7 01       	movw	r22, r14
     536:	c2 01       	movw	r24, r4
     538:	0e 94 12 02 	call	0x424	; 0x424 <store_n>
			n_c++;
     53c:	8f ef       	ldi	r24, 0xFF	; 255
     53e:	a8 1a       	sub	r10, r24
     540:	b8 0a       	sbc	r11, r24
			pr=i+1;
     542:	3e 01       	movw	r6, r28
     544:	8f ef       	ldi	r24, 0xFF	; 255
     546:	68 1a       	sub	r6, r24
     548:	78 0a       	sbc	r7, r24
void split (unsigned char *arr ,unsigned char *op , float *n)
{
	int op_c=0 ;
	int n_c=0;
	int pr = 0 ;
	for(int i = 0 ; arr[i]!='\0' ; i++)
     54a:	21 96       	adiw	r28, 0x01	; 1
     54c:	f7 01       	movw	r30, r14
     54e:	ec 0f       	add	r30, r28
     550:	fd 1f       	adc	r31, r29
     552:	10 81       	ld	r17, Z
     554:	11 11       	cpse	r17, r1
     556:	dd cf       	rjmp	.-70     	; 0x512 <split+0x38>
			store_n(n,arr,pr,i-1,n_c);
			n_c++;
			pr=i+1;
		}
	}
}
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	1f 91       	pop	r17
     55e:	0f 91       	pop	r16
     560:	ff 90       	pop	r15
     562:	ef 90       	pop	r14
     564:	df 90       	pop	r13
     566:	cf 90       	pop	r12
     568:	bf 90       	pop	r11
     56a:	af 90       	pop	r10
     56c:	9f 90       	pop	r9
     56e:	8f 90       	pop	r8
     570:	7f 90       	pop	r7
     572:	6f 90       	pop	r6
     574:	5f 90       	pop	r5
     576:	4f 90       	pop	r4
     578:	08 95       	ret

0000057a <clean>:
void clean(unsigned char *str)
{
     57a:	ac 01       	movw	r20, r24
	for (int i = 0 ; str[i]!='\0';i++)
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	03 c0       	rjmp	.+6      	; 0x588 <clean+0xe>
	{
		str[i]='\0';
     582:	10 82       	st	Z, r1
		}
	}
}
void clean(unsigned char *str)
{
	for (int i = 0 ; str[i]!='\0';i++)
     584:	2f 5f       	subi	r18, 0xFF	; 255
     586:	3f 4f       	sbci	r19, 0xFF	; 255
     588:	fa 01       	movw	r30, r20
     58a:	e2 0f       	add	r30, r18
     58c:	f3 1f       	adc	r31, r19
     58e:	90 81       	ld	r25, Z
     590:	91 11       	cpse	r25, r1
     592:	f7 cf       	rjmp	.-18     	; 0x582 <clean+0x8>
	{
		str[i]='\0';
	}
}
     594:	08 95       	ret

00000596 <clean_int>:
void clean_int(unsigned int *str)
{
	for (int i = 0 ; str[i]!='\0';i++)
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	04 c0       	rjmp	.+8      	; 0x5a4 <clean_int+0xe>
	{
		str[i]='\0';
     59c:	11 82       	std	Z+1, r1	; 0x01
     59e:	10 82       	st	Z, r1
		str[i]='\0';
	}
}
void clean_int(unsigned int *str)
{
	for (int i = 0 ; str[i]!='\0';i++)
     5a0:	2f 5f       	subi	r18, 0xFF	; 255
     5a2:	3f 4f       	sbci	r19, 0xFF	; 255
     5a4:	f9 01       	movw	r30, r18
     5a6:	ee 0f       	add	r30, r30
     5a8:	ff 1f       	adc	r31, r31
     5aa:	e8 0f       	add	r30, r24
     5ac:	f9 1f       	adc	r31, r25
     5ae:	40 81       	ld	r20, Z
     5b0:	51 81       	ldd	r21, Z+1	; 0x01
     5b2:	45 2b       	or	r20, r21
     5b4:	99 f7       	brne	.-26     	; 0x59c <clean_int+0x6>
	{
		str[i]='\0';
	}
}
     5b6:	08 95       	ret

000005b8 <clean_float>:
void clean_float( float *str)
{
     5b8:	ef 92       	push	r14
     5ba:	ff 92       	push	r15
     5bc:	0f 93       	push	r16
     5be:	1f 93       	push	r17
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	7c 01       	movw	r14, r24
	for (int i = 0 ; str[i]!='\0';i++)
     5c6:	00 e0       	ldi	r16, 0x00	; 0
     5c8:	10 e0       	ldi	r17, 0x00	; 0
     5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <clean_float+0x20>
	{
		str[i]='\0';
     5cc:	18 82       	st	Y, r1
     5ce:	19 82       	std	Y+1, r1	; 0x01
     5d0:	1a 82       	std	Y+2, r1	; 0x02
     5d2:	1b 82       	std	Y+3, r1	; 0x03
		str[i]='\0';
	}
}
void clean_float( float *str)
{
	for (int i = 0 ; str[i]!='\0';i++)
     5d4:	0f 5f       	subi	r16, 0xFF	; 255
     5d6:	1f 4f       	sbci	r17, 0xFF	; 255
     5d8:	e8 01       	movw	r28, r16
     5da:	cc 0f       	add	r28, r28
     5dc:	dd 1f       	adc	r29, r29
     5de:	cc 0f       	add	r28, r28
     5e0:	dd 1f       	adc	r29, r29
     5e2:	ce 0d       	add	r28, r14
     5e4:	df 1d       	adc	r29, r15
     5e6:	68 81       	ld	r22, Y
     5e8:	79 81       	ldd	r23, Y+1	; 0x01
     5ea:	8a 81       	ldd	r24, Y+2	; 0x02
     5ec:	9b 81       	ldd	r25, Y+3	; 0x03
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	a9 01       	movw	r20, r18
     5f4:	0e 94 bb 08 	call	0x1176	; 0x1176 <__cmpsf2>
     5f8:	81 11       	cpse	r24, r1
     5fa:	e8 cf       	rjmp	.-48     	; 0x5cc <clean_float+0x14>
	{
		str[i]='\0';
	}
}
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	ff 90       	pop	r15
     606:	ef 90       	pop	r14
     608:	08 95       	ret

0000060a <calculate_res>:

void calculate_res(unsigned char*input)
{
     60a:	8f 92       	push	r8
     60c:	9f 92       	push	r9
     60e:	af 92       	push	r10
     610:	bf 92       	push	r11
     612:	cf 92       	push	r12
     614:	df 92       	push	r13
     616:	ef 92       	push	r14
     618:	ff 92       	push	r15
     61a:	0f 93       	push	r16
     61c:	1f 93       	push	r17
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	c0 5d       	subi	r28, 0xD0	; 208
     628:	d2 40       	sbci	r29, 0x02	; 2
     62a:	0f b6       	in	r0, 0x3f	; 63
     62c:	f8 94       	cli
     62e:	de bf       	out	0x3e, r29	; 62
     630:	0f be       	out	0x3f, r0	; 63
     632:	cd bf       	out	0x3d, r28	; 61
	unsigned int sub;
	unsigned char out_r[10];
	unsigned int input_l;
	unsigned int j ;
	unsigned int input_r;
	split(input,op,n);
     634:	ae 01       	movw	r20, r28
     636:	4f 5f       	subi	r20, 0xFF	; 255
     638:	5f 4f       	sbci	r21, 0xFF	; 255
     63a:	be 01       	movw	r22, r28
     63c:	6f 56       	subi	r22, 0x6F	; 111
     63e:	7e 4f       	sbci	r23, 0xFE	; 254
     640:	0e 94 6d 02 	call	0x4da	; 0x4da <split>
	pir(op,pr);
     644:	be 01       	movw	r22, r28
     646:	6b 50       	subi	r22, 0x0B	; 11
     648:	7e 4f       	sbci	r23, 0xFE	; 254
     64a:	ce 01       	movw	r24, r28
     64c:	8f 56       	subi	r24, 0x6F	; 111
     64e:	9e 4f       	sbci	r25, 0xFE	; 254
     650:	0e 94 36 00 	call	0x6c	; 0x6c <pir>
	calc_ml_d(n,op,pr);
     654:	ae 01       	movw	r20, r28
     656:	4b 50       	subi	r20, 0x0B	; 11
     658:	5e 4f       	sbci	r21, 0xFE	; 254
     65a:	be 01       	movw	r22, r28
     65c:	6f 56       	subi	r22, 0x6F	; 111
     65e:	7e 4f       	sbci	r23, 0xFE	; 254
     660:	ce 01       	movw	r24, r28
     662:	01 96       	adiw	r24, 0x01	; 1
     664:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <calc_ml_d>
	calc_p_mi(n,op,pr);
     668:	ae 01       	movw	r20, r28
     66a:	4b 50       	subi	r20, 0x0B	; 11
     66c:	5e 4f       	sbci	r21, 0xFE	; 254
     66e:	be 01       	movw	r22, r28
     670:	6f 56       	subi	r22, 0x6F	; 111
     672:	7e 4f       	sbci	r23, 0xFE	; 254
     674:	ce 01       	movw	r24, r28
     676:	01 96       	adiw	r24, 0x01	; 1
     678:	0e 94 5e 01 	call	0x2bc	; 0x2bc <calc_p_mi>
	clean_int(pr);
     67c:	ce 01       	movw	r24, r28
     67e:	8b 50       	subi	r24, 0x0B	; 11
     680:	9e 4f       	sbci	r25, 0xFE	; 254
     682:	0e 94 cb 02 	call	0x596	; 0x596 <clean_int>
	clean(op);
     686:	ce 01       	movw	r24, r28
     688:	8f 56       	subi	r24, 0x6F	; 111
     68a:	9e 4f       	sbci	r25, 0xFE	; 254
     68c:	0e 94 bd 02 	call	0x57a	; 0x57a <clean>
	input_l = (int)n[0];
     690:	89 80       	ldd	r8, Y+1	; 0x01
     692:	9a 80       	ldd	r9, Y+2	; 0x02
     694:	ab 80       	ldd	r10, Y+3	; 0x03
     696:	bc 80       	ldd	r11, Y+4	; 0x04
     698:	c5 01       	movw	r24, r10
     69a:	b4 01       	movw	r22, r8
     69c:	0e 94 32 09 	call	0x1264	; 0x1264 <__fixsfsi>
     6a0:	6b 01       	movw	r12, r22
     6a2:	7c 01       	movw	r14, r24
     6a4:	ab 01       	movw	r20, r22
	for( i = 0 ; input_l!=0 ; i++)
     6a6:	00 e0       	ldi	r16, 0x00	; 0
     6a8:	10 e0       	ldi	r17, 0x00	; 0
     6aa:	31 c0       	rjmp	.+98     	; 0x70e <calculate_res+0x104>
	{
		sub = (input_l-(input_l/10)*10);
     6ac:	9a 01       	movw	r18, r20
     6ae:	ad ec       	ldi	r26, 0xCD	; 205
     6b0:	bc ec       	ldi	r27, 0xCC	; 204
     6b2:	0e 94 87 0a 	call	0x150e	; 0x150e <__umulhisi3>
     6b6:	96 95       	lsr	r25
     6b8:	87 95       	ror	r24
     6ba:	96 95       	lsr	r25
     6bc:	87 95       	ror	r24
     6be:	96 95       	lsr	r25
     6c0:	87 95       	ror	r24
     6c2:	9c 01       	movw	r18, r24
     6c4:	22 0f       	add	r18, r18
     6c6:	33 1f       	adc	r19, r19
     6c8:	88 0f       	add	r24, r24
     6ca:	99 1f       	adc	r25, r25
     6cc:	88 0f       	add	r24, r24
     6ce:	99 1f       	adc	r25, r25
     6d0:	88 0f       	add	r24, r24
     6d2:	99 1f       	adc	r25, r25
     6d4:	82 0f       	add	r24, r18
     6d6:	93 1f       	adc	r25, r19
     6d8:	9a 01       	movw	r18, r20
     6da:	28 1b       	sub	r18, r24
     6dc:	39 0b       	sbc	r19, r25
     6de:	c9 01       	movw	r24, r18
		out_l[i] = sub +48;
     6e0:	ed eb       	ldi	r30, 0xBD	; 189
     6e2:	f2 e0       	ldi	r31, 0x02	; 2
     6e4:	ec 0f       	add	r30, r28
     6e6:	fd 1f       	adc	r31, r29
     6e8:	e0 0f       	add	r30, r16
     6ea:	f1 1f       	adc	r31, r17
     6ec:	20 e3       	ldi	r18, 0x30	; 48
     6ee:	28 0f       	add	r18, r24
     6f0:	20 83       	st	Z, r18
		input_l -=sub;
     6f2:	9a 01       	movw	r18, r20
     6f4:	28 1b       	sub	r18, r24
     6f6:	39 0b       	sbc	r19, r25
		input_l /=10;
     6f8:	0e 94 87 0a 	call	0x150e	; 0x150e <__umulhisi3>
     6fc:	ac 01       	movw	r20, r24
     6fe:	56 95       	lsr	r21
     700:	47 95       	ror	r20
     702:	56 95       	lsr	r21
     704:	47 95       	ror	r20
     706:	56 95       	lsr	r21
     708:	47 95       	ror	r20
	calc_ml_d(n,op,pr);
	calc_p_mi(n,op,pr);
	clean_int(pr);
	clean(op);
	input_l = (int)n[0];
	for( i = 0 ; input_l!=0 ; i++)
     70a:	0f 5f       	subi	r16, 0xFF	; 255
     70c:	1f 4f       	sbci	r17, 0xFF	; 255
     70e:	41 15       	cp	r20, r1
     710:	51 05       	cpc	r21, r1
     712:	61 f6       	brne	.-104    	; 0x6ac <calculate_res+0xa2>
		out_l[i] = sub +48;
		input_l -=sub;
		input_l /=10;
	}
	sub=0;
	input_r = ((int)(n[0]*1000))-(((int)n[0])*1000);
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	4a e7       	ldi	r20, 0x7A	; 122
     71a:	54 e4       	ldi	r21, 0x44	; 68
     71c:	c5 01       	movw	r24, r10
     71e:	b4 01       	movw	r22, r8
     720:	0e 94 1a 0a 	call	0x1434	; 0x1434 <__mulsf3>
     724:	0e 94 32 09 	call	0x1264	; 0x1264 <__fixsfsi>
     728:	28 e1       	ldi	r18, 0x18	; 24
     72a:	3c ef       	ldi	r19, 0xFC	; 252
     72c:	2c 9d       	mul	r18, r12
     72e:	a0 01       	movw	r20, r0
     730:	2d 9d       	mul	r18, r13
     732:	50 0d       	add	r21, r0
     734:	3c 9d       	mul	r19, r12
     736:	50 0d       	add	r21, r0
     738:	11 24       	eor	r1, r1
     73a:	46 0f       	add	r20, r22
     73c:	57 1f       	adc	r21, r23
	for( j = 0 ; input_r!=0 ; j++)
     73e:	e1 2c       	mov	r14, r1
     740:	f1 2c       	mov	r15, r1
     742:	32 c0       	rjmp	.+100    	; 0x7a8 <calculate_res+0x19e>
	{
		sub = (input_r-(input_r/10)*10);
     744:	9a 01       	movw	r18, r20
     746:	ad ec       	ldi	r26, 0xCD	; 205
     748:	bc ec       	ldi	r27, 0xCC	; 204
     74a:	0e 94 87 0a 	call	0x150e	; 0x150e <__umulhisi3>
     74e:	96 95       	lsr	r25
     750:	87 95       	ror	r24
     752:	96 95       	lsr	r25
     754:	87 95       	ror	r24
     756:	96 95       	lsr	r25
     758:	87 95       	ror	r24
     75a:	9c 01       	movw	r18, r24
     75c:	22 0f       	add	r18, r18
     75e:	33 1f       	adc	r19, r19
     760:	88 0f       	add	r24, r24
     762:	99 1f       	adc	r25, r25
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	88 0f       	add	r24, r24
     76a:	99 1f       	adc	r25, r25
     76c:	82 0f       	add	r24, r18
     76e:	93 1f       	adc	r25, r19
     770:	9a 01       	movw	r18, r20
     772:	28 1b       	sub	r18, r24
     774:	39 0b       	sbc	r19, r25
     776:	c9 01       	movw	r24, r18
		out_r[j] = sub +48;;
     778:	e7 ec       	ldi	r30, 0xC7	; 199
     77a:	f2 e0       	ldi	r31, 0x02	; 2
     77c:	ec 0f       	add	r30, r28
     77e:	fd 1f       	adc	r31, r29
     780:	ee 0d       	add	r30, r14
     782:	ff 1d       	adc	r31, r15
     784:	20 e3       	ldi	r18, 0x30	; 48
     786:	28 0f       	add	r18, r24
     788:	20 83       	st	Z, r18
		input_r -=sub;
     78a:	9a 01       	movw	r18, r20
     78c:	28 1b       	sub	r18, r24
     78e:	39 0b       	sbc	r19, r25
		input_r /=10;
     790:	0e 94 87 0a 	call	0x150e	; 0x150e <__umulhisi3>
     794:	ac 01       	movw	r20, r24
     796:	56 95       	lsr	r21
     798:	47 95       	ror	r20
     79a:	56 95       	lsr	r21
     79c:	47 95       	ror	r20
     79e:	56 95       	lsr	r21
     7a0:	47 95       	ror	r20
		input_l -=sub;
		input_l /=10;
	}
	sub=0;
	input_r = ((int)(n[0]*1000))-(((int)n[0])*1000);
	for( j = 0 ; input_r!=0 ; j++)
     7a2:	3f ef       	ldi	r19, 0xFF	; 255
     7a4:	e3 1a       	sub	r14, r19
     7a6:	f3 0a       	sbc	r15, r19
     7a8:	41 15       	cp	r20, r1
     7aa:	51 05       	cpc	r21, r1
     7ac:	59 f6       	brne	.-106    	; 0x744 <calculate_res+0x13a>
		sub = (input_r-(input_r/10)*10);
		out_r[j] = sub +48;;
		input_r -=sub;
		input_r /=10;
	}
	Lcd4_Write_Char('=');
     7ae:	8d e3       	ldi	r24, 0x3D	; 61
     7b0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <Lcd4_Write_Char>
	for (int a=i-1;a>=0;a--)
     7b4:	01 50       	subi	r16, 0x01	; 1
     7b6:	11 09       	sbc	r17, r1
     7b8:	0b c0       	rjmp	.+22     	; 0x7d0 <calculate_res+0x1c6>
	{
		Lcd4_Write_Char(out_l[a]);
     7ba:	ed eb       	ldi	r30, 0xBD	; 189
     7bc:	f2 e0       	ldi	r31, 0x02	; 2
     7be:	ec 0f       	add	r30, r28
     7c0:	fd 1f       	adc	r31, r29
     7c2:	e0 0f       	add	r30, r16
     7c4:	f1 1f       	adc	r31, r17
     7c6:	80 81       	ld	r24, Z
     7c8:	0e 94 c6 07 	call	0xf8c	; 0xf8c <Lcd4_Write_Char>
		out_r[j] = sub +48;;
		input_r -=sub;
		input_r /=10;
	}
	Lcd4_Write_Char('=');
	for (int a=i-1;a>=0;a--)
     7cc:	01 50       	subi	r16, 0x01	; 1
     7ce:	11 09       	sbc	r17, r1
     7d0:	11 23       	and	r17, r17
     7d2:	9c f7       	brge	.-26     	; 0x7ba <calculate_res+0x1b0>
	{
		Lcd4_Write_Char(out_l[a]);
	}
	if (j>0)
     7d4:	e1 14       	cp	r14, r1
     7d6:	f1 04       	cpc	r15, r1
     7d8:	a9 f0       	breq	.+42     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
	{
		Lcd4_Write_Char('.');
     7da:	8e e2       	ldi	r24, 0x2E	; 46
     7dc:	0e 94 c6 07 	call	0xf8c	; 0xf8c <Lcd4_Write_Char>
		for (int a=j-1;a>=0;a--)
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	e8 1a       	sub	r14, r24
     7e4:	f1 08       	sbc	r15, r1
     7e6:	0c c0       	rjmp	.+24     	; 0x800 <__DATA_REGION_LENGTH__>
		{
			Lcd4_Write_Char(out_r[a]);
     7e8:	e7 ec       	ldi	r30, 0xC7	; 199
     7ea:	f2 e0       	ldi	r31, 0x02	; 2
     7ec:	ec 0f       	add	r30, r28
     7ee:	fd 1f       	adc	r31, r29
     7f0:	ee 0d       	add	r30, r14
     7f2:	ff 1d       	adc	r31, r15
     7f4:	80 81       	ld	r24, Z
     7f6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <Lcd4_Write_Char>
		Lcd4_Write_Char(out_l[a]);
	}
	if (j>0)
	{
		Lcd4_Write_Char('.');
		for (int a=j-1;a>=0;a--)
     7fa:	21 e0       	ldi	r18, 0x01	; 1
     7fc:	e2 1a       	sub	r14, r18
     7fe:	f1 08       	sbc	r15, r1
     800:	ff 20       	and	r15, r15
     802:	94 f7       	brge	.-28     	; 0x7e8 <calculate_res+0x1de>
		{
			Lcd4_Write_Char(out_r[a]);
		}
	}
	clean_float(n);
     804:	ce 01       	movw	r24, r28
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <clean_float>
     80c:	c0 53       	subi	r28, 0x30	; 48
     80e:	dd 4f       	sbci	r29, 0xFD	; 253
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	f8 94       	cli
     814:	de bf       	out	0x3e, r29	; 62
     816:	0f be       	out	0x3f, r0	; 63
     818:	cd bf       	out	0x3d, r28	; 61
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	ff 90       	pop	r15
     824:	ef 90       	pop	r14
     826:	df 90       	pop	r13
     828:	cf 90       	pop	r12
     82a:	bf 90       	pop	r11
     82c:	af 90       	pop	r10
     82e:	9f 90       	pop	r9
     830:	8f 90       	pop	r8
     832:	08 95       	ret

00000834 <v_Keypad_Init>:
*/

void v_Keypad_Init(void)
{
	//set the rows direction as output
	ROW0_DDR |=(1U<<ROW0);
     834:	84 b3       	in	r24, 0x14	; 20
     836:	81 60       	ori	r24, 0x01	; 1
     838:	84 bb       	out	0x14, r24	; 20
	ROW1_DDR |=(1U<<ROW1);
     83a:	84 b3       	in	r24, 0x14	; 20
     83c:	82 60       	ori	r24, 0x02	; 2
     83e:	84 bb       	out	0x14, r24	; 20
	ROW2_DDR |=(1U<<ROW2);
     840:	84 b3       	in	r24, 0x14	; 20
     842:	84 60       	ori	r24, 0x04	; 4
     844:	84 bb       	out	0x14, r24	; 20
	ROW3_DDR |=(1U<<ROW3);
     846:	84 b3       	in	r24, 0x14	; 20
     848:	88 60       	ori	r24, 0x08	; 8
     84a:	84 bb       	out	0x14, r24	; 20
	//set the line direction as input
	LINE0_DDR &=~(1U<<LINE0);
     84c:	84 b3       	in	r24, 0x14	; 20
     84e:	8f 7e       	andi	r24, 0xEF	; 239
     850:	84 bb       	out	0x14, r24	; 20
	LINE1_DDR &=~(1U<<LINE1);
     852:	84 b3       	in	r24, 0x14	; 20
     854:	8f 7d       	andi	r24, 0xDF	; 223
     856:	84 bb       	out	0x14, r24	; 20
	LINE2_DDR &=~(1U<<LINE2);
     858:	84 b3       	in	r24, 0x14	; 20
     85a:	8f 7b       	andi	r24, 0xBF	; 191
     85c:	84 bb       	out	0x14, r24	; 20
	LINE3_DDR &=~(1U<<LINE3);
     85e:	84 b3       	in	r24, 0x14	; 20
     860:	8f 77       	andi	r24, 0x7F	; 127
     862:	84 bb       	out	0x14, r24	; 20
	//enable line pullup
	LINE0_PULLUP |=(1U<<LINE0);
     864:	85 b3       	in	r24, 0x15	; 21
     866:	80 61       	ori	r24, 0x10	; 16
     868:	85 bb       	out	0x15, r24	; 21
	LINE1_PULLUP |=(1U<<LINE1);
     86a:	85 b3       	in	r24, 0x15	; 21
     86c:	80 62       	ori	r24, 0x20	; 32
     86e:	85 bb       	out	0x15, r24	; 21
	LINE2_PULLUP |=(1U<<LINE2);
     870:	85 b3       	in	r24, 0x15	; 21
     872:	80 64       	ori	r24, 0x40	; 64
     874:	85 bb       	out	0x15, r24	; 21
	LINE3_PULLUP |=(1U<<LINE3);
     876:	85 b3       	in	r24, 0x15	; 21
     878:	80 68       	ori	r24, 0x80	; 128
     87a:	85 bb       	out	0x15, r24	; 21
	//set the rows high
	ROW0_PORT |=(1U<<ROW0);
     87c:	85 b3       	in	r24, 0x15	; 21
     87e:	81 60       	ori	r24, 0x01	; 1
     880:	85 bb       	out	0x15, r24	; 21
	ROW1_PORT |=(1U<<ROW1);
     882:	85 b3       	in	r24, 0x15	; 21
     884:	82 60       	ori	r24, 0x02	; 2
     886:	85 bb       	out	0x15, r24	; 21
	ROW2_PORT |=(1U<<ROW2);
     888:	85 b3       	in	r24, 0x15	; 21
     88a:	84 60       	ori	r24, 0x04	; 4
     88c:	85 bb       	out	0x15, r24	; 21
	ROW3_PORT |=(1U<<ROW3);
     88e:	85 b3       	in	r24, 0x15	; 21
     890:	88 60       	ori	r24, 0x08	; 8
     892:	85 bb       	out	0x15, r24	; 21
     894:	08 95       	ret

00000896 <u8_cKeypad_Scan>:
*/
uint8_t u8_cKeypad_Scan(void)
{
	uint8_t row=0,input;
	//loop on row
	for(row=0;row<4;row++)
     896:	40 e0       	ldi	r20, 0x00	; 0
     898:	9a c0       	rjmp	.+308    	; 0x9ce <u8_cKeypad_Scan+0x138>
	{
		//set all row high
		ROW0_PORT |=(1U<<ROW0);
     89a:	85 b3       	in	r24, 0x15	; 21
     89c:	81 60       	ori	r24, 0x01	; 1
     89e:	85 bb       	out	0x15, r24	; 21
		ROW1_PORT |=(1U<<ROW1);
     8a0:	85 b3       	in	r24, 0x15	; 21
     8a2:	82 60       	ori	r24, 0x02	; 2
     8a4:	85 bb       	out	0x15, r24	; 21
		ROW2_PORT |=(1U<<ROW2);
     8a6:	85 b3       	in	r24, 0x15	; 21
     8a8:	84 60       	ori	r24, 0x04	; 4
     8aa:	85 bb       	out	0x15, r24	; 21
		ROW3_PORT |=(1U<<ROW3);
     8ac:	85 b3       	in	r24, 0x15	; 21
     8ae:	88 60       	ori	r24, 0x08	; 8
     8b0:	85 bb       	out	0x15, r24	; 21
		//clear row number from iteration
		switch(row)
     8b2:	41 30       	cpi	r20, 0x01	; 1
     8b4:	51 f0       	breq	.+20     	; 0x8ca <u8_cKeypad_Scan+0x34>
     8b6:	28 f0       	brcs	.+10     	; 0x8c2 <u8_cKeypad_Scan+0x2c>
     8b8:	42 30       	cpi	r20, 0x02	; 2
     8ba:	59 f0       	breq	.+22     	; 0x8d2 <u8_cKeypad_Scan+0x3c>
     8bc:	43 30       	cpi	r20, 0x03	; 3
     8be:	69 f0       	breq	.+26     	; 0x8da <u8_cKeypad_Scan+0x44>
     8c0:	0f c0       	rjmp	.+30     	; 0x8e0 <u8_cKeypad_Scan+0x4a>
		{
			case 0:ROW0_PORT &=~(1U<<ROW0);
     8c2:	85 b3       	in	r24, 0x15	; 21
     8c4:	8e 7f       	andi	r24, 0xFE	; 254
     8c6:	85 bb       	out	0x15, r24	; 21
			break;
     8c8:	0b c0       	rjmp	.+22     	; 0x8e0 <u8_cKeypad_Scan+0x4a>
			case 1:ROW1_PORT &=~(1U<<ROW1);
     8ca:	85 b3       	in	r24, 0x15	; 21
     8cc:	8d 7f       	andi	r24, 0xFD	; 253
     8ce:	85 bb       	out	0x15, r24	; 21
			break;
     8d0:	07 c0       	rjmp	.+14     	; 0x8e0 <u8_cKeypad_Scan+0x4a>
			case 2:ROW2_PORT &=~(1U<<ROW2);
     8d2:	85 b3       	in	r24, 0x15	; 21
     8d4:	8b 7f       	andi	r24, 0xFB	; 251
     8d6:	85 bb       	out	0x15, r24	; 21
			break;
     8d8:	03 c0       	rjmp	.+6      	; 0x8e0 <u8_cKeypad_Scan+0x4a>
			case 3:ROW3_PORT &=~(1U<<ROW3);
     8da:	85 b3       	in	r24, 0x15	; 21
     8dc:	87 7f       	andi	r24, 0xF7	; 247
     8de:	85 bb       	out	0x15, r24	; 21
			break;
		}
		//read the input
		input  = (((LINE0_PIN&(1U<<LINE0))>>LINE0)<<4);
     8e0:	93 b3       	in	r25, 0x13	; 19
     8e2:	29 2f       	mov	r18, r25
     8e4:	20 71       	andi	r18, 0x10	; 16
		input |= (((LINE1_PIN&(1U<<LINE1))>>LINE1)<<5);
     8e6:	53 b3       	in	r21, 0x13	; 19
     8e8:	50 72       	andi	r21, 0x20	; 32
     8ea:	95 2f       	mov	r25, r21
     8ec:	92 2b       	or	r25, r18
		input |= (((LINE2_PIN&(1U<<LINE2))>>LINE2)<<6);
     8ee:	53 b3       	in	r21, 0x13	; 19
     8f0:	50 74       	andi	r21, 0x40	; 64
     8f2:	59 2b       	or	r21, r25
		input |= (((LINE3_PIN&(1U<<LINE3))>>LINE3)<<7);
     8f4:	83 b3       	in	r24, 0x13	; 19
     8f6:	98 2f       	mov	r25, r24
     8f8:	99 1f       	adc	r25, r25
     8fa:	99 27       	eor	r25, r25
     8fc:	99 1f       	adc	r25, r25
     8fe:	89 2f       	mov	r24, r25
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	96 95       	lsr	r25
     904:	98 2f       	mov	r25, r24
     906:	88 27       	eor	r24, r24
     908:	97 95       	ror	r25
     90a:	87 95       	ror	r24
     90c:	58 2b       	or	r21, r24
		//0xF0
		//if it was input
		if(ALL_LINES != 1)
     90e:	83 b3       	in	r24, 0x13	; 19
     910:	80 71       	andi	r24, 0x10	; 16
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	9c 01       	movw	r18, r24
     916:	32 95       	swap	r19
     918:	22 95       	swap	r18
     91a:	2f 70       	andi	r18, 0x0F	; 15
     91c:	23 27       	eor	r18, r19
     91e:	3f 70       	andi	r19, 0x0F	; 15
     920:	23 27       	eor	r18, r19
     922:	93 b3       	in	r25, 0x13	; 19
     924:	90 72       	andi	r25, 0x20	; 32
     926:	89 2f       	mov	r24, r25
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	96 95       	lsr	r25
     92c:	87 95       	ror	r24
     92e:	92 95       	swap	r25
     930:	82 95       	swap	r24
     932:	8f 70       	andi	r24, 0x0F	; 15
     934:	89 27       	eor	r24, r25
     936:	9f 70       	andi	r25, 0x0F	; 15
     938:	89 27       	eor	r24, r25
     93a:	82 23       	and	r24, r18
     93c:	93 23       	and	r25, r19
     93e:	23 b3       	in	r18, 0x13	; 19
     940:	20 74       	andi	r18, 0x40	; 64
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	00 24       	eor	r0, r0
     946:	22 0f       	add	r18, r18
     948:	33 1f       	adc	r19, r19
     94a:	00 1c       	adc	r0, r0
     94c:	22 0f       	add	r18, r18
     94e:	33 1f       	adc	r19, r19
     950:	00 1c       	adc	r0, r0
     952:	23 2f       	mov	r18, r19
     954:	30 2d       	mov	r19, r0
     956:	82 23       	and	r24, r18
     958:	93 23       	and	r25, r19
     95a:	23 b3       	in	r18, 0x13	; 19
     95c:	22 1f       	adc	r18, r18
     95e:	22 27       	eor	r18, r18
     960:	22 1f       	adc	r18, r18
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	82 23       	and	r24, r18
     966:	93 23       	and	r25, r19
     968:	01 97       	sbiw	r24, 0x01	; 1
     96a:	81 f1       	breq	.+96     	; 0x9cc <u8_cKeypad_Scan+0x136>
		{
			//wait till the input is gone
			while(ALL_LINES != 1);
     96c:	83 b3       	in	r24, 0x13	; 19
     96e:	80 71       	andi	r24, 0x10	; 16
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	9c 01       	movw	r18, r24
     974:	32 95       	swap	r19
     976:	22 95       	swap	r18
     978:	2f 70       	andi	r18, 0x0F	; 15
     97a:	23 27       	eor	r18, r19
     97c:	3f 70       	andi	r19, 0x0F	; 15
     97e:	23 27       	eor	r18, r19
     980:	93 b3       	in	r25, 0x13	; 19
     982:	90 72       	andi	r25, 0x20	; 32
     984:	89 2f       	mov	r24, r25
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	96 95       	lsr	r25
     98a:	87 95       	ror	r24
     98c:	92 95       	swap	r25
     98e:	82 95       	swap	r24
     990:	8f 70       	andi	r24, 0x0F	; 15
     992:	89 27       	eor	r24, r25
     994:	9f 70       	andi	r25, 0x0F	; 15
     996:	89 27       	eor	r24, r25
     998:	82 23       	and	r24, r18
     99a:	93 23       	and	r25, r19
     99c:	23 b3       	in	r18, 0x13	; 19
     99e:	20 74       	andi	r18, 0x40	; 64
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	00 24       	eor	r0, r0
     9a4:	22 0f       	add	r18, r18
     9a6:	33 1f       	adc	r19, r19
     9a8:	00 1c       	adc	r0, r0
     9aa:	22 0f       	add	r18, r18
     9ac:	33 1f       	adc	r19, r19
     9ae:	00 1c       	adc	r0, r0
     9b0:	23 2f       	mov	r18, r19
     9b2:	30 2d       	mov	r19, r0
     9b4:	82 23       	and	r24, r18
     9b6:	93 23       	and	r25, r19
     9b8:	23 b3       	in	r18, 0x13	; 19
     9ba:	22 1f       	adc	r18, r18
     9bc:	22 27       	eor	r18, r18
     9be:	22 1f       	adc	r18, r18
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	82 23       	and	r24, r18
     9c4:	93 23       	and	r25, r19
     9c6:	01 97       	sbiw	r24, 0x01	; 1
     9c8:	89 f6       	brne	.-94     	; 0x96c <u8_cKeypad_Scan+0xd6>
     9ca:	04 c0       	rjmp	.+8      	; 0x9d4 <u8_cKeypad_Scan+0x13e>
*/
uint8_t u8_cKeypad_Scan(void)
{
	uint8_t row=0,input;
	//loop on row
	for(row=0;row<4;row++)
     9cc:	4f 5f       	subi	r20, 0xFF	; 255
     9ce:	44 30       	cpi	r20, 0x04	; 4
     9d0:	08 f4       	brcc	.+2      	; 0x9d4 <u8_cKeypad_Scan+0x13e>
     9d2:	63 cf       	rjmp	.-314    	; 0x89a <u8_cKeypad_Scan+0x4>
			//wait till the input is gone
			while(ALL_LINES != 1);
			break;
		}
	}
	if(row == 4)
     9d4:	44 30       	cpi	r20, 0x04	; 4
     9d6:	09 f4       	brne	.+2      	; 0x9da <u8_cKeypad_Scan+0x144>
     9d8:	4f c0       	rjmp	.+158    	; 0xa78 <u8_cKeypad_Scan+0x1e2>
	{
		return 0;
	}
	//switch the rows
	switch(row)
     9da:	41 30       	cpi	r20, 0x01	; 1
     9dc:	c1 f0       	breq	.+48     	; 0xa0e <u8_cKeypad_Scan+0x178>
     9de:	28 f0       	brcs	.+10     	; 0x9ea <u8_cKeypad_Scan+0x154>
     9e0:	42 30       	cpi	r20, 0x02	; 2
     9e2:	31 f1       	breq	.+76     	; 0xa30 <u8_cKeypad_Scan+0x19a>
     9e4:	43 30       	cpi	r20, 0x03	; 3
     9e6:	a9 f1       	breq	.+106    	; 0xa52 <u8_cKeypad_Scan+0x1bc>
     9e8:	49 c0       	rjmp	.+146    	; 0xa7c <u8_cKeypad_Scan+0x1e6>
	{
		case 0://switch the input
		switch(input)
     9ea:	50 3b       	cpi	r21, 0xB0	; 176
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <u8_cKeypad_Scan+0x15a>
     9ee:	48 c0       	rjmp	.+144    	; 0xa80 <u8_cKeypad_Scan+0x1ea>
     9f0:	18 f4       	brcc	.+6      	; 0x9f8 <u8_cKeypad_Scan+0x162>
     9f2:	50 37       	cpi	r21, 0x70	; 112
     9f4:	31 f0       	breq	.+12     	; 0xa02 <u8_cKeypad_Scan+0x16c>
     9f6:	0b c0       	rjmp	.+22     	; 0xa0e <u8_cKeypad_Scan+0x178>
     9f8:	50 3d       	cpi	r21, 0xD0	; 208
     9fa:	29 f0       	breq	.+10     	; 0xa06 <u8_cKeypad_Scan+0x170>
     9fc:	50 3e       	cpi	r21, 0xE0	; 224
     9fe:	29 f0       	breq	.+10     	; 0xa0a <u8_cKeypad_Scan+0x174>
     a00:	06 c0       	rjmp	.+12     	; 0xa0e <u8_cKeypad_Scan+0x178>
		{
			case 0x70: return '/';
     a02:	8f e2       	ldi	r24, 0x2F	; 47
     a04:	08 95       	ret
			case 0xB0: return '9';
			case 0xD0: return '8';
     a06:	88 e3       	ldi	r24, 0x38	; 56
     a08:	08 95       	ret
			case 0xE0: return '7';
     a0a:	87 e3       	ldi	r24, 0x37	; 55
     a0c:	08 95       	ret
		}
		case 1://switch the input
		switch(input)
     a0e:	50 3b       	cpi	r21, 0xB0	; 176
     a10:	c9 f1       	breq	.+114    	; 0xa84 <u8_cKeypad_Scan+0x1ee>
     a12:	18 f4       	brcc	.+6      	; 0xa1a <u8_cKeypad_Scan+0x184>
     a14:	50 37       	cpi	r21, 0x70	; 112
     a16:	31 f0       	breq	.+12     	; 0xa24 <u8_cKeypad_Scan+0x18e>
     a18:	0b c0       	rjmp	.+22     	; 0xa30 <u8_cKeypad_Scan+0x19a>
     a1a:	50 3d       	cpi	r21, 0xD0	; 208
     a1c:	29 f0       	breq	.+10     	; 0xa28 <u8_cKeypad_Scan+0x192>
     a1e:	50 3e       	cpi	r21, 0xE0	; 224
     a20:	29 f0       	breq	.+10     	; 0xa2c <u8_cKeypad_Scan+0x196>
     a22:	06 c0       	rjmp	.+12     	; 0xa30 <u8_cKeypad_Scan+0x19a>
		{
			case 0x70: return '*';
     a24:	8a e2       	ldi	r24, 0x2A	; 42
     a26:	08 95       	ret
			case 0xB0: return '6';
			case 0xD0: return '5';
     a28:	85 e3       	ldi	r24, 0x35	; 53
     a2a:	08 95       	ret
			case 0xE0: return '4';
     a2c:	84 e3       	ldi	r24, 0x34	; 52
     a2e:	08 95       	ret
		}
		case 2://switch the input
		switch(input)
     a30:	50 3b       	cpi	r21, 0xB0	; 176
     a32:	51 f1       	breq	.+84     	; 0xa88 <u8_cKeypad_Scan+0x1f2>
     a34:	18 f4       	brcc	.+6      	; 0xa3c <u8_cKeypad_Scan+0x1a6>
     a36:	50 37       	cpi	r21, 0x70	; 112
     a38:	31 f0       	breq	.+12     	; 0xa46 <u8_cKeypad_Scan+0x1b0>
     a3a:	0b c0       	rjmp	.+22     	; 0xa52 <u8_cKeypad_Scan+0x1bc>
     a3c:	50 3d       	cpi	r21, 0xD0	; 208
     a3e:	29 f0       	breq	.+10     	; 0xa4a <u8_cKeypad_Scan+0x1b4>
     a40:	50 3e       	cpi	r21, 0xE0	; 224
     a42:	29 f0       	breq	.+10     	; 0xa4e <u8_cKeypad_Scan+0x1b8>
     a44:	06 c0       	rjmp	.+12     	; 0xa52 <u8_cKeypad_Scan+0x1bc>
		{
			case 0x70: return '-';
     a46:	8d e2       	ldi	r24, 0x2D	; 45
     a48:	08 95       	ret
			case 0xB0: return '3';
			case 0xD0: return '2';
     a4a:	82 e3       	ldi	r24, 0x32	; 50
     a4c:	08 95       	ret
			case 0xE0: return '1';
     a4e:	81 e3       	ldi	r24, 0x31	; 49
     a50:	08 95       	ret
		}
		case 3://switch the input
		switch(input)
     a52:	50 3b       	cpi	r21, 0xB0	; 176
     a54:	d9 f0       	breq	.+54     	; 0xa8c <u8_cKeypad_Scan+0x1f6>
     a56:	18 f4       	brcc	.+6      	; 0xa5e <u8_cKeypad_Scan+0x1c8>
     a58:	50 37       	cpi	r21, 0x70	; 112
     a5a:	31 f0       	breq	.+12     	; 0xa68 <u8_cKeypad_Scan+0x1d2>
     a5c:	07 c0       	rjmp	.+14     	; 0xa6c <u8_cKeypad_Scan+0x1d6>
     a5e:	50 3d       	cpi	r21, 0xD0	; 208
     a60:	39 f0       	breq	.+14     	; 0xa70 <u8_cKeypad_Scan+0x1da>
     a62:	50 3e       	cpi	r21, 0xE0	; 224
     a64:	39 f0       	breq	.+14     	; 0xa74 <u8_cKeypad_Scan+0x1de>
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <u8_cKeypad_Scan+0x1d6>
		{
			case 0x70: return '+';
     a68:	8b e2       	ldi	r24, 0x2B	; 43
     a6a:	08 95       	ret
			case 0xB0: return '=';
			case 0xD0: return '0';
			case 0xE0: return 'C';
		}
	}
	return 0;
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	08 95       	ret
		case 3://switch the input
		switch(input)
		{
			case 0x70: return '+';
			case 0xB0: return '=';
			case 0xD0: return '0';
     a70:	80 e3       	ldi	r24, 0x30	; 48
     a72:	08 95       	ret
			case 0xE0: return 'C';
     a74:	83 e4       	ldi	r24, 0x43	; 67
     a76:	08 95       	ret
			break;
		}
	}
	if(row == 4)
	{
		return 0;
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	08 95       	ret
			case 0xB0: return '=';
			case 0xD0: return '0';
			case 0xE0: return 'C';
		}
	}
	return 0;
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 95       	ret
	{
		case 0://switch the input
		switch(input)
		{
			case 0x70: return '/';
			case 0xB0: return '9';
     a80:	89 e3       	ldi	r24, 0x39	; 57
     a82:	08 95       	ret
		}
		case 1://switch the input
		switch(input)
		{
			case 0x70: return '*';
			case 0xB0: return '6';
     a84:	86 e3       	ldi	r24, 0x36	; 54
     a86:	08 95       	ret
		}
		case 2://switch the input
		switch(input)
		{
			case 0x70: return '-';
			case 0xB0: return '3';
     a88:	83 e3       	ldi	r24, 0x33	; 51
     a8a:	08 95       	ret
		}
		case 3://switch the input
		switch(input)
		{
			case 0x70: return '+';
			case 0xB0: return '=';
     a8c:	8d e3       	ldi	r24, 0x3D	; 61
			case 0xD0: return '0';
			case 0xE0: return 'C';
		}
	}
	return 0;
     a8e:	08 95       	ret

00000a90 <pinChange>:
*purpose       : CHANGING PIN CONDITION
*
*/
void pinChange(int a, int b)
{
	if(b == 0)
     a90:	67 2b       	or	r22, r23
     a92:	09 f0       	breq	.+2      	; 0xa96 <pinChange+0x6>
     a94:	df c0       	rjmp	.+446    	; 0xc54 <pinChange+0x1c4>
	{
		if(a == eS_PORTA0)
     a96:	00 97       	sbiw	r24, 0x00	; 0
     a98:	21 f4       	brne	.+8      	; 0xaa2 <pinChange+0x12>
		PORTA &= ~(1<<PA0);
     a9a:	8b b3       	in	r24, 0x1b	; 27
     a9c:	8e 7f       	andi	r24, 0xFE	; 254
     a9e:	8b bb       	out	0x1b, r24	; 27
     aa0:	08 95       	ret
		else if(a == eS_PORTA1)
     aa2:	81 30       	cpi	r24, 0x01	; 1
     aa4:	91 05       	cpc	r25, r1
     aa6:	21 f4       	brne	.+8      	; 0xab0 <pinChange+0x20>
		PORTA &= ~(1<<PA1);
     aa8:	8b b3       	in	r24, 0x1b	; 27
     aaa:	8d 7f       	andi	r24, 0xFD	; 253
     aac:	8b bb       	out	0x1b, r24	; 27
     aae:	08 95       	ret
		else if(a == eS_PORTA2)
     ab0:	82 30       	cpi	r24, 0x02	; 2
     ab2:	91 05       	cpc	r25, r1
     ab4:	21 f4       	brne	.+8      	; 0xabe <pinChange+0x2e>
		PORTA &= ~(1<<PA2);
     ab6:	8b b3       	in	r24, 0x1b	; 27
     ab8:	8b 7f       	andi	r24, 0xFB	; 251
     aba:	8b bb       	out	0x1b, r24	; 27
     abc:	08 95       	ret
		else if(a == eS_PORTA3)
     abe:	83 30       	cpi	r24, 0x03	; 3
     ac0:	91 05       	cpc	r25, r1
     ac2:	21 f4       	brne	.+8      	; 0xacc <pinChange+0x3c>
		PORTA &= ~(1<<PA3);
     ac4:	8b b3       	in	r24, 0x1b	; 27
     ac6:	87 7f       	andi	r24, 0xF7	; 247
     ac8:	8b bb       	out	0x1b, r24	; 27
     aca:	08 95       	ret
		else if(a == eS_PORTA4)
     acc:	84 30       	cpi	r24, 0x04	; 4
     ace:	91 05       	cpc	r25, r1
     ad0:	21 f4       	brne	.+8      	; 0xada <pinChange+0x4a>
		PORTA &= ~(1<<PA4);
     ad2:	8b b3       	in	r24, 0x1b	; 27
     ad4:	8f 7e       	andi	r24, 0xEF	; 239
     ad6:	8b bb       	out	0x1b, r24	; 27
     ad8:	08 95       	ret
		else if(a == eS_PORTA5)
     ada:	85 30       	cpi	r24, 0x05	; 5
     adc:	91 05       	cpc	r25, r1
     ade:	21 f4       	brne	.+8      	; 0xae8 <pinChange+0x58>
		PORTA &= ~(1<<PA5);
     ae0:	8b b3       	in	r24, 0x1b	; 27
     ae2:	8f 7d       	andi	r24, 0xDF	; 223
     ae4:	8b bb       	out	0x1b, r24	; 27
     ae6:	08 95       	ret
		else if(a == eS_PORTA6)
     ae8:	86 30       	cpi	r24, 0x06	; 6
     aea:	91 05       	cpc	r25, r1
     aec:	21 f4       	brne	.+8      	; 0xaf6 <pinChange+0x66>
		PORTA &= ~(1<<PA6);
     aee:	8b b3       	in	r24, 0x1b	; 27
     af0:	8f 7b       	andi	r24, 0xBF	; 191
     af2:	8b bb       	out	0x1b, r24	; 27
     af4:	08 95       	ret
		else if(a == eS_PORTA7)
     af6:	87 30       	cpi	r24, 0x07	; 7
     af8:	91 05       	cpc	r25, r1
     afa:	21 f4       	brne	.+8      	; 0xb04 <pinChange+0x74>
		PORTA &= ~(1<<PA7);
     afc:	8b b3       	in	r24, 0x1b	; 27
     afe:	8f 77       	andi	r24, 0x7F	; 127
     b00:	8b bb       	out	0x1b, r24	; 27
     b02:	08 95       	ret
		else if(a == eS_PORTB0)
     b04:	8a 30       	cpi	r24, 0x0A	; 10
     b06:	91 05       	cpc	r25, r1
     b08:	21 f4       	brne	.+8      	; 0xb12 <pinChange+0x82>
		PORTB &= ~(1<<PB0);
     b0a:	88 b3       	in	r24, 0x18	; 24
     b0c:	8e 7f       	andi	r24, 0xFE	; 254
     b0e:	88 bb       	out	0x18, r24	; 24
     b10:	08 95       	ret
		else if(a == eS_PORTB1)
     b12:	8b 30       	cpi	r24, 0x0B	; 11
     b14:	91 05       	cpc	r25, r1
     b16:	21 f4       	brne	.+8      	; 0xb20 <pinChange+0x90>
		PORTB &= ~(1<<PB1);
     b18:	88 b3       	in	r24, 0x18	; 24
     b1a:	8d 7f       	andi	r24, 0xFD	; 253
     b1c:	88 bb       	out	0x18, r24	; 24
     b1e:	08 95       	ret
		else if(a == eS_PORTB2)
     b20:	8c 30       	cpi	r24, 0x0C	; 12
     b22:	91 05       	cpc	r25, r1
     b24:	21 f4       	brne	.+8      	; 0xb2e <pinChange+0x9e>
		PORTB &= ~(1<<PB2);
     b26:	88 b3       	in	r24, 0x18	; 24
     b28:	8b 7f       	andi	r24, 0xFB	; 251
     b2a:	88 bb       	out	0x18, r24	; 24
     b2c:	08 95       	ret
		else if(a == eS_PORTB3)
     b2e:	8d 30       	cpi	r24, 0x0D	; 13
     b30:	91 05       	cpc	r25, r1
     b32:	21 f4       	brne	.+8      	; 0xb3c <pinChange+0xac>
		PORTB &= ~(1<<PB3);
     b34:	88 b3       	in	r24, 0x18	; 24
     b36:	87 7f       	andi	r24, 0xF7	; 247
     b38:	88 bb       	out	0x18, r24	; 24
     b3a:	08 95       	ret
		else if(a == eS_PORTB4)
     b3c:	8e 30       	cpi	r24, 0x0E	; 14
     b3e:	91 05       	cpc	r25, r1
     b40:	21 f4       	brne	.+8      	; 0xb4a <pinChange+0xba>
		PORTB &= ~(1<<PB4);
     b42:	88 b3       	in	r24, 0x18	; 24
     b44:	8f 7e       	andi	r24, 0xEF	; 239
     b46:	88 bb       	out	0x18, r24	; 24
     b48:	08 95       	ret
		else if(a == eS_PORTB5)
     b4a:	8f 30       	cpi	r24, 0x0F	; 15
     b4c:	91 05       	cpc	r25, r1
     b4e:	21 f4       	brne	.+8      	; 0xb58 <pinChange+0xc8>
		PORTB &= ~(1<<PB5);
     b50:	88 b3       	in	r24, 0x18	; 24
     b52:	8f 7d       	andi	r24, 0xDF	; 223
     b54:	88 bb       	out	0x18, r24	; 24
     b56:	08 95       	ret
		else if(a == eS_PORTB6)
     b58:	80 31       	cpi	r24, 0x10	; 16
     b5a:	91 05       	cpc	r25, r1
     b5c:	21 f4       	brne	.+8      	; 0xb66 <pinChange+0xd6>
		PORTB &= ~(1<<PB6);
     b5e:	88 b3       	in	r24, 0x18	; 24
     b60:	8f 7b       	andi	r24, 0xBF	; 191
     b62:	88 bb       	out	0x18, r24	; 24
     b64:	08 95       	ret
		else if(a == eS_PORTB7)
     b66:	81 31       	cpi	r24, 0x11	; 17
     b68:	91 05       	cpc	r25, r1
     b6a:	21 f4       	brne	.+8      	; 0xb74 <pinChange+0xe4>
		PORTB &= ~(1<<PB7);
     b6c:	88 b3       	in	r24, 0x18	; 24
     b6e:	8f 77       	andi	r24, 0x7F	; 127
     b70:	88 bb       	out	0x18, r24	; 24
     b72:	08 95       	ret
		else if(a == eS_PORTC0)
     b74:	84 31       	cpi	r24, 0x14	; 20
     b76:	91 05       	cpc	r25, r1
     b78:	21 f4       	brne	.+8      	; 0xb82 <pinChange+0xf2>
		PORTC &= ~(1<<PC0);
     b7a:	85 b3       	in	r24, 0x15	; 21
     b7c:	8e 7f       	andi	r24, 0xFE	; 254
     b7e:	85 bb       	out	0x15, r24	; 21
     b80:	08 95       	ret
		else if(a == eS_PORTC1)
     b82:	85 31       	cpi	r24, 0x15	; 21
     b84:	91 05       	cpc	r25, r1
     b86:	21 f4       	brne	.+8      	; 0xb90 <pinChange+0x100>
		PORTC &= ~(1<<PC1);
     b88:	85 b3       	in	r24, 0x15	; 21
     b8a:	8d 7f       	andi	r24, 0xFD	; 253
     b8c:	85 bb       	out	0x15, r24	; 21
     b8e:	08 95       	ret
		else if(a == eS_PORTC2)
     b90:	86 31       	cpi	r24, 0x16	; 22
     b92:	91 05       	cpc	r25, r1
     b94:	21 f4       	brne	.+8      	; 0xb9e <pinChange+0x10e>
		PORTC &= ~(1<<PC2);
     b96:	85 b3       	in	r24, 0x15	; 21
     b98:	8b 7f       	andi	r24, 0xFB	; 251
     b9a:	85 bb       	out	0x15, r24	; 21
     b9c:	08 95       	ret
		else if(a == eS_PORTC3)
     b9e:	87 31       	cpi	r24, 0x17	; 23
     ba0:	91 05       	cpc	r25, r1
     ba2:	21 f4       	brne	.+8      	; 0xbac <pinChange+0x11c>
		PORTC &= ~(1<<PC3);
     ba4:	85 b3       	in	r24, 0x15	; 21
     ba6:	87 7f       	andi	r24, 0xF7	; 247
     ba8:	85 bb       	out	0x15, r24	; 21
     baa:	08 95       	ret
		else if(a == eS_PORTC4)
     bac:	88 31       	cpi	r24, 0x18	; 24
     bae:	91 05       	cpc	r25, r1
     bb0:	21 f4       	brne	.+8      	; 0xbba <pinChange+0x12a>
		PORTC &= ~(1<<PC4);
     bb2:	85 b3       	in	r24, 0x15	; 21
     bb4:	8f 7e       	andi	r24, 0xEF	; 239
     bb6:	85 bb       	out	0x15, r24	; 21
     bb8:	08 95       	ret
		else if(a == eS_PORTC5)
     bba:	89 31       	cpi	r24, 0x19	; 25
     bbc:	91 05       	cpc	r25, r1
     bbe:	21 f4       	brne	.+8      	; 0xbc8 <pinChange+0x138>
		PORTC &= ~(1<<PC5);
     bc0:	85 b3       	in	r24, 0x15	; 21
     bc2:	8f 7d       	andi	r24, 0xDF	; 223
     bc4:	85 bb       	out	0x15, r24	; 21
     bc6:	08 95       	ret
		else if(a == eS_PORTC6)
     bc8:	8a 31       	cpi	r24, 0x1A	; 26
     bca:	91 05       	cpc	r25, r1
     bcc:	21 f4       	brne	.+8      	; 0xbd6 <pinChange+0x146>
		PORTC &= ~(1<<PC6);
     bce:	85 b3       	in	r24, 0x15	; 21
     bd0:	8f 7b       	andi	r24, 0xBF	; 191
     bd2:	85 bb       	out	0x15, r24	; 21
     bd4:	08 95       	ret
		else if(a == eS_PORTC7)
     bd6:	8b 31       	cpi	r24, 0x1B	; 27
     bd8:	91 05       	cpc	r25, r1
     bda:	21 f4       	brne	.+8      	; 0xbe4 <pinChange+0x154>
		PORTC &= ~(1<<PC7);
     bdc:	85 b3       	in	r24, 0x15	; 21
     bde:	8f 77       	andi	r24, 0x7F	; 127
     be0:	85 bb       	out	0x15, r24	; 21
     be2:	08 95       	ret
		else if(a == eS_PORTD0)
     be4:	8e 31       	cpi	r24, 0x1E	; 30
     be6:	91 05       	cpc	r25, r1
     be8:	21 f4       	brne	.+8      	; 0xbf2 <pinChange+0x162>
		PORTD &= ~(1<<PD0);
     bea:	82 b3       	in	r24, 0x12	; 18
     bec:	8e 7f       	andi	r24, 0xFE	; 254
     bee:	82 bb       	out	0x12, r24	; 18
     bf0:	08 95       	ret
		else if(a == eS_PORTD1)
     bf2:	8f 31       	cpi	r24, 0x1F	; 31
     bf4:	91 05       	cpc	r25, r1
     bf6:	21 f4       	brne	.+8      	; 0xc00 <pinChange+0x170>
		PORTD &= ~(1<<PD1);
     bf8:	82 b3       	in	r24, 0x12	; 18
     bfa:	8d 7f       	andi	r24, 0xFD	; 253
     bfc:	82 bb       	out	0x12, r24	; 18
     bfe:	08 95       	ret
		else if(a == eS_PORTD2)
     c00:	80 32       	cpi	r24, 0x20	; 32
     c02:	91 05       	cpc	r25, r1
     c04:	21 f4       	brne	.+8      	; 0xc0e <pinChange+0x17e>
		PORTD &= ~(1<<PD2);
     c06:	82 b3       	in	r24, 0x12	; 18
     c08:	8b 7f       	andi	r24, 0xFB	; 251
     c0a:	82 bb       	out	0x12, r24	; 18
     c0c:	08 95       	ret
		else if(a == eS_PORTD3)
     c0e:	81 32       	cpi	r24, 0x21	; 33
     c10:	91 05       	cpc	r25, r1
     c12:	21 f4       	brne	.+8      	; 0xc1c <pinChange+0x18c>
		PORTD &= ~(1<<PD3);
     c14:	82 b3       	in	r24, 0x12	; 18
     c16:	87 7f       	andi	r24, 0xF7	; 247
     c18:	82 bb       	out	0x12, r24	; 18
     c1a:	08 95       	ret
		else if(a == eS_PORTD4)
     c1c:	82 32       	cpi	r24, 0x22	; 34
     c1e:	91 05       	cpc	r25, r1
     c20:	21 f4       	brne	.+8      	; 0xc2a <pinChange+0x19a>
		PORTD &= ~(1<<PD4);
     c22:	82 b3       	in	r24, 0x12	; 18
     c24:	8f 7e       	andi	r24, 0xEF	; 239
     c26:	82 bb       	out	0x12, r24	; 18
     c28:	08 95       	ret
		else if(a == eS_PORTD5)
     c2a:	83 32       	cpi	r24, 0x23	; 35
     c2c:	91 05       	cpc	r25, r1
     c2e:	21 f4       	brne	.+8      	; 0xc38 <pinChange+0x1a8>
		PORTD &= ~(1<<PD5);
     c30:	82 b3       	in	r24, 0x12	; 18
     c32:	8f 7d       	andi	r24, 0xDF	; 223
     c34:	82 bb       	out	0x12, r24	; 18
     c36:	08 95       	ret
		else if(a == eS_PORTD6)
     c38:	84 32       	cpi	r24, 0x24	; 36
     c3a:	91 05       	cpc	r25, r1
     c3c:	21 f4       	brne	.+8      	; 0xc46 <pinChange+0x1b6>
		PORTD &= ~(1<<PD6);
     c3e:	82 b3       	in	r24, 0x12	; 18
     c40:	8f 7b       	andi	r24, 0xBF	; 191
     c42:	82 bb       	out	0x12, r24	; 18
     c44:	08 95       	ret
		else if(a == eS_PORTD7)
     c46:	85 97       	sbiw	r24, 0x25	; 37
     c48:	09 f0       	breq	.+2      	; 0xc4c <pinChange+0x1bc>
     c4a:	e1 c0       	rjmp	.+450    	; 0xe0e <pinChange+0x37e>
		PORTD &= ~(1<<PD7);
     c4c:	82 b3       	in	r24, 0x12	; 18
     c4e:	8f 77       	andi	r24, 0x7F	; 127
     c50:	82 bb       	out	0x12, r24	; 18
     c52:	08 95       	ret
	}
	else
	{
		if(a == eS_PORTA0)
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	21 f4       	brne	.+8      	; 0xc60 <pinChange+0x1d0>
		PORTA |= (1<<PA0);
     c58:	8b b3       	in	r24, 0x1b	; 27
     c5a:	81 60       	ori	r24, 0x01	; 1
     c5c:	8b bb       	out	0x1b, r24	; 27
     c5e:	08 95       	ret
		else if(a == eS_PORTA1)
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	91 05       	cpc	r25, r1
     c64:	21 f4       	brne	.+8      	; 0xc6e <pinChange+0x1de>
		PORTA |= (1<<PA1);
     c66:	8b b3       	in	r24, 0x1b	; 27
     c68:	82 60       	ori	r24, 0x02	; 2
     c6a:	8b bb       	out	0x1b, r24	; 27
     c6c:	08 95       	ret
		else if(a == eS_PORTA2)
     c6e:	82 30       	cpi	r24, 0x02	; 2
     c70:	91 05       	cpc	r25, r1
     c72:	21 f4       	brne	.+8      	; 0xc7c <pinChange+0x1ec>
		PORTA |= (1<<PA2);
     c74:	8b b3       	in	r24, 0x1b	; 27
     c76:	84 60       	ori	r24, 0x04	; 4
     c78:	8b bb       	out	0x1b, r24	; 27
     c7a:	08 95       	ret
		else if(a == eS_PORTA3)
     c7c:	83 30       	cpi	r24, 0x03	; 3
     c7e:	91 05       	cpc	r25, r1
     c80:	21 f4       	brne	.+8      	; 0xc8a <pinChange+0x1fa>
		PORTA |= (1<<PA3);
     c82:	8b b3       	in	r24, 0x1b	; 27
     c84:	88 60       	ori	r24, 0x08	; 8
     c86:	8b bb       	out	0x1b, r24	; 27
     c88:	08 95       	ret
		else if(a == eS_PORTA4)
     c8a:	84 30       	cpi	r24, 0x04	; 4
     c8c:	91 05       	cpc	r25, r1
     c8e:	21 f4       	brne	.+8      	; 0xc98 <pinChange+0x208>
		PORTA |= (1<<PA4);
     c90:	8b b3       	in	r24, 0x1b	; 27
     c92:	80 61       	ori	r24, 0x10	; 16
     c94:	8b bb       	out	0x1b, r24	; 27
     c96:	08 95       	ret
		else if(a == eS_PORTA5)
     c98:	85 30       	cpi	r24, 0x05	; 5
     c9a:	91 05       	cpc	r25, r1
     c9c:	21 f4       	brne	.+8      	; 0xca6 <pinChange+0x216>
		PORTA |= (1<<PA5);
     c9e:	8b b3       	in	r24, 0x1b	; 27
     ca0:	80 62       	ori	r24, 0x20	; 32
     ca2:	8b bb       	out	0x1b, r24	; 27
     ca4:	08 95       	ret
		else if(a == eS_PORTA6)
     ca6:	86 30       	cpi	r24, 0x06	; 6
     ca8:	91 05       	cpc	r25, r1
     caa:	21 f4       	brne	.+8      	; 0xcb4 <pinChange+0x224>
		PORTA |= (1<<PA6);
     cac:	8b b3       	in	r24, 0x1b	; 27
     cae:	80 64       	ori	r24, 0x40	; 64
     cb0:	8b bb       	out	0x1b, r24	; 27
     cb2:	08 95       	ret
		else if(a == eS_PORTA7)
     cb4:	87 30       	cpi	r24, 0x07	; 7
     cb6:	91 05       	cpc	r25, r1
     cb8:	21 f4       	brne	.+8      	; 0xcc2 <pinChange+0x232>
		PORTA |= (1<<PA7);
     cba:	8b b3       	in	r24, 0x1b	; 27
     cbc:	80 68       	ori	r24, 0x80	; 128
     cbe:	8b bb       	out	0x1b, r24	; 27
     cc0:	08 95       	ret
		else if(a == eS_PORTB0)
     cc2:	8a 30       	cpi	r24, 0x0A	; 10
     cc4:	91 05       	cpc	r25, r1
     cc6:	21 f4       	brne	.+8      	; 0xcd0 <pinChange+0x240>
		PORTB |= (1<<PB0);
     cc8:	88 b3       	in	r24, 0x18	; 24
     cca:	81 60       	ori	r24, 0x01	; 1
     ccc:	88 bb       	out	0x18, r24	; 24
     cce:	08 95       	ret
		else if(a == eS_PORTB1)
     cd0:	8b 30       	cpi	r24, 0x0B	; 11
     cd2:	91 05       	cpc	r25, r1
     cd4:	21 f4       	brne	.+8      	; 0xcde <pinChange+0x24e>
		PORTB |= (1<<PB1);
     cd6:	88 b3       	in	r24, 0x18	; 24
     cd8:	82 60       	ori	r24, 0x02	; 2
     cda:	88 bb       	out	0x18, r24	; 24
     cdc:	08 95       	ret
		else if(a == eS_PORTB2)
     cde:	8c 30       	cpi	r24, 0x0C	; 12
     ce0:	91 05       	cpc	r25, r1
     ce2:	21 f4       	brne	.+8      	; 0xcec <pinChange+0x25c>
		PORTB |= (1<<PB2);
     ce4:	88 b3       	in	r24, 0x18	; 24
     ce6:	84 60       	ori	r24, 0x04	; 4
     ce8:	88 bb       	out	0x18, r24	; 24
     cea:	08 95       	ret
		else if(a == eS_PORTB3)
     cec:	8d 30       	cpi	r24, 0x0D	; 13
     cee:	91 05       	cpc	r25, r1
     cf0:	21 f4       	brne	.+8      	; 0xcfa <pinChange+0x26a>
		PORTB |= (1<<PB3);
     cf2:	88 b3       	in	r24, 0x18	; 24
     cf4:	88 60       	ori	r24, 0x08	; 8
     cf6:	88 bb       	out	0x18, r24	; 24
     cf8:	08 95       	ret
		else if(a == eS_PORTB4)
     cfa:	8e 30       	cpi	r24, 0x0E	; 14
     cfc:	91 05       	cpc	r25, r1
     cfe:	21 f4       	brne	.+8      	; 0xd08 <pinChange+0x278>
		PORTB |= (1<<PB4);
     d00:	88 b3       	in	r24, 0x18	; 24
     d02:	80 61       	ori	r24, 0x10	; 16
     d04:	88 bb       	out	0x18, r24	; 24
     d06:	08 95       	ret
		else if(a == eS_PORTB5)
     d08:	8f 30       	cpi	r24, 0x0F	; 15
     d0a:	91 05       	cpc	r25, r1
     d0c:	21 f4       	brne	.+8      	; 0xd16 <pinChange+0x286>
		PORTB |= (1<<PB5);
     d0e:	88 b3       	in	r24, 0x18	; 24
     d10:	80 62       	ori	r24, 0x20	; 32
     d12:	88 bb       	out	0x18, r24	; 24
     d14:	08 95       	ret
		else if(a == eS_PORTB6)
     d16:	80 31       	cpi	r24, 0x10	; 16
     d18:	91 05       	cpc	r25, r1
     d1a:	21 f4       	brne	.+8      	; 0xd24 <pinChange+0x294>
		PORTB |= (1<<PB6);
     d1c:	88 b3       	in	r24, 0x18	; 24
     d1e:	80 64       	ori	r24, 0x40	; 64
     d20:	88 bb       	out	0x18, r24	; 24
     d22:	08 95       	ret
		else if(a == eS_PORTB7)
     d24:	81 31       	cpi	r24, 0x11	; 17
     d26:	91 05       	cpc	r25, r1
     d28:	21 f4       	brne	.+8      	; 0xd32 <pinChange+0x2a2>
		PORTB |= (1<<PB7);
     d2a:	88 b3       	in	r24, 0x18	; 24
     d2c:	80 68       	ori	r24, 0x80	; 128
     d2e:	88 bb       	out	0x18, r24	; 24
     d30:	08 95       	ret
		else if(a == eS_PORTC0)
     d32:	84 31       	cpi	r24, 0x14	; 20
     d34:	91 05       	cpc	r25, r1
     d36:	21 f4       	brne	.+8      	; 0xd40 <pinChange+0x2b0>
		PORTC |= (1<<PC0);
     d38:	85 b3       	in	r24, 0x15	; 21
     d3a:	81 60       	ori	r24, 0x01	; 1
     d3c:	85 bb       	out	0x15, r24	; 21
     d3e:	08 95       	ret
		else if(a == eS_PORTC1)
     d40:	85 31       	cpi	r24, 0x15	; 21
     d42:	91 05       	cpc	r25, r1
     d44:	21 f4       	brne	.+8      	; 0xd4e <pinChange+0x2be>
		PORTC |= (1<<PC1);
     d46:	85 b3       	in	r24, 0x15	; 21
     d48:	82 60       	ori	r24, 0x02	; 2
     d4a:	85 bb       	out	0x15, r24	; 21
     d4c:	08 95       	ret
		else if(a == eS_PORTC2)
     d4e:	86 31       	cpi	r24, 0x16	; 22
     d50:	91 05       	cpc	r25, r1
     d52:	21 f4       	brne	.+8      	; 0xd5c <pinChange+0x2cc>
		PORTC |= (1<<PC2);
     d54:	85 b3       	in	r24, 0x15	; 21
     d56:	84 60       	ori	r24, 0x04	; 4
     d58:	85 bb       	out	0x15, r24	; 21
     d5a:	08 95       	ret
		else if(a == eS_PORTC3)
     d5c:	87 31       	cpi	r24, 0x17	; 23
     d5e:	91 05       	cpc	r25, r1
     d60:	21 f4       	brne	.+8      	; 0xd6a <pinChange+0x2da>
		PORTC |= (1<<PC3);
     d62:	85 b3       	in	r24, 0x15	; 21
     d64:	88 60       	ori	r24, 0x08	; 8
     d66:	85 bb       	out	0x15, r24	; 21
     d68:	08 95       	ret
		else if(a == eS_PORTC4)
     d6a:	88 31       	cpi	r24, 0x18	; 24
     d6c:	91 05       	cpc	r25, r1
     d6e:	21 f4       	brne	.+8      	; 0xd78 <pinChange+0x2e8>
		PORTC |= (1<<PC4);
     d70:	85 b3       	in	r24, 0x15	; 21
     d72:	80 61       	ori	r24, 0x10	; 16
     d74:	85 bb       	out	0x15, r24	; 21
     d76:	08 95       	ret
		else if(a == eS_PORTC5)
     d78:	89 31       	cpi	r24, 0x19	; 25
     d7a:	91 05       	cpc	r25, r1
     d7c:	21 f4       	brne	.+8      	; 0xd86 <pinChange+0x2f6>
		PORTC |= (1<<PC5);
     d7e:	85 b3       	in	r24, 0x15	; 21
     d80:	80 62       	ori	r24, 0x20	; 32
     d82:	85 bb       	out	0x15, r24	; 21
     d84:	08 95       	ret
		else if(a == eS_PORTC6)
     d86:	8a 31       	cpi	r24, 0x1A	; 26
     d88:	91 05       	cpc	r25, r1
     d8a:	21 f4       	brne	.+8      	; 0xd94 <pinChange+0x304>
		PORTC |= (1<<PC6);
     d8c:	85 b3       	in	r24, 0x15	; 21
     d8e:	80 64       	ori	r24, 0x40	; 64
     d90:	85 bb       	out	0x15, r24	; 21
     d92:	08 95       	ret
		else if(a == eS_PORTC7)
     d94:	8b 31       	cpi	r24, 0x1B	; 27
     d96:	91 05       	cpc	r25, r1
     d98:	21 f4       	brne	.+8      	; 0xda2 <pinChange+0x312>
		PORTC |= (1<<PC7);
     d9a:	85 b3       	in	r24, 0x15	; 21
     d9c:	80 68       	ori	r24, 0x80	; 128
     d9e:	85 bb       	out	0x15, r24	; 21
     da0:	08 95       	ret
		else if(a == eS_PORTD0)
     da2:	8e 31       	cpi	r24, 0x1E	; 30
     da4:	91 05       	cpc	r25, r1
     da6:	21 f4       	brne	.+8      	; 0xdb0 <pinChange+0x320>
		PORTD |= (1<<PD0);
     da8:	82 b3       	in	r24, 0x12	; 18
     daa:	81 60       	ori	r24, 0x01	; 1
     dac:	82 bb       	out	0x12, r24	; 18
     dae:	08 95       	ret
		else if(a == eS_PORTD1)
     db0:	8f 31       	cpi	r24, 0x1F	; 31
     db2:	91 05       	cpc	r25, r1
     db4:	21 f4       	brne	.+8      	; 0xdbe <pinChange+0x32e>
		PORTD |= (1<<PD1);
     db6:	82 b3       	in	r24, 0x12	; 18
     db8:	82 60       	ori	r24, 0x02	; 2
     dba:	82 bb       	out	0x12, r24	; 18
     dbc:	08 95       	ret
		else if(a == eS_PORTD2)
     dbe:	80 32       	cpi	r24, 0x20	; 32
     dc0:	91 05       	cpc	r25, r1
     dc2:	21 f4       	brne	.+8      	; 0xdcc <pinChange+0x33c>
		PORTD |= (1<<PD2);
     dc4:	82 b3       	in	r24, 0x12	; 18
     dc6:	84 60       	ori	r24, 0x04	; 4
     dc8:	82 bb       	out	0x12, r24	; 18
     dca:	08 95       	ret
		else if(a == eS_PORTD3)
     dcc:	81 32       	cpi	r24, 0x21	; 33
     dce:	91 05       	cpc	r25, r1
     dd0:	21 f4       	brne	.+8      	; 0xdda <pinChange+0x34a>
		PORTD |= (1<<PD3);
     dd2:	82 b3       	in	r24, 0x12	; 18
     dd4:	88 60       	ori	r24, 0x08	; 8
     dd6:	82 bb       	out	0x12, r24	; 18
     dd8:	08 95       	ret
		else if(a == eS_PORTD4)
     dda:	82 32       	cpi	r24, 0x22	; 34
     ddc:	91 05       	cpc	r25, r1
     dde:	21 f4       	brne	.+8      	; 0xde8 <pinChange+0x358>
		PORTD |= (1<<PD4);
     de0:	82 b3       	in	r24, 0x12	; 18
     de2:	80 61       	ori	r24, 0x10	; 16
     de4:	82 bb       	out	0x12, r24	; 18
     de6:	08 95       	ret
		else if(a == eS_PORTD5)
     de8:	83 32       	cpi	r24, 0x23	; 35
     dea:	91 05       	cpc	r25, r1
     dec:	21 f4       	brne	.+8      	; 0xdf6 <pinChange+0x366>
		PORTD |= (1<<PD5);
     dee:	82 b3       	in	r24, 0x12	; 18
     df0:	80 62       	ori	r24, 0x20	; 32
     df2:	82 bb       	out	0x12, r24	; 18
     df4:	08 95       	ret
		else if(a == eS_PORTD6)
     df6:	84 32       	cpi	r24, 0x24	; 36
     df8:	91 05       	cpc	r25, r1
     dfa:	21 f4       	brne	.+8      	; 0xe04 <pinChange+0x374>
		PORTD |= (1<<PD6);
     dfc:	82 b3       	in	r24, 0x12	; 18
     dfe:	80 64       	ori	r24, 0x40	; 64
     e00:	82 bb       	out	0x12, r24	; 18
     e02:	08 95       	ret
		else if(a == eS_PORTD7)
     e04:	85 97       	sbiw	r24, 0x25	; 37
     e06:	19 f4       	brne	.+6      	; 0xe0e <pinChange+0x37e>
		PORTD |= (1<<PD7);
     e08:	82 b3       	in	r24, 0x12	; 18
     e0a:	80 68       	ori	r24, 0x80	; 128
     e0c:	82 bb       	out	0x12, r24	; 18
     e0e:	08 95       	ret

00000e10 <Lcd4_Port>:
*return		   : VOID
*purpose       : CHANGING PIN CONDITION
*
*/
void Lcd4_Port(unsigned char UN_CH_LCD_VAR1)
{
     e10:	cf 93       	push	r28
     e12:	c8 2f       	mov	r28, r24
	if(UN_CH_LCD_VAR1 & 1)
     e14:	80 ff       	sbrs	r24, 0
     e16:	07 c0       	rjmp	.+14     	; 0xe26 <Lcd4_Port+0x16>
	pinChange(D4,1);
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 48 05 	call	0xa90	; 0xa90 <pinChange>
     e24:	06 c0       	rjmp	.+12     	; 0xe32 <Lcd4_Port+0x22>
	else
	pinChange(D4,0);
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 48 05 	call	0xa90	; 0xa90 <pinChange>
	
	if(UN_CH_LCD_VAR1 & 2)
     e32:	c1 ff       	sbrs	r28, 1
     e34:	07 c0       	rjmp	.+14     	; 0xe44 <Lcd4_Port+0x34>
	pinChange(D5,1);
     e36:	61 e0       	ldi	r22, 0x01	; 1
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 48 05 	call	0xa90	; 0xa90 <pinChange>
     e42:	06 c0       	rjmp	.+12     	; 0xe50 <Lcd4_Port+0x40>
	else
	pinChange(D5,0);
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	0e 94 48 05 	call	0xa90	; 0xa90 <pinChange>
	
	if(UN_CH_LCD_VAR1 & 4)
     e50:	c2 ff       	sbrs	r28, 2
     e52:	07 c0       	rjmp	.+14     	; 0xe62 <Lcd4_Port+0x52>
	pinChange(D6,1);
     e54:	61 e0       	ldi	r22, 0x01	; 1
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 48 05 	call	0xa90	; 0xa90 <pinChange>
     e60:	06 c0       	rjmp	.+12     	; 0xe6e <Lcd4_Port+0x5e>
	else
	pinChange(D6,0);
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 48 05 	call	0xa90	; 0xa90 <pinChange>
	
	if(UN_CH_LCD_VAR1 & 8)
     e6e:	c3 ff       	sbrs	r28, 3
     e70:	07 c0       	rjmp	.+14     	; 0xe80 <Lcd4_Port+0x70>
	pinChange(D7,1);
     e72:	61 e0       	ldi	r22, 0x01	; 1
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 48 05 	call	0xa90	; 0xa90 <pinChange>
     e7e:	06 c0       	rjmp	.+12     	; 0xe8c <Lcd4_Port+0x7c>
	else
	pinChange(D7,0);
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	70 e0       	ldi	r23, 0x00	; 0
     e84:	83 e0       	ldi	r24, 0x03	; 3
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 48 05 	call	0xa90	; 0xa90 <pinChange>
}
     e8c:	cf 91       	pop	r28
     e8e:	08 95       	ret

00000e90 <Lcd4_Cmd>:
*return		   : void
*purpose       : sets the RS=0 , EN =1 , EN=0
*
*/
void Lcd4_Cmd(unsigned char UN_CH_LCD_VAR1)
{
     e90:	cf 93       	push	r28
     e92:	c8 2f       	mov	r28, r24
	pinChange(RS,0);             // => RS = 0
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	70 e0       	ldi	r23, 0x00	; 0
     e98:	84 e0       	ldi	r24, 0x04	; 4
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 48 05 	call	0xa90	; 0xa90 <pinChange>
	Lcd4_Port(UN_CH_LCD_VAR1);
     ea0:	8c 2f       	mov	r24, r28
     ea2:	0e 94 08 07 	call	0xe10	; 0xe10 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	70 e0       	ldi	r23, 0x00	; 0
     eaa:	86 e0       	ldi	r24, 0x06	; 6
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 48 05 	call	0xa90	; 0xa90 <pinChange>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     eb2:	8f ec       	ldi	r24, 0xCF	; 207
     eb4:	97 e0       	ldi	r25, 0x07	; 7
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <Lcd4_Cmd+0x26>
     eba:	00 c0       	rjmp	.+0      	; 0xebc <Lcd4_Cmd+0x2c>
     ebc:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	86 e0       	ldi	r24, 0x06	; 6
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 48 05 	call	0xa90	; 0xa90 <pinChange>
     eca:	8f ec       	ldi	r24, 0xCF	; 207
     ecc:	97 e0       	ldi	r25, 0x07	; 7
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <Lcd4_Cmd+0x3e>
     ed2:	00 c0       	rjmp	.+0      	; 0xed4 <Lcd4_Cmd+0x44>
     ed4:	00 00       	nop
	_delay_ms(1);
}
     ed6:	cf 91       	pop	r28
     ed8:	08 95       	ret

00000eda <Lcd4_Clear>:
*purpose       : CLEARS LCD
*
*/
void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	0e 94 48 07 	call	0xe90	; 0xe90 <Lcd4_Cmd>
	Lcd4_Cmd(1);
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	0e 94 48 07 	call	0xe90	; 0xe90 <Lcd4_Cmd>
     ee6:	08 95       	ret

00000ee8 <Lcd4_Set_Cursor>:
*return		   : void
*purpose       : Sets the cursor position
*
*/
void Lcd4_Set_Cursor(unsigned char UN_CH_LCD_ROW, unsigned char UN_CH_LCD_COLUMN)
{
     ee8:	cf 93       	push	r28
	unsigned char UN_CH_LCD_VAR2 = 0 ,UN_CH_LCD_VAR3 = 0 ,UN_CH_LCD_VAR4 = 0 ;
	if(UN_CH_LCD_ROW == 1)
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	61 f4       	brne	.+24     	; 0xf06 <Lcd4_Set_Cursor+0x1e>
	{
		UN_CH_LCD_VAR2 = 0x80 + UN_CH_LCD_COLUMN;
     eee:	80 e8       	ldi	r24, 0x80	; 128
     ef0:	86 0f       	add	r24, r22
		UN_CH_LCD_VAR3 = UN_CH_LCD_VAR2>>4;
		UN_CH_LCD_VAR4 = (0x80+UN_CH_LCD_COLUMN) & 0x0F;
     ef2:	c6 2f       	mov	r28, r22
     ef4:	cf 70       	andi	r28, 0x0F	; 15
		Lcd4_Cmd(UN_CH_LCD_VAR3);
     ef6:	82 95       	swap	r24
     ef8:	8f 70       	andi	r24, 0x0F	; 15
     efa:	0e 94 48 07 	call	0xe90	; 0xe90 <Lcd4_Cmd>
		Lcd4_Cmd(UN_CH_LCD_VAR4);
     efe:	8c 2f       	mov	r24, r28
     f00:	0e 94 48 07 	call	0xe90	; 0xe90 <Lcd4_Cmd>
     f04:	0d c0       	rjmp	.+26     	; 0xf20 <Lcd4_Set_Cursor+0x38>
	}
	else if(UN_CH_LCD_ROW == 2)
     f06:	82 30       	cpi	r24, 0x02	; 2
     f08:	59 f4       	brne	.+22     	; 0xf20 <Lcd4_Set_Cursor+0x38>
	{
		UN_CH_LCD_VAR2 = 0xC0 + UN_CH_LCD_COLUMN;
     f0a:	80 ec       	ldi	r24, 0xC0	; 192
     f0c:	86 0f       	add	r24, r22
		UN_CH_LCD_VAR3 = UN_CH_LCD_VAR2>>4;
		UN_CH_LCD_VAR4 = (0xC0+UN_CH_LCD_COLUMN) & 0x0F;
     f0e:	c6 2f       	mov	r28, r22
     f10:	cf 70       	andi	r28, 0x0F	; 15
		Lcd4_Cmd(UN_CH_LCD_VAR3);
     f12:	82 95       	swap	r24
     f14:	8f 70       	andi	r24, 0x0F	; 15
     f16:	0e 94 48 07 	call	0xe90	; 0xe90 <Lcd4_Cmd>
		Lcd4_Cmd(UN_CH_LCD_VAR4);
     f1a:	8c 2f       	mov	r24, r28
     f1c:	0e 94 48 07 	call	0xe90	; 0xe90 <Lcd4_Cmd>
	}
}
     f20:	cf 91       	pop	r28
     f22:	08 95       	ret

00000f24 <Lcd4_Init>:
*purpose       : initialization of LCD
*
*/
void Lcd4_Init()
{
	Lcd4_Port(0x00);
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	0e 94 08 07 	call	0xe10	; 0xe10 <Lcd4_Port>
     f2a:	8f e3       	ldi	r24, 0x3F	; 63
     f2c:	9c e9       	ldi	r25, 0x9C	; 156
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <Lcd4_Init+0xa>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <Lcd4_Init+0x10>
     f34:	00 00       	nop
	_delay_ms(20);
	Lcd4_Cmd(0x03);
     f36:	83 e0       	ldi	r24, 0x03	; 3
     f38:	0e 94 48 07 	call	0xe90	; 0xe90 <Lcd4_Cmd>
     f3c:	8f e0       	ldi	r24, 0x0F	; 15
     f3e:	97 e2       	ldi	r25, 0x27	; 39
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <Lcd4_Init+0x1c>
     f44:	00 c0       	rjmp	.+0      	; 0xf46 <Lcd4_Init+0x22>
     f46:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     f48:	83 e0       	ldi	r24, 0x03	; 3
     f4a:	0e 94 48 07 	call	0xe90	; 0xe90 <Lcd4_Cmd>
     f4e:	8f ee       	ldi	r24, 0xEF	; 239
     f50:	95 e5       	ldi	r25, 0x55	; 85
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	f1 f7       	brne	.-4      	; 0xf52 <Lcd4_Init+0x2e>
     f56:	00 c0       	rjmp	.+0      	; 0xf58 <Lcd4_Init+0x34>
     f58:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     f5a:	83 e0       	ldi	r24, 0x03	; 3
     f5c:	0e 94 48 07 	call	0xe90	; 0xe90 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	0e 94 48 07 	call	0xe90	; 0xe90 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     f66:	82 e0       	ldi	r24, 0x02	; 2
     f68:	0e 94 48 07 	call	0xe90	; 0xe90 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     f6c:	88 e0       	ldi	r24, 0x08	; 8
     f6e:	0e 94 48 07 	call	0xe90	; 0xe90 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	0e 94 48 07 	call	0xe90	; 0xe90 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     f78:	8c e0       	ldi	r24, 0x0C	; 12
     f7a:	0e 94 48 07 	call	0xe90	; 0xe90 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	0e 94 48 07 	call	0xe90	; 0xe90 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     f84:	86 e0       	ldi	r24, 0x06	; 6
     f86:	0e 94 48 07 	call	0xe90	; 0xe90 <Lcd4_Cmd>
     f8a:	08 95       	ret

00000f8c <Lcd4_Write_Char>:
*return		   : void
*purpose       : WRITING CAHR ON LCD
*
*/
void Lcd4_Write_Char(unsigned char UN_CH_LCD_CHAR)
{
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
	unsigned char UN_CH_LCD_VAR5 = 0 , UN_CH_LCD_VAR6 = 0 ;
	UN_CH_LCD_VAR5 = UN_CH_LCD_CHAR & 0x0F;
     f90:	d8 2f       	mov	r29, r24
     f92:	df 70       	andi	r29, 0x0F	; 15
	UN_CH_LCD_VAR6 = UN_CH_LCD_CHAR & 0xF0;
     f94:	c8 2f       	mov	r28, r24
     f96:	c0 7f       	andi	r28, 0xF0	; 240
	pinChange(RS,1);             // => RS = 1
     f98:	61 e0       	ldi	r22, 0x01	; 1
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	84 e0       	ldi	r24, 0x04	; 4
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 48 05 	call	0xa90	; 0xa90 <pinChange>
	Lcd4_Port(UN_CH_LCD_VAR6>>4);             //Data transfer
     fa4:	8c 2f       	mov	r24, r28
     fa6:	82 95       	swap	r24
     fa8:	8f 70       	andi	r24, 0x0F	; 15
     faa:	0e 94 08 07 	call	0xe10	; 0xe10 <Lcd4_Port>
	pinChange(EN,1);
     fae:	61 e0       	ldi	r22, 0x01	; 1
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	86 e0       	ldi	r24, 0x06	; 6
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 48 05 	call	0xa90	; 0xa90 <pinChange>
     fba:	8f ec       	ldi	r24, 0xCF	; 207
     fbc:	97 e0       	ldi	r25, 0x07	; 7
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <Lcd4_Write_Char+0x32>
     fc2:	00 c0       	rjmp	.+0      	; 0xfc4 <Lcd4_Write_Char+0x38>
     fc4:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	86 e0       	ldi	r24, 0x06	; 6
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 48 05 	call	0xa90	; 0xa90 <pinChange>
     fd2:	8f ec       	ldi	r24, 0xCF	; 207
     fd4:	97 e0       	ldi	r25, 0x07	; 7
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <Lcd4_Write_Char+0x4a>
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <Lcd4_Write_Char+0x50>
     fdc:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(UN_CH_LCD_VAR5);
     fde:	8d 2f       	mov	r24, r29
     fe0:	0e 94 08 07 	call	0xe10	; 0xe10 <Lcd4_Port>
	pinChange(EN,1);
     fe4:	61 e0       	ldi	r22, 0x01	; 1
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	86 e0       	ldi	r24, 0x06	; 6
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0e 94 48 05 	call	0xa90	; 0xa90 <pinChange>
     ff0:	8f ec       	ldi	r24, 0xCF	; 207
     ff2:	97 e0       	ldi	r25, 0x07	; 7
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <Lcd4_Write_Char+0x68>
     ff8:	00 c0       	rjmp	.+0      	; 0xffa <Lcd4_Write_Char+0x6e>
     ffa:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	86 e0       	ldi	r24, 0x06	; 6
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 48 05 	call	0xa90	; 0xa90 <pinChange>
    1008:	8f ec       	ldi	r24, 0xCF	; 207
    100a:	97 e0       	ldi	r25, 0x07	; 7
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <Lcd4_Write_Char+0x80>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <Lcd4_Write_Char+0x86>
    1012:	00 00       	nop
	_delay_ms(1);
}
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <main>:
#include "lcd4.h"
#include "keypad.h"
#include "calc.h"

int main(void)
{
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	c4 56       	subi	r28, 0x64	; 100
    1024:	d1 09       	sbc	r29, r1
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xff;
    1030:	8f ef       	ldi	r24, 0xFF	; 255
    1032:	87 bb       	out	0x17, r24	; 23
	DDRA = 0xff;
    1034:	8a bb       	out	0x1a, r24	; 26
	Lcd4_Init();
    1036:	0e 94 92 07 	call	0xf24	; 0xf24 <Lcd4_Init>
	v_Keypad_Init();
    103a:	0e 94 1a 04 	call	0x834	; 0x834 <v_Keypad_Init>
	unsigned char input[100];
	int i_c=0;
    103e:	00 e0       	ldi	r16, 0x00	; 0
    1040:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char x=0;
    /* Replace with your application code */
    while (1) 
    {
		x=u8_cKeypad_Scan();
    1042:	0e 94 4b 04 	call	0x896	; 0x896 <u8_cKeypad_Scan>
		if (x=='C')
    1046:	83 34       	cpi	r24, 0x43	; 67
    1048:	39 f4       	brne	.+14     	; 0x1058 <main+0x3e>
		{
			clean(input);
    104a:	ce 01       	movw	r24, r28
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	0e 94 bd 02 	call	0x57a	; 0x57a <clean>
			Lcd4_Clear();
    1052:	0e 94 6d 07 	call	0xeda	; 0xeda <Lcd4_Clear>
    1056:	f5 cf       	rjmp	.-22     	; 0x1042 <main+0x28>
		}
		else if (x=='=')
    1058:	8d 33       	cpi	r24, 0x3D	; 61
    105a:	91 f4       	brne	.+36     	; 0x1080 <main+0x66>
		{
			input[i_c] = x;
    105c:	e1 e0       	ldi	r30, 0x01	; 1
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	ec 0f       	add	r30, r28
    1062:	fd 1f       	adc	r31, r29
    1064:	e0 0f       	add	r30, r16
    1066:	f1 1f       	adc	r31, r17
    1068:	80 83       	st	Z, r24
			i_c=0;
			Lcd4_Set_Cursor(2,0);
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	82 e0       	ldi	r24, 0x02	; 2
    106e:	0e 94 74 07 	call	0xee8	; 0xee8 <Lcd4_Set_Cursor>
			calculate_res(input);
    1072:	ce 01       	movw	r24, r28
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	0e 94 05 03 	call	0x60a	; 0x60a <calculate_res>
			Lcd4_Clear();
		}
		else if (x=='=')
		{
			input[i_c] = x;
			i_c=0;
    107a:	00 e0       	ldi	r16, 0x00	; 0
    107c:	10 e0       	ldi	r17, 0x00	; 0
    107e:	e1 cf       	rjmp	.-62     	; 0x1042 <main+0x28>
			Lcd4_Set_Cursor(2,0);
			calculate_res(input);
			//Lcd4_Write_String(input);
		}
		else if(x!=0)
    1080:	88 23       	and	r24, r24
    1082:	f9 f2       	breq	.-66     	; 0x1042 <main+0x28>
		{
			input[i_c] = x;
    1084:	e1 e0       	ldi	r30, 0x01	; 1
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	ec 0f       	add	r30, r28
    108a:	fd 1f       	adc	r31, r29
    108c:	e0 0f       	add	r30, r16
    108e:	f1 1f       	adc	r31, r17
    1090:	80 83       	st	Z, r24
			i_c++;
    1092:	0f 5f       	subi	r16, 0xFF	; 255
    1094:	1f 4f       	sbci	r17, 0xFF	; 255
			Lcd4_Write_Char(x);
    1096:	0e 94 c6 07 	call	0xf8c	; 0xf8c <Lcd4_Write_Char>
    109a:	d3 cf       	rjmp	.-90     	; 0x1042 <main+0x28>

0000109c <__subsf3>:
    109c:	50 58       	subi	r21, 0x80	; 128

0000109e <__addsf3>:
    109e:	bb 27       	eor	r27, r27
    10a0:	aa 27       	eor	r26, r26
    10a2:	0e 94 66 08 	call	0x10cc	; 0x10cc <__addsf3x>
    10a6:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__fp_round>
    10aa:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__fp_pscA>
    10ae:	38 f0       	brcs	.+14     	; 0x10be <__addsf3+0x20>
    10b0:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__fp_pscB>
    10b4:	20 f0       	brcs	.+8      	; 0x10be <__addsf3+0x20>
    10b6:	39 f4       	brne	.+14     	; 0x10c6 <__addsf3+0x28>
    10b8:	9f 3f       	cpi	r25, 0xFF	; 255
    10ba:	19 f4       	brne	.+6      	; 0x10c2 <__addsf3+0x24>
    10bc:	26 f4       	brtc	.+8      	; 0x10c6 <__addsf3+0x28>
    10be:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__fp_nan>
    10c2:	0e f4       	brtc	.+2      	; 0x10c6 <__addsf3+0x28>
    10c4:	e0 95       	com	r30
    10c6:	e7 fb       	bst	r30, 7
    10c8:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__fp_inf>

000010cc <__addsf3x>:
    10cc:	e9 2f       	mov	r30, r25
    10ce:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_split3>
    10d2:	58 f3       	brcs	.-42     	; 0x10aa <__addsf3+0xc>
    10d4:	ba 17       	cp	r27, r26
    10d6:	62 07       	cpc	r22, r18
    10d8:	73 07       	cpc	r23, r19
    10da:	84 07       	cpc	r24, r20
    10dc:	95 07       	cpc	r25, r21
    10de:	20 f0       	brcs	.+8      	; 0x10e8 <__addsf3x+0x1c>
    10e0:	79 f4       	brne	.+30     	; 0x1100 <__addsf3x+0x34>
    10e2:	a6 f5       	brtc	.+104    	; 0x114c <__addsf3x+0x80>
    10e4:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__fp_zero>
    10e8:	0e f4       	brtc	.+2      	; 0x10ec <__addsf3x+0x20>
    10ea:	e0 95       	com	r30
    10ec:	0b 2e       	mov	r0, r27
    10ee:	ba 2f       	mov	r27, r26
    10f0:	a0 2d       	mov	r26, r0
    10f2:	0b 01       	movw	r0, r22
    10f4:	b9 01       	movw	r22, r18
    10f6:	90 01       	movw	r18, r0
    10f8:	0c 01       	movw	r0, r24
    10fa:	ca 01       	movw	r24, r20
    10fc:	a0 01       	movw	r20, r0
    10fe:	11 24       	eor	r1, r1
    1100:	ff 27       	eor	r31, r31
    1102:	59 1b       	sub	r21, r25
    1104:	99 f0       	breq	.+38     	; 0x112c <__addsf3x+0x60>
    1106:	59 3f       	cpi	r21, 0xF9	; 249
    1108:	50 f4       	brcc	.+20     	; 0x111e <__addsf3x+0x52>
    110a:	50 3e       	cpi	r21, 0xE0	; 224
    110c:	68 f1       	brcs	.+90     	; 0x1168 <__addsf3x+0x9c>
    110e:	1a 16       	cp	r1, r26
    1110:	f0 40       	sbci	r31, 0x00	; 0
    1112:	a2 2f       	mov	r26, r18
    1114:	23 2f       	mov	r18, r19
    1116:	34 2f       	mov	r19, r20
    1118:	44 27       	eor	r20, r20
    111a:	58 5f       	subi	r21, 0xF8	; 248
    111c:	f3 cf       	rjmp	.-26     	; 0x1104 <__addsf3x+0x38>
    111e:	46 95       	lsr	r20
    1120:	37 95       	ror	r19
    1122:	27 95       	ror	r18
    1124:	a7 95       	ror	r26
    1126:	f0 40       	sbci	r31, 0x00	; 0
    1128:	53 95       	inc	r21
    112a:	c9 f7       	brne	.-14     	; 0x111e <__addsf3x+0x52>
    112c:	7e f4       	brtc	.+30     	; 0x114c <__addsf3x+0x80>
    112e:	1f 16       	cp	r1, r31
    1130:	ba 0b       	sbc	r27, r26
    1132:	62 0b       	sbc	r22, r18
    1134:	73 0b       	sbc	r23, r19
    1136:	84 0b       	sbc	r24, r20
    1138:	ba f0       	brmi	.+46     	; 0x1168 <__addsf3x+0x9c>
    113a:	91 50       	subi	r25, 0x01	; 1
    113c:	a1 f0       	breq	.+40     	; 0x1166 <__addsf3x+0x9a>
    113e:	ff 0f       	add	r31, r31
    1140:	bb 1f       	adc	r27, r27
    1142:	66 1f       	adc	r22, r22
    1144:	77 1f       	adc	r23, r23
    1146:	88 1f       	adc	r24, r24
    1148:	c2 f7       	brpl	.-16     	; 0x113a <__addsf3x+0x6e>
    114a:	0e c0       	rjmp	.+28     	; 0x1168 <__addsf3x+0x9c>
    114c:	ba 0f       	add	r27, r26
    114e:	62 1f       	adc	r22, r18
    1150:	73 1f       	adc	r23, r19
    1152:	84 1f       	adc	r24, r20
    1154:	48 f4       	brcc	.+18     	; 0x1168 <__addsf3x+0x9c>
    1156:	87 95       	ror	r24
    1158:	77 95       	ror	r23
    115a:	67 95       	ror	r22
    115c:	b7 95       	ror	r27
    115e:	f7 95       	ror	r31
    1160:	9e 3f       	cpi	r25, 0xFE	; 254
    1162:	08 f0       	brcs	.+2      	; 0x1166 <__addsf3x+0x9a>
    1164:	b0 cf       	rjmp	.-160    	; 0x10c6 <__addsf3+0x28>
    1166:	93 95       	inc	r25
    1168:	88 0f       	add	r24, r24
    116a:	08 f0       	brcs	.+2      	; 0x116e <__addsf3x+0xa2>
    116c:	99 27       	eor	r25, r25
    116e:	ee 0f       	add	r30, r30
    1170:	97 95       	ror	r25
    1172:	87 95       	ror	r24
    1174:	08 95       	ret

00001176 <__cmpsf2>:
    1176:	0e 94 a5 09 	call	0x134a	; 0x134a <__fp_cmp>
    117a:	08 f4       	brcc	.+2      	; 0x117e <__cmpsf2+0x8>
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	08 95       	ret

00001180 <__divsf3>:
    1180:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__divsf3x>
    1184:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__fp_round>
    1188:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__fp_pscB>
    118c:	58 f0       	brcs	.+22     	; 0x11a4 <__divsf3+0x24>
    118e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__fp_pscA>
    1192:	40 f0       	brcs	.+16     	; 0x11a4 <__divsf3+0x24>
    1194:	29 f4       	brne	.+10     	; 0x11a0 <__divsf3+0x20>
    1196:	5f 3f       	cpi	r21, 0xFF	; 255
    1198:	29 f0       	breq	.+10     	; 0x11a4 <__divsf3+0x24>
    119a:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__fp_inf>
    119e:	51 11       	cpse	r21, r1
    11a0:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__fp_szero>
    11a4:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__fp_nan>

000011a8 <__divsf3x>:
    11a8:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_split3>
    11ac:	68 f3       	brcs	.-38     	; 0x1188 <__divsf3+0x8>

000011ae <__divsf3_pse>:
    11ae:	99 23       	and	r25, r25
    11b0:	b1 f3       	breq	.-20     	; 0x119e <__divsf3+0x1e>
    11b2:	55 23       	and	r21, r21
    11b4:	91 f3       	breq	.-28     	; 0x119a <__divsf3+0x1a>
    11b6:	95 1b       	sub	r25, r21
    11b8:	55 0b       	sbc	r21, r21
    11ba:	bb 27       	eor	r27, r27
    11bc:	aa 27       	eor	r26, r26
    11be:	62 17       	cp	r22, r18
    11c0:	73 07       	cpc	r23, r19
    11c2:	84 07       	cpc	r24, r20
    11c4:	38 f0       	brcs	.+14     	; 0x11d4 <__divsf3_pse+0x26>
    11c6:	9f 5f       	subi	r25, 0xFF	; 255
    11c8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ca:	22 0f       	add	r18, r18
    11cc:	33 1f       	adc	r19, r19
    11ce:	44 1f       	adc	r20, r20
    11d0:	aa 1f       	adc	r26, r26
    11d2:	a9 f3       	breq	.-22     	; 0x11be <__divsf3_pse+0x10>
    11d4:	35 d0       	rcall	.+106    	; 0x1240 <__divsf3_pse+0x92>
    11d6:	0e 2e       	mov	r0, r30
    11d8:	3a f0       	brmi	.+14     	; 0x11e8 <__divsf3_pse+0x3a>
    11da:	e0 e8       	ldi	r30, 0x80	; 128
    11dc:	32 d0       	rcall	.+100    	; 0x1242 <__divsf3_pse+0x94>
    11de:	91 50       	subi	r25, 0x01	; 1
    11e0:	50 40       	sbci	r21, 0x00	; 0
    11e2:	e6 95       	lsr	r30
    11e4:	00 1c       	adc	r0, r0
    11e6:	ca f7       	brpl	.-14     	; 0x11da <__divsf3_pse+0x2c>
    11e8:	2b d0       	rcall	.+86     	; 0x1240 <__divsf3_pse+0x92>
    11ea:	fe 2f       	mov	r31, r30
    11ec:	29 d0       	rcall	.+82     	; 0x1240 <__divsf3_pse+0x92>
    11ee:	66 0f       	add	r22, r22
    11f0:	77 1f       	adc	r23, r23
    11f2:	88 1f       	adc	r24, r24
    11f4:	bb 1f       	adc	r27, r27
    11f6:	26 17       	cp	r18, r22
    11f8:	37 07       	cpc	r19, r23
    11fa:	48 07       	cpc	r20, r24
    11fc:	ab 07       	cpc	r26, r27
    11fe:	b0 e8       	ldi	r27, 0x80	; 128
    1200:	09 f0       	breq	.+2      	; 0x1204 <__divsf3_pse+0x56>
    1202:	bb 0b       	sbc	r27, r27
    1204:	80 2d       	mov	r24, r0
    1206:	bf 01       	movw	r22, r30
    1208:	ff 27       	eor	r31, r31
    120a:	93 58       	subi	r25, 0x83	; 131
    120c:	5f 4f       	sbci	r21, 0xFF	; 255
    120e:	3a f0       	brmi	.+14     	; 0x121e <__divsf3_pse+0x70>
    1210:	9e 3f       	cpi	r25, 0xFE	; 254
    1212:	51 05       	cpc	r21, r1
    1214:	78 f0       	brcs	.+30     	; 0x1234 <__divsf3_pse+0x86>
    1216:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__fp_inf>
    121a:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__fp_szero>
    121e:	5f 3f       	cpi	r21, 0xFF	; 255
    1220:	e4 f3       	brlt	.-8      	; 0x121a <__divsf3_pse+0x6c>
    1222:	98 3e       	cpi	r25, 0xE8	; 232
    1224:	d4 f3       	brlt	.-12     	; 0x121a <__divsf3_pse+0x6c>
    1226:	86 95       	lsr	r24
    1228:	77 95       	ror	r23
    122a:	67 95       	ror	r22
    122c:	b7 95       	ror	r27
    122e:	f7 95       	ror	r31
    1230:	9f 5f       	subi	r25, 0xFF	; 255
    1232:	c9 f7       	brne	.-14     	; 0x1226 <__divsf3_pse+0x78>
    1234:	88 0f       	add	r24, r24
    1236:	91 1d       	adc	r25, r1
    1238:	96 95       	lsr	r25
    123a:	87 95       	ror	r24
    123c:	97 f9       	bld	r25, 7
    123e:	08 95       	ret
    1240:	e1 e0       	ldi	r30, 0x01	; 1
    1242:	66 0f       	add	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	88 1f       	adc	r24, r24
    1248:	bb 1f       	adc	r27, r27
    124a:	62 17       	cp	r22, r18
    124c:	73 07       	cpc	r23, r19
    124e:	84 07       	cpc	r24, r20
    1250:	ba 07       	cpc	r27, r26
    1252:	20 f0       	brcs	.+8      	; 0x125c <__divsf3_pse+0xae>
    1254:	62 1b       	sub	r22, r18
    1256:	73 0b       	sbc	r23, r19
    1258:	84 0b       	sbc	r24, r20
    125a:	ba 0b       	sbc	r27, r26
    125c:	ee 1f       	adc	r30, r30
    125e:	88 f7       	brcc	.-30     	; 0x1242 <__divsf3_pse+0x94>
    1260:	e0 95       	com	r30
    1262:	08 95       	ret

00001264 <__fixsfsi>:
    1264:	0e 94 39 09 	call	0x1272	; 0x1272 <__fixunssfsi>
    1268:	68 94       	set
    126a:	b1 11       	cpse	r27, r1
    126c:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__fp_szero>
    1270:	08 95       	ret

00001272 <__fixunssfsi>:
    1272:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__fp_splitA>
    1276:	88 f0       	brcs	.+34     	; 0x129a <__fixunssfsi+0x28>
    1278:	9f 57       	subi	r25, 0x7F	; 127
    127a:	98 f0       	brcs	.+38     	; 0x12a2 <__fixunssfsi+0x30>
    127c:	b9 2f       	mov	r27, r25
    127e:	99 27       	eor	r25, r25
    1280:	b7 51       	subi	r27, 0x17	; 23
    1282:	b0 f0       	brcs	.+44     	; 0x12b0 <__fixunssfsi+0x3e>
    1284:	e1 f0       	breq	.+56     	; 0x12be <__fixunssfsi+0x4c>
    1286:	66 0f       	add	r22, r22
    1288:	77 1f       	adc	r23, r23
    128a:	88 1f       	adc	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	1a f0       	brmi	.+6      	; 0x1296 <__fixunssfsi+0x24>
    1290:	ba 95       	dec	r27
    1292:	c9 f7       	brne	.-14     	; 0x1286 <__fixunssfsi+0x14>
    1294:	14 c0       	rjmp	.+40     	; 0x12be <__fixunssfsi+0x4c>
    1296:	b1 30       	cpi	r27, 0x01	; 1
    1298:	91 f0       	breq	.+36     	; 0x12be <__fixunssfsi+0x4c>
    129a:	0e 94 13 0a 	call	0x1426	; 0x1426 <__fp_zero>
    129e:	b1 e0       	ldi	r27, 0x01	; 1
    12a0:	08 95       	ret
    12a2:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__fp_zero>
    12a6:	67 2f       	mov	r22, r23
    12a8:	78 2f       	mov	r23, r24
    12aa:	88 27       	eor	r24, r24
    12ac:	b8 5f       	subi	r27, 0xF8	; 248
    12ae:	39 f0       	breq	.+14     	; 0x12be <__fixunssfsi+0x4c>
    12b0:	b9 3f       	cpi	r27, 0xF9	; 249
    12b2:	cc f3       	brlt	.-14     	; 0x12a6 <__fixunssfsi+0x34>
    12b4:	86 95       	lsr	r24
    12b6:	77 95       	ror	r23
    12b8:	67 95       	ror	r22
    12ba:	b3 95       	inc	r27
    12bc:	d9 f7       	brne	.-10     	; 0x12b4 <__fixunssfsi+0x42>
    12be:	3e f4       	brtc	.+14     	; 0x12ce <__fixunssfsi+0x5c>
    12c0:	90 95       	com	r25
    12c2:	80 95       	com	r24
    12c4:	70 95       	com	r23
    12c6:	61 95       	neg	r22
    12c8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ca:	8f 4f       	sbci	r24, 0xFF	; 255
    12cc:	9f 4f       	sbci	r25, 0xFF	; 255
    12ce:	08 95       	ret

000012d0 <__floatunsisf>:
    12d0:	e8 94       	clt
    12d2:	09 c0       	rjmp	.+18     	; 0x12e6 <__floatsisf+0x12>

000012d4 <__floatsisf>:
    12d4:	97 fb       	bst	r25, 7
    12d6:	3e f4       	brtc	.+14     	; 0x12e6 <__floatsisf+0x12>
    12d8:	90 95       	com	r25
    12da:	80 95       	com	r24
    12dc:	70 95       	com	r23
    12de:	61 95       	neg	r22
    12e0:	7f 4f       	sbci	r23, 0xFF	; 255
    12e2:	8f 4f       	sbci	r24, 0xFF	; 255
    12e4:	9f 4f       	sbci	r25, 0xFF	; 255
    12e6:	99 23       	and	r25, r25
    12e8:	a9 f0       	breq	.+42     	; 0x1314 <__floatsisf+0x40>
    12ea:	f9 2f       	mov	r31, r25
    12ec:	96 e9       	ldi	r25, 0x96	; 150
    12ee:	bb 27       	eor	r27, r27
    12f0:	93 95       	inc	r25
    12f2:	f6 95       	lsr	r31
    12f4:	87 95       	ror	r24
    12f6:	77 95       	ror	r23
    12f8:	67 95       	ror	r22
    12fa:	b7 95       	ror	r27
    12fc:	f1 11       	cpse	r31, r1
    12fe:	f8 cf       	rjmp	.-16     	; 0x12f0 <__floatsisf+0x1c>
    1300:	fa f4       	brpl	.+62     	; 0x1340 <__floatsisf+0x6c>
    1302:	bb 0f       	add	r27, r27
    1304:	11 f4       	brne	.+4      	; 0x130a <__floatsisf+0x36>
    1306:	60 ff       	sbrs	r22, 0
    1308:	1b c0       	rjmp	.+54     	; 0x1340 <__floatsisf+0x6c>
    130a:	6f 5f       	subi	r22, 0xFF	; 255
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	8f 4f       	sbci	r24, 0xFF	; 255
    1310:	9f 4f       	sbci	r25, 0xFF	; 255
    1312:	16 c0       	rjmp	.+44     	; 0x1340 <__floatsisf+0x6c>
    1314:	88 23       	and	r24, r24
    1316:	11 f0       	breq	.+4      	; 0x131c <__floatsisf+0x48>
    1318:	96 e9       	ldi	r25, 0x96	; 150
    131a:	11 c0       	rjmp	.+34     	; 0x133e <__floatsisf+0x6a>
    131c:	77 23       	and	r23, r23
    131e:	21 f0       	breq	.+8      	; 0x1328 <__floatsisf+0x54>
    1320:	9e e8       	ldi	r25, 0x8E	; 142
    1322:	87 2f       	mov	r24, r23
    1324:	76 2f       	mov	r23, r22
    1326:	05 c0       	rjmp	.+10     	; 0x1332 <__floatsisf+0x5e>
    1328:	66 23       	and	r22, r22
    132a:	71 f0       	breq	.+28     	; 0x1348 <__floatsisf+0x74>
    132c:	96 e8       	ldi	r25, 0x86	; 134
    132e:	86 2f       	mov	r24, r22
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	2a f0       	brmi	.+10     	; 0x1340 <__floatsisf+0x6c>
    1336:	9a 95       	dec	r25
    1338:	66 0f       	add	r22, r22
    133a:	77 1f       	adc	r23, r23
    133c:	88 1f       	adc	r24, r24
    133e:	da f7       	brpl	.-10     	; 0x1336 <__floatsisf+0x62>
    1340:	88 0f       	add	r24, r24
    1342:	96 95       	lsr	r25
    1344:	87 95       	ror	r24
    1346:	97 f9       	bld	r25, 7
    1348:	08 95       	ret

0000134a <__fp_cmp>:
    134a:	99 0f       	add	r25, r25
    134c:	00 08       	sbc	r0, r0
    134e:	55 0f       	add	r21, r21
    1350:	aa 0b       	sbc	r26, r26
    1352:	e0 e8       	ldi	r30, 0x80	; 128
    1354:	fe ef       	ldi	r31, 0xFE	; 254
    1356:	16 16       	cp	r1, r22
    1358:	17 06       	cpc	r1, r23
    135a:	e8 07       	cpc	r30, r24
    135c:	f9 07       	cpc	r31, r25
    135e:	c0 f0       	brcs	.+48     	; 0x1390 <__fp_cmp+0x46>
    1360:	12 16       	cp	r1, r18
    1362:	13 06       	cpc	r1, r19
    1364:	e4 07       	cpc	r30, r20
    1366:	f5 07       	cpc	r31, r21
    1368:	98 f0       	brcs	.+38     	; 0x1390 <__fp_cmp+0x46>
    136a:	62 1b       	sub	r22, r18
    136c:	73 0b       	sbc	r23, r19
    136e:	84 0b       	sbc	r24, r20
    1370:	95 0b       	sbc	r25, r21
    1372:	39 f4       	brne	.+14     	; 0x1382 <__fp_cmp+0x38>
    1374:	0a 26       	eor	r0, r26
    1376:	61 f0       	breq	.+24     	; 0x1390 <__fp_cmp+0x46>
    1378:	23 2b       	or	r18, r19
    137a:	24 2b       	or	r18, r20
    137c:	25 2b       	or	r18, r21
    137e:	21 f4       	brne	.+8      	; 0x1388 <__fp_cmp+0x3e>
    1380:	08 95       	ret
    1382:	0a 26       	eor	r0, r26
    1384:	09 f4       	brne	.+2      	; 0x1388 <__fp_cmp+0x3e>
    1386:	a1 40       	sbci	r26, 0x01	; 1
    1388:	a6 95       	lsr	r26
    138a:	8f ef       	ldi	r24, 0xFF	; 255
    138c:	81 1d       	adc	r24, r1
    138e:	81 1d       	adc	r24, r1
    1390:	08 95       	ret

00001392 <__fp_inf>:
    1392:	97 f9       	bld	r25, 7
    1394:	9f 67       	ori	r25, 0x7F	; 127
    1396:	80 e8       	ldi	r24, 0x80	; 128
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	08 95       	ret

0000139e <__fp_nan>:
    139e:	9f ef       	ldi	r25, 0xFF	; 255
    13a0:	80 ec       	ldi	r24, 0xC0	; 192
    13a2:	08 95       	ret

000013a4 <__fp_pscA>:
    13a4:	00 24       	eor	r0, r0
    13a6:	0a 94       	dec	r0
    13a8:	16 16       	cp	r1, r22
    13aa:	17 06       	cpc	r1, r23
    13ac:	18 06       	cpc	r1, r24
    13ae:	09 06       	cpc	r0, r25
    13b0:	08 95       	ret

000013b2 <__fp_pscB>:
    13b2:	00 24       	eor	r0, r0
    13b4:	0a 94       	dec	r0
    13b6:	12 16       	cp	r1, r18
    13b8:	13 06       	cpc	r1, r19
    13ba:	14 06       	cpc	r1, r20
    13bc:	05 06       	cpc	r0, r21
    13be:	08 95       	ret

000013c0 <__fp_round>:
    13c0:	09 2e       	mov	r0, r25
    13c2:	03 94       	inc	r0
    13c4:	00 0c       	add	r0, r0
    13c6:	11 f4       	brne	.+4      	; 0x13cc <__fp_round+0xc>
    13c8:	88 23       	and	r24, r24
    13ca:	52 f0       	brmi	.+20     	; 0x13e0 <__fp_round+0x20>
    13cc:	bb 0f       	add	r27, r27
    13ce:	40 f4       	brcc	.+16     	; 0x13e0 <__fp_round+0x20>
    13d0:	bf 2b       	or	r27, r31
    13d2:	11 f4       	brne	.+4      	; 0x13d8 <__fp_round+0x18>
    13d4:	60 ff       	sbrs	r22, 0
    13d6:	04 c0       	rjmp	.+8      	; 0x13e0 <__fp_round+0x20>
    13d8:	6f 5f       	subi	r22, 0xFF	; 255
    13da:	7f 4f       	sbci	r23, 0xFF	; 255
    13dc:	8f 4f       	sbci	r24, 0xFF	; 255
    13de:	9f 4f       	sbci	r25, 0xFF	; 255
    13e0:	08 95       	ret

000013e2 <__fp_split3>:
    13e2:	57 fd       	sbrc	r21, 7
    13e4:	90 58       	subi	r25, 0x80	; 128
    13e6:	44 0f       	add	r20, r20
    13e8:	55 1f       	adc	r21, r21
    13ea:	59 f0       	breq	.+22     	; 0x1402 <__fp_splitA+0x10>
    13ec:	5f 3f       	cpi	r21, 0xFF	; 255
    13ee:	71 f0       	breq	.+28     	; 0x140c <__fp_splitA+0x1a>
    13f0:	47 95       	ror	r20

000013f2 <__fp_splitA>:
    13f2:	88 0f       	add	r24, r24
    13f4:	97 fb       	bst	r25, 7
    13f6:	99 1f       	adc	r25, r25
    13f8:	61 f0       	breq	.+24     	; 0x1412 <__fp_splitA+0x20>
    13fa:	9f 3f       	cpi	r25, 0xFF	; 255
    13fc:	79 f0       	breq	.+30     	; 0x141c <__fp_splitA+0x2a>
    13fe:	87 95       	ror	r24
    1400:	08 95       	ret
    1402:	12 16       	cp	r1, r18
    1404:	13 06       	cpc	r1, r19
    1406:	14 06       	cpc	r1, r20
    1408:	55 1f       	adc	r21, r21
    140a:	f2 cf       	rjmp	.-28     	; 0x13f0 <__fp_split3+0xe>
    140c:	46 95       	lsr	r20
    140e:	f1 df       	rcall	.-30     	; 0x13f2 <__fp_splitA>
    1410:	08 c0       	rjmp	.+16     	; 0x1422 <__fp_splitA+0x30>
    1412:	16 16       	cp	r1, r22
    1414:	17 06       	cpc	r1, r23
    1416:	18 06       	cpc	r1, r24
    1418:	99 1f       	adc	r25, r25
    141a:	f1 cf       	rjmp	.-30     	; 0x13fe <__fp_splitA+0xc>
    141c:	86 95       	lsr	r24
    141e:	71 05       	cpc	r23, r1
    1420:	61 05       	cpc	r22, r1
    1422:	08 94       	sec
    1424:	08 95       	ret

00001426 <__fp_zero>:
    1426:	e8 94       	clt

00001428 <__fp_szero>:
    1428:	bb 27       	eor	r27, r27
    142a:	66 27       	eor	r22, r22
    142c:	77 27       	eor	r23, r23
    142e:	cb 01       	movw	r24, r22
    1430:	97 f9       	bld	r25, 7
    1432:	08 95       	ret

00001434 <__mulsf3>:
    1434:	0e 94 2d 0a 	call	0x145a	; 0x145a <__mulsf3x>
    1438:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__fp_round>
    143c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <__fp_pscA>
    1440:	38 f0       	brcs	.+14     	; 0x1450 <__mulsf3+0x1c>
    1442:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__fp_pscB>
    1446:	20 f0       	brcs	.+8      	; 0x1450 <__mulsf3+0x1c>
    1448:	95 23       	and	r25, r21
    144a:	11 f0       	breq	.+4      	; 0x1450 <__mulsf3+0x1c>
    144c:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__fp_inf>
    1450:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__fp_nan>
    1454:	11 24       	eor	r1, r1
    1456:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__fp_szero>

0000145a <__mulsf3x>:
    145a:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <__fp_split3>
    145e:	70 f3       	brcs	.-36     	; 0x143c <__mulsf3+0x8>

00001460 <__mulsf3_pse>:
    1460:	95 9f       	mul	r25, r21
    1462:	c1 f3       	breq	.-16     	; 0x1454 <__mulsf3+0x20>
    1464:	95 0f       	add	r25, r21
    1466:	50 e0       	ldi	r21, 0x00	; 0
    1468:	55 1f       	adc	r21, r21
    146a:	62 9f       	mul	r22, r18
    146c:	f0 01       	movw	r30, r0
    146e:	72 9f       	mul	r23, r18
    1470:	bb 27       	eor	r27, r27
    1472:	f0 0d       	add	r31, r0
    1474:	b1 1d       	adc	r27, r1
    1476:	63 9f       	mul	r22, r19
    1478:	aa 27       	eor	r26, r26
    147a:	f0 0d       	add	r31, r0
    147c:	b1 1d       	adc	r27, r1
    147e:	aa 1f       	adc	r26, r26
    1480:	64 9f       	mul	r22, r20
    1482:	66 27       	eor	r22, r22
    1484:	b0 0d       	add	r27, r0
    1486:	a1 1d       	adc	r26, r1
    1488:	66 1f       	adc	r22, r22
    148a:	82 9f       	mul	r24, r18
    148c:	22 27       	eor	r18, r18
    148e:	b0 0d       	add	r27, r0
    1490:	a1 1d       	adc	r26, r1
    1492:	62 1f       	adc	r22, r18
    1494:	73 9f       	mul	r23, r19
    1496:	b0 0d       	add	r27, r0
    1498:	a1 1d       	adc	r26, r1
    149a:	62 1f       	adc	r22, r18
    149c:	83 9f       	mul	r24, r19
    149e:	a0 0d       	add	r26, r0
    14a0:	61 1d       	adc	r22, r1
    14a2:	22 1f       	adc	r18, r18
    14a4:	74 9f       	mul	r23, r20
    14a6:	33 27       	eor	r19, r19
    14a8:	a0 0d       	add	r26, r0
    14aa:	61 1d       	adc	r22, r1
    14ac:	23 1f       	adc	r18, r19
    14ae:	84 9f       	mul	r24, r20
    14b0:	60 0d       	add	r22, r0
    14b2:	21 1d       	adc	r18, r1
    14b4:	82 2f       	mov	r24, r18
    14b6:	76 2f       	mov	r23, r22
    14b8:	6a 2f       	mov	r22, r26
    14ba:	11 24       	eor	r1, r1
    14bc:	9f 57       	subi	r25, 0x7F	; 127
    14be:	50 40       	sbci	r21, 0x00	; 0
    14c0:	9a f0       	brmi	.+38     	; 0x14e8 <__mulsf3_pse+0x88>
    14c2:	f1 f0       	breq	.+60     	; 0x1500 <__mulsf3_pse+0xa0>
    14c4:	88 23       	and	r24, r24
    14c6:	4a f0       	brmi	.+18     	; 0x14da <__mulsf3_pse+0x7a>
    14c8:	ee 0f       	add	r30, r30
    14ca:	ff 1f       	adc	r31, r31
    14cc:	bb 1f       	adc	r27, r27
    14ce:	66 1f       	adc	r22, r22
    14d0:	77 1f       	adc	r23, r23
    14d2:	88 1f       	adc	r24, r24
    14d4:	91 50       	subi	r25, 0x01	; 1
    14d6:	50 40       	sbci	r21, 0x00	; 0
    14d8:	a9 f7       	brne	.-22     	; 0x14c4 <__mulsf3_pse+0x64>
    14da:	9e 3f       	cpi	r25, 0xFE	; 254
    14dc:	51 05       	cpc	r21, r1
    14de:	80 f0       	brcs	.+32     	; 0x1500 <__mulsf3_pse+0xa0>
    14e0:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__fp_inf>
    14e4:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__fp_szero>
    14e8:	5f 3f       	cpi	r21, 0xFF	; 255
    14ea:	e4 f3       	brlt	.-8      	; 0x14e4 <__mulsf3_pse+0x84>
    14ec:	98 3e       	cpi	r25, 0xE8	; 232
    14ee:	d4 f3       	brlt	.-12     	; 0x14e4 <__mulsf3_pse+0x84>
    14f0:	86 95       	lsr	r24
    14f2:	77 95       	ror	r23
    14f4:	67 95       	ror	r22
    14f6:	b7 95       	ror	r27
    14f8:	f7 95       	ror	r31
    14fa:	e7 95       	ror	r30
    14fc:	9f 5f       	subi	r25, 0xFF	; 255
    14fe:	c1 f7       	brne	.-16     	; 0x14f0 <__mulsf3_pse+0x90>
    1500:	fe 2b       	or	r31, r30
    1502:	88 0f       	add	r24, r24
    1504:	91 1d       	adc	r25, r1
    1506:	96 95       	lsr	r25
    1508:	87 95       	ror	r24
    150a:	97 f9       	bld	r25, 7
    150c:	08 95       	ret

0000150e <__umulhisi3>:
    150e:	a2 9f       	mul	r26, r18
    1510:	b0 01       	movw	r22, r0
    1512:	b3 9f       	mul	r27, r19
    1514:	c0 01       	movw	r24, r0
    1516:	a3 9f       	mul	r26, r19
    1518:	70 0d       	add	r23, r0
    151a:	81 1d       	adc	r24, r1
    151c:	11 24       	eor	r1, r1
    151e:	91 1d       	adc	r25, r1
    1520:	b2 9f       	mul	r27, r18
    1522:	70 0d       	add	r23, r0
    1524:	81 1d       	adc	r24, r1
    1526:	11 24       	eor	r1, r1
    1528:	91 1d       	adc	r25, r1
    152a:	08 95       	ret

0000152c <_exit>:
    152c:	f8 94       	cli

0000152e <__stop_program>:
    152e:	ff cf       	rjmp	.-2      	; 0x152e <__stop_program>
