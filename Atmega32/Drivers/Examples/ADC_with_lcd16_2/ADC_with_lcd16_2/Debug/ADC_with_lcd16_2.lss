
ADC_with_lcd16_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000086c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000008e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000910  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001311  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095f  00000000  00000000  00001d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc7  00000000  00000000  0000266c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00003234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c1  00000000  00000000  0000338c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001000  00000000  00000000  0000394d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000494d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 31 00 	jmp	0x62	; 0x62 <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	a2 00       	.word	0x00a2	; ????
  56:	a6 00       	.word	0x00a6	; ????
  58:	aa 00       	.word	0x00aa	; ????
  5a:	ae 00       	.word	0x00ae	; ????
  5c:	b2 00       	.word	0x00b2	; ????
  5e:	b6 00       	.word	0x00b6	; ????
  60:	ba 00       	.word	0x00ba	; ????

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_clear_bss>:
  6e:	20 e0       	ldi	r18, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	01 c0       	rjmp	.+2      	; 0x78 <.do_clear_bss_start>

00000076 <.do_clear_bss_loop>:
  76:	1d 92       	st	X+, r1

00000078 <.do_clear_bss_start>:
  78:	a1 36       	cpi	r26, 0x61	; 97
  7a:	b2 07       	cpc	r27, r18
  7c:	e1 f7       	brne	.-8      	; 0x76 <.do_clear_bss_loop>
  7e:	0e 94 ca 03 	call	0x794	; 0x794 <main>
  82:	0c 94 34 04 	jmp	0x868	; 0x868 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <ADC_INIT>:

#include "ADC.h"

uint8_t ADC_STATUS = NOT_INIT; 
void ADC_INIT(ADC_CONFIG *param)
{
  8a:	fc 01       	movw	r30, r24
	ADC_DDR = 0x00;
  8c:	1a ba       	out	0x1a, r1	; 26
	ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_ENABLE);
  8e:	86 b1       	in	r24, 0x06	; 6
  90:	80 68       	ori	r24, 0x80	; 128
  92:	86 b9       	out	0x06, r24	; 6
	switch(param->ref_selection)
  94:	80 81       	ld	r24, Z
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	19 f0       	breq	.+6      	; 0xa0 <ADC_INIT+0x16>
  9a:	83 30       	cpi	r24, 0x03	; 3
  9c:	29 f0       	breq	.+10     	; 0xa8 <ADC_INIT+0x1e>
  9e:	07 c0       	rjmp	.+14     	; 0xae <ADC_INIT+0x24>
	{
		case AVCC :
		ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(REF_SELCTION_BIT_0);
  a0:	87 b1       	in	r24, 0x07	; 7
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	87 b9       	out	0x07, r24	; 7
		break;
  a6:	03 c0       	rjmp	.+6      	; 0xae <ADC_INIT+0x24>
		
		case INTERNAL_2_56V_REF :
		ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(REF_SELCTION_BIT_0) | ENABLE(REF_SELCTION_BIT_1);
  a8:	87 b1       	in	r24, 0x07	; 7
  aa:	80 6c       	ori	r24, 0xC0	; 192
  ac:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	if(param->ADC_LEFT_ADJUST_RESULT_enable == INIT)
  ae:	81 81       	ldd	r24, Z+1	; 0x01
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	19 f4       	brne	.+6      	; 0xba <ADC_INIT+0x30>
	{
		ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(ADC_LEFT_ADJUST_RESULT);
  b4:	87 b1       	in	r24, 0x07	; 7
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	87 b9       	out	0x07, r24	; 7
	}
	
	switch(param->prescaler_selection)
  ba:	82 81       	ldd	r24, Z+2	; 0x02
  bc:	80 31       	cpi	r24, 0x10	; 16
  be:	d9 f0       	breq	.+54     	; 0xf6 <ADC_INIT+0x6c>
  c0:	38 f4       	brcc	.+14     	; 0xd0 <ADC_INIT+0x46>
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	81 f0       	breq	.+32     	; 0xe6 <ADC_INIT+0x5c>
  c6:	88 30       	cpi	r24, 0x08	; 8
  c8:	91 f0       	breq	.+36     	; 0xee <ADC_INIT+0x64>
  ca:	82 30       	cpi	r24, 0x02	; 2
  cc:	19 f5       	brne	.+70     	; 0x114 <ADC_INIT+0x8a>
  ce:	07 c0       	rjmp	.+14     	; 0xde <ADC_INIT+0x54>
  d0:	80 34       	cpi	r24, 0x40	; 64
  d2:	c9 f0       	breq	.+50     	; 0x106 <ADC_INIT+0x7c>
  d4:	80 38       	cpi	r24, 0x80	; 128
  d6:	d9 f0       	breq	.+54     	; 0x10e <ADC_INIT+0x84>
  d8:	80 32       	cpi	r24, 0x20	; 32
  da:	e1 f4       	brne	.+56     	; 0x114 <ADC_INIT+0x8a>
  dc:	10 c0       	rjmp	.+32     	; 0xfe <ADC_INIT+0x74>
	{
		case PRESCALER_2 :
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_PRESCALER_SELECTION_BIT_0);
  de:	86 b1       	in	r24, 0x06	; 6
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	86 b9       	out	0x06, r24	; 6
		break;
  e4:	17 c0       	rjmp	.+46     	; 0x114 <ADC_INIT+0x8a>
		
		case PRESCALER_4 :
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_PRESCALER_SELECTION_BIT_1);
  e6:	86 b1       	in	r24, 0x06	; 6
  e8:	82 60       	ori	r24, 0x02	; 2
  ea:	86 b9       	out	0x06, r24	; 6
		break;
  ec:	13 c0       	rjmp	.+38     	; 0x114 <ADC_INIT+0x8a>
		
		case PRESCALER_8 :
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_PRESCALER_SELECTION_BIT_0) | ENABLE(ADC_PRESCALER_SELECTION_BIT_1);
  ee:	86 b1       	in	r24, 0x06	; 6
  f0:	83 60       	ori	r24, 0x03	; 3
  f2:	86 b9       	out	0x06, r24	; 6
		break;
  f4:	0f c0       	rjmp	.+30     	; 0x114 <ADC_INIT+0x8a>
		
		case PRESCALER_16 :
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_PRESCALER_SELECTION_BIT_2);
  f6:	86 b1       	in	r24, 0x06	; 6
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	86 b9       	out	0x06, r24	; 6
		break;
  fc:	0b c0       	rjmp	.+22     	; 0x114 <ADC_INIT+0x8a>
		
		case PRESCALER_32 :
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_PRESCALER_SELECTION_BIT_0) | ENABLE(ADC_PRESCALER_SELECTION_BIT_2);
  fe:	86 b1       	in	r24, 0x06	; 6
 100:	85 60       	ori	r24, 0x05	; 5
 102:	86 b9       	out	0x06, r24	; 6
		break;
 104:	07 c0       	rjmp	.+14     	; 0x114 <ADC_INIT+0x8a>
		
		case PRESCALER_64 :
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_PRESCALER_SELECTION_BIT_1) | ENABLE(ADC_PRESCALER_SELECTION_BIT_2);
 106:	86 b1       	in	r24, 0x06	; 6
 108:	86 60       	ori	r24, 0x06	; 6
 10a:	86 b9       	out	0x06, r24	; 6
		break;
 10c:	03 c0       	rjmp	.+6      	; 0x114 <ADC_INIT+0x8a>
		
		case PRESCALER_128 :
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_PRESCALER_SELECTION_BIT_0) | ENABLE(ADC_PRESCALER_SELECTION_BIT_1) | ENABLE(ADC_PRESCALER_SELECTION_BIT_2);
 10e:	86 b1       	in	r24, 0x06	; 6
 110:	87 60       	ori	r24, 0x07	; 7
 112:	86 b9       	out	0x06, r24	; 6
		break;
	}
	
	if (param->ADC_Enable_Interrupt == INIT)
 114:	84 81       	ldd	r24, Z+4	; 0x04
 116:	81 30       	cpi	r24, 0x01	; 1
 118:	19 f4       	brne	.+6      	; 0x120 <ADC_INIT+0x96>
	{
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_INTERRUPT_ENABLE);
 11a:	86 b1       	in	r24, 0x06	; 6
 11c:	88 60       	ori	r24, 0x08	; 8
 11e:	86 b9       	out	0x06, r24	; 6
	}
	
	if (param->ADC_Enable_Auto_Trigger == INIT)
 120:	83 81       	ldd	r24, Z+3	; 0x03
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	19 f4       	brne	.+6      	; 0x12c <ADC_INIT+0xa2>
	{
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_AUTO_TRIGGER_ENABLE);
 126:	86 b1       	in	r24, 0x06	; 6
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	86 b9       	out	0x06, r24	; 6
	}
	
	switch(param->ADC_Auto_Trigger_Source)
 12c:	e5 81       	ldd	r30, Z+5	; 0x05
 12e:	8e 2f       	mov	r24, r30
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	fc 01       	movw	r30, r24
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	e7 30       	cpi	r30, 0x07	; 7
 138:	f1 05       	cpc	r31, r1
 13a:	f8 f4       	brcc	.+62     	; 0x17a <ADC_INIT+0xf0>
 13c:	e6 5d       	subi	r30, 0xD6	; 214
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__tablejump2__>
	{
		case ANALOG_COMPARATOR :
		SPECIAL_FUNCTION_REG |= ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_0);
 144:	80 b7       	in	r24, 0x30	; 48
 146:	80 62       	ori	r24, 0x20	; 32
 148:	80 bf       	out	0x30, r24	; 48
		break;
 14a:	17 c0       	rjmp	.+46     	; 0x17a <ADC_INIT+0xf0>
		
		case EXTERNAL_INTERRUPT_REQ :
		SPECIAL_FUNCTION_REG |= ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_1);
 14c:	80 b7       	in	r24, 0x30	; 48
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	80 bf       	out	0x30, r24	; 48
		break;
 152:	13 c0       	rjmp	.+38     	; 0x17a <ADC_INIT+0xf0>
		
		case TIMER_0_COMPARE_MATCH :
		SPECIAL_FUNCTION_REG |= ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_0) | ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_1);
 154:	80 b7       	in	r24, 0x30	; 48
 156:	80 66       	ori	r24, 0x60	; 96
 158:	80 bf       	out	0x30, r24	; 48
		break;
 15a:	0f c0       	rjmp	.+30     	; 0x17a <ADC_INIT+0xf0>
		
		case  TIMER_0_OVERFLOW :
		SPECIAL_FUNCTION_REG |= ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_2);
 15c:	80 b7       	in	r24, 0x30	; 48
 15e:	80 68       	ori	r24, 0x80	; 128
 160:	80 bf       	out	0x30, r24	; 48
		break;
 162:	0b c0       	rjmp	.+22     	; 0x17a <ADC_INIT+0xf0>
		
		case TIMER_1_COMPARE_MATCH:
		SPECIAL_FUNCTION_REG |= ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_0) | ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_2);
 164:	80 b7       	in	r24, 0x30	; 48
 166:	80 6a       	ori	r24, 0xA0	; 160
 168:	80 bf       	out	0x30, r24	; 48
		break;
 16a:	07 c0       	rjmp	.+14     	; 0x17a <ADC_INIT+0xf0>
		
		case TIMER_1_OVERFLOW_MATCH :
		SPECIAL_FUNCTION_REG |= ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_1) | ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_2);
 16c:	80 b7       	in	r24, 0x30	; 48
 16e:	80 6c       	ori	r24, 0xC0	; 192
 170:	80 bf       	out	0x30, r24	; 48
		break;
 172:	03 c0       	rjmp	.+6      	; 0x17a <ADC_INIT+0xf0>
		
		case TIMER_1_CAPTURE_MODE :
		SPECIAL_FUNCTION_REG |= ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_0) | ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_1) | ENABLE(ADC_AUTO_TRIGGER_SOURCE_BIT_2);
 174:	80 b7       	in	r24, 0x30	; 48
 176:	80 6e       	ori	r24, 0xE0	; 224
 178:	80 bf       	out	0x30, r24	; 48
		break;
	}
	ADC_STATUS = INIT;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 180:	08 95       	ret

00000182 <ADC_READ>:


uint16_t ADC_READ(uint8_t channel)
{
	uint16_t data=0;
	if (ADC_STATUS == INIT)
 182:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 186:	91 30       	cpi	r25, 0x01	; 1
 188:	b9 f5       	brne	.+110    	; 0x1f8 <ADC_READ+0x76>
	{
			ADC_MULTIPLEXER_SELECTION_REG |= ADC_MULTIPLEXER_SELECTION_REG & 0xf8 ;
 18a:	97 b1       	in	r25, 0x07	; 7
 18c:	27 b1       	in	r18, 0x07	; 7
 18e:	98 7f       	andi	r25, 0xF8	; 248
 190:	92 2b       	or	r25, r18
 192:	97 b9       	out	0x07, r25	; 7
		switch(channel)
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	a1 f0       	breq	.+40     	; 0x1c0 <ADC_READ+0x3e>
 198:	28 f4       	brcc	.+10     	; 0x1a4 <ADC_READ+0x22>
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	49 f0       	breq	.+18     	; 0x1b0 <ADC_READ+0x2e>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	59 f0       	breq	.+22     	; 0x1b8 <ADC_READ+0x36>
 1a2:	1d c0       	rjmp	.+58     	; 0x1de <ADC_READ+0x5c>
 1a4:	85 30       	cpi	r24, 0x05	; 5
 1a6:	a1 f0       	breq	.+40     	; 0x1d0 <ADC_READ+0x4e>
 1a8:	78 f0       	brcs	.+30     	; 0x1c8 <ADC_READ+0x46>
 1aa:	86 30       	cpi	r24, 0x06	; 6
 1ac:	a9 f0       	breq	.+42     	; 0x1d8 <ADC_READ+0x56>
 1ae:	17 c0       	rjmp	.+46     	; 0x1de <ADC_READ+0x5c>
		{
			case CHANNEL_1 :
			ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(ANALOG_CHANNEL_SELECTION_BIT_0);
 1b0:	87 b1       	in	r24, 0x07	; 7
 1b2:	81 60       	ori	r24, 0x01	; 1
 1b4:	87 b9       	out	0x07, r24	; 7
			break;
 1b6:	13 c0       	rjmp	.+38     	; 0x1de <ADC_READ+0x5c>
			
			case CHANNEL_2 :
			ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(ANALOG_CHANNEL_SELECTION_BIT_1);
 1b8:	87 b1       	in	r24, 0x07	; 7
 1ba:	82 60       	ori	r24, 0x02	; 2
 1bc:	87 b9       	out	0x07, r24	; 7
			break;
 1be:	0f c0       	rjmp	.+30     	; 0x1de <ADC_READ+0x5c>
			
			case CHANNEL_3 :
			ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(ANALOG_CHANNEL_SELECTION_BIT_0) | ENABLE(ANALOG_CHANNEL_SELECTION_BIT_1);
 1c0:	87 b1       	in	r24, 0x07	; 7
 1c2:	83 60       	ori	r24, 0x03	; 3
 1c4:	87 b9       	out	0x07, r24	; 7
			break;
 1c6:	0b c0       	rjmp	.+22     	; 0x1de <ADC_READ+0x5c>
			
			case CHANNEL_4 :
			ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(ANALOG_CHANNEL_SELECTION_BIT_2);
 1c8:	87 b1       	in	r24, 0x07	; 7
 1ca:	84 60       	ori	r24, 0x04	; 4
 1cc:	87 b9       	out	0x07, r24	; 7
			break;
 1ce:	07 c0       	rjmp	.+14     	; 0x1de <ADC_READ+0x5c>
			
			case CHANNEL_5 :
			ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(ANALOG_CHANNEL_SELECTION_BIT_0) | ENABLE(ANALOG_CHANNEL_SELECTION_BIT_2);
 1d0:	87 b1       	in	r24, 0x07	; 7
 1d2:	85 60       	ori	r24, 0x05	; 5
 1d4:	87 b9       	out	0x07, r24	; 7
			break;
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <ADC_READ+0x5c>
			
			case CHANNEL_6 :
			ADC_MULTIPLEXER_SELECTION_REG |= ENABLE(ANALOG_CHANNEL_SELECTION_BIT_1) | ENABLE(ANALOG_CHANNEL_SELECTION_BIT_2);
 1d8:	87 b1       	in	r24, 0x07	; 7
 1da:	86 60       	ori	r24, 0x06	; 6
 1dc:	87 b9       	out	0x07, r24	; 7
			break;
		}
		ADC_CONTROL_AND_STATUS_A_REG |= ENABLE(ADC_START_CONVERSION);
 1de:	86 b1       	in	r24, 0x06	; 6
 1e0:	80 64       	ori	r24, 0x40	; 64
 1e2:	86 b9       	out	0x06, r24	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e4:	8a e1       	ldi	r24, 0x1A	; 26
 1e6:	8a 95       	dec	r24
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <ADC_READ+0x64>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <ADC_READ+0x6a>
		_delay_us(10);
		while(!(ADC_CONTROL_AND_STATUS_A_REG&&(ENABLE(ADC_INTERRUPT_FLAG))));
 1ec:	86 b1       	in	r24, 0x06	; 6
 1ee:	88 23       	and	r24, r24
 1f0:	e9 f3       	breq	.-6      	; 0x1ec <ADC_READ+0x6a>
		data = ADC_DATA_REG;
 1f2:	84 b1       	in	r24, 0x04	; 4
 1f4:	95 b1       	in	r25, 0x05	; 5
 1f6:	08 95       	ret



uint16_t ADC_READ(uint8_t channel)
{
	uint16_t data=0;
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
		_delay_us(10);
		while(!(ADC_CONTROL_AND_STATUS_A_REG&&(ENABLE(ADC_INTERRUPT_FLAG))));
		data = ADC_DATA_REG;
	}
	return data;
 1fc:	08 95       	ret

000001fe <pinChange>:
		UN_CH_LCD_VAR3 = UN_CH_LCD_VAR2>>4;
		UN_CH_LCD_VAR4 = (0xC0+UN_CH_LCD_COLUMN) & 0x0F;
		Lcd4_Cmd(UN_CH_LCD_VAR3);
		Lcd4_Cmd(UN_CH_LCD_VAR4);
	}
}
 1fe:	67 2b       	or	r22, r23
 200:	09 f0       	breq	.+2      	; 0x204 <pinChange+0x6>
 202:	df c0       	rjmp	.+446    	; 0x3c2 <pinChange+0x1c4>
 204:	00 97       	sbiw	r24, 0x00	; 0
 206:	21 f4       	brne	.+8      	; 0x210 <pinChange+0x12>
 208:	8b b3       	in	r24, 0x1b	; 27
 20a:	8e 7f       	andi	r24, 0xFE	; 254
 20c:	8b bb       	out	0x1b, r24	; 27
 20e:	08 95       	ret
 210:	81 30       	cpi	r24, 0x01	; 1
 212:	91 05       	cpc	r25, r1
 214:	21 f4       	brne	.+8      	; 0x21e <pinChange+0x20>
 216:	8b b3       	in	r24, 0x1b	; 27
 218:	8d 7f       	andi	r24, 0xFD	; 253
 21a:	8b bb       	out	0x1b, r24	; 27
 21c:	08 95       	ret
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	91 05       	cpc	r25, r1
 222:	21 f4       	brne	.+8      	; 0x22c <pinChange+0x2e>
 224:	8b b3       	in	r24, 0x1b	; 27
 226:	8b 7f       	andi	r24, 0xFB	; 251
 228:	8b bb       	out	0x1b, r24	; 27
 22a:	08 95       	ret
 22c:	83 30       	cpi	r24, 0x03	; 3
 22e:	91 05       	cpc	r25, r1
 230:	21 f4       	brne	.+8      	; 0x23a <pinChange+0x3c>
 232:	8b b3       	in	r24, 0x1b	; 27
 234:	87 7f       	andi	r24, 0xF7	; 247
 236:	8b bb       	out	0x1b, r24	; 27
 238:	08 95       	ret
 23a:	84 30       	cpi	r24, 0x04	; 4
 23c:	91 05       	cpc	r25, r1
 23e:	21 f4       	brne	.+8      	; 0x248 <pinChange+0x4a>
 240:	8b b3       	in	r24, 0x1b	; 27
 242:	8f 7e       	andi	r24, 0xEF	; 239
 244:	8b bb       	out	0x1b, r24	; 27
 246:	08 95       	ret
 248:	85 30       	cpi	r24, 0x05	; 5
 24a:	91 05       	cpc	r25, r1
 24c:	21 f4       	brne	.+8      	; 0x256 <pinChange+0x58>
 24e:	8b b3       	in	r24, 0x1b	; 27
 250:	8f 7d       	andi	r24, 0xDF	; 223
 252:	8b bb       	out	0x1b, r24	; 27
 254:	08 95       	ret
 256:	86 30       	cpi	r24, 0x06	; 6
 258:	91 05       	cpc	r25, r1
 25a:	21 f4       	brne	.+8      	; 0x264 <pinChange+0x66>
 25c:	8b b3       	in	r24, 0x1b	; 27
 25e:	8f 7b       	andi	r24, 0xBF	; 191
 260:	8b bb       	out	0x1b, r24	; 27
 262:	08 95       	ret
 264:	87 30       	cpi	r24, 0x07	; 7
 266:	91 05       	cpc	r25, r1
 268:	21 f4       	brne	.+8      	; 0x272 <pinChange+0x74>
 26a:	8b b3       	in	r24, 0x1b	; 27
 26c:	8f 77       	andi	r24, 0x7F	; 127
 26e:	8b bb       	out	0x1b, r24	; 27
 270:	08 95       	ret
 272:	8a 30       	cpi	r24, 0x0A	; 10
 274:	91 05       	cpc	r25, r1
 276:	21 f4       	brne	.+8      	; 0x280 <pinChange+0x82>
 278:	88 b3       	in	r24, 0x18	; 24
 27a:	8e 7f       	andi	r24, 0xFE	; 254
 27c:	88 bb       	out	0x18, r24	; 24
 27e:	08 95       	ret
 280:	8b 30       	cpi	r24, 0x0B	; 11
 282:	91 05       	cpc	r25, r1
 284:	21 f4       	brne	.+8      	; 0x28e <pinChange+0x90>
 286:	88 b3       	in	r24, 0x18	; 24
 288:	8d 7f       	andi	r24, 0xFD	; 253
 28a:	88 bb       	out	0x18, r24	; 24
 28c:	08 95       	ret
 28e:	8c 30       	cpi	r24, 0x0C	; 12
 290:	91 05       	cpc	r25, r1
 292:	21 f4       	brne	.+8      	; 0x29c <pinChange+0x9e>
 294:	88 b3       	in	r24, 0x18	; 24
 296:	8b 7f       	andi	r24, 0xFB	; 251
 298:	88 bb       	out	0x18, r24	; 24
 29a:	08 95       	ret
 29c:	8d 30       	cpi	r24, 0x0D	; 13
 29e:	91 05       	cpc	r25, r1
 2a0:	21 f4       	brne	.+8      	; 0x2aa <pinChange+0xac>
 2a2:	88 b3       	in	r24, 0x18	; 24
 2a4:	87 7f       	andi	r24, 0xF7	; 247
 2a6:	88 bb       	out	0x18, r24	; 24
 2a8:	08 95       	ret
 2aa:	8e 30       	cpi	r24, 0x0E	; 14
 2ac:	91 05       	cpc	r25, r1
 2ae:	21 f4       	brne	.+8      	; 0x2b8 <pinChange+0xba>
 2b0:	88 b3       	in	r24, 0x18	; 24
 2b2:	8f 7e       	andi	r24, 0xEF	; 239
 2b4:	88 bb       	out	0x18, r24	; 24
 2b6:	08 95       	ret
 2b8:	8f 30       	cpi	r24, 0x0F	; 15
 2ba:	91 05       	cpc	r25, r1
 2bc:	21 f4       	brne	.+8      	; 0x2c6 <pinChange+0xc8>
 2be:	88 b3       	in	r24, 0x18	; 24
 2c0:	8f 7d       	andi	r24, 0xDF	; 223
 2c2:	88 bb       	out	0x18, r24	; 24
 2c4:	08 95       	ret
 2c6:	80 31       	cpi	r24, 0x10	; 16
 2c8:	91 05       	cpc	r25, r1
 2ca:	21 f4       	brne	.+8      	; 0x2d4 <pinChange+0xd6>
 2cc:	88 b3       	in	r24, 0x18	; 24
 2ce:	8f 7b       	andi	r24, 0xBF	; 191
 2d0:	88 bb       	out	0x18, r24	; 24
 2d2:	08 95       	ret
 2d4:	81 31       	cpi	r24, 0x11	; 17
 2d6:	91 05       	cpc	r25, r1
 2d8:	21 f4       	brne	.+8      	; 0x2e2 <pinChange+0xe4>
 2da:	88 b3       	in	r24, 0x18	; 24
 2dc:	8f 77       	andi	r24, 0x7F	; 127
 2de:	88 bb       	out	0x18, r24	; 24
 2e0:	08 95       	ret
 2e2:	84 31       	cpi	r24, 0x14	; 20
 2e4:	91 05       	cpc	r25, r1
 2e6:	21 f4       	brne	.+8      	; 0x2f0 <pinChange+0xf2>
 2e8:	85 b3       	in	r24, 0x15	; 21
 2ea:	8e 7f       	andi	r24, 0xFE	; 254
 2ec:	85 bb       	out	0x15, r24	; 21
 2ee:	08 95       	ret
 2f0:	85 31       	cpi	r24, 0x15	; 21
 2f2:	91 05       	cpc	r25, r1
 2f4:	21 f4       	brne	.+8      	; 0x2fe <pinChange+0x100>
 2f6:	85 b3       	in	r24, 0x15	; 21
 2f8:	8d 7f       	andi	r24, 0xFD	; 253
 2fa:	85 bb       	out	0x15, r24	; 21
 2fc:	08 95       	ret
 2fe:	86 31       	cpi	r24, 0x16	; 22
 300:	91 05       	cpc	r25, r1
 302:	21 f4       	brne	.+8      	; 0x30c <pinChange+0x10e>
 304:	85 b3       	in	r24, 0x15	; 21
 306:	8b 7f       	andi	r24, 0xFB	; 251
 308:	85 bb       	out	0x15, r24	; 21
 30a:	08 95       	ret
 30c:	87 31       	cpi	r24, 0x17	; 23
 30e:	91 05       	cpc	r25, r1
 310:	21 f4       	brne	.+8      	; 0x31a <pinChange+0x11c>
 312:	85 b3       	in	r24, 0x15	; 21
 314:	87 7f       	andi	r24, 0xF7	; 247
 316:	85 bb       	out	0x15, r24	; 21
 318:	08 95       	ret
 31a:	88 31       	cpi	r24, 0x18	; 24
 31c:	91 05       	cpc	r25, r1
 31e:	21 f4       	brne	.+8      	; 0x328 <pinChange+0x12a>
 320:	85 b3       	in	r24, 0x15	; 21
 322:	8f 7e       	andi	r24, 0xEF	; 239
 324:	85 bb       	out	0x15, r24	; 21
 326:	08 95       	ret
 328:	89 31       	cpi	r24, 0x19	; 25
 32a:	91 05       	cpc	r25, r1
 32c:	21 f4       	brne	.+8      	; 0x336 <pinChange+0x138>
 32e:	85 b3       	in	r24, 0x15	; 21
 330:	8f 7d       	andi	r24, 0xDF	; 223
 332:	85 bb       	out	0x15, r24	; 21
 334:	08 95       	ret
 336:	8a 31       	cpi	r24, 0x1A	; 26
 338:	91 05       	cpc	r25, r1
 33a:	21 f4       	brne	.+8      	; 0x344 <pinChange+0x146>
 33c:	85 b3       	in	r24, 0x15	; 21
 33e:	8f 7b       	andi	r24, 0xBF	; 191
 340:	85 bb       	out	0x15, r24	; 21
 342:	08 95       	ret
 344:	8b 31       	cpi	r24, 0x1B	; 27
 346:	91 05       	cpc	r25, r1
 348:	21 f4       	brne	.+8      	; 0x352 <pinChange+0x154>
 34a:	85 b3       	in	r24, 0x15	; 21
 34c:	8f 77       	andi	r24, 0x7F	; 127
 34e:	85 bb       	out	0x15, r24	; 21
 350:	08 95       	ret
 352:	8e 31       	cpi	r24, 0x1E	; 30
 354:	91 05       	cpc	r25, r1
 356:	21 f4       	brne	.+8      	; 0x360 <pinChange+0x162>
 358:	82 b3       	in	r24, 0x12	; 18
 35a:	8e 7f       	andi	r24, 0xFE	; 254
 35c:	82 bb       	out	0x12, r24	; 18
 35e:	08 95       	ret
 360:	8f 31       	cpi	r24, 0x1F	; 31
 362:	91 05       	cpc	r25, r1
 364:	21 f4       	brne	.+8      	; 0x36e <pinChange+0x170>
 366:	82 b3       	in	r24, 0x12	; 18
 368:	8d 7f       	andi	r24, 0xFD	; 253
 36a:	82 bb       	out	0x12, r24	; 18
 36c:	08 95       	ret
 36e:	80 32       	cpi	r24, 0x20	; 32
 370:	91 05       	cpc	r25, r1
 372:	21 f4       	brne	.+8      	; 0x37c <pinChange+0x17e>
 374:	82 b3       	in	r24, 0x12	; 18
 376:	8b 7f       	andi	r24, 0xFB	; 251
 378:	82 bb       	out	0x12, r24	; 18
 37a:	08 95       	ret
 37c:	81 32       	cpi	r24, 0x21	; 33
 37e:	91 05       	cpc	r25, r1
 380:	21 f4       	brne	.+8      	; 0x38a <pinChange+0x18c>
 382:	82 b3       	in	r24, 0x12	; 18
 384:	87 7f       	andi	r24, 0xF7	; 247
 386:	82 bb       	out	0x12, r24	; 18
 388:	08 95       	ret
 38a:	82 32       	cpi	r24, 0x22	; 34
 38c:	91 05       	cpc	r25, r1
 38e:	21 f4       	brne	.+8      	; 0x398 <pinChange+0x19a>
 390:	82 b3       	in	r24, 0x12	; 18
 392:	8f 7e       	andi	r24, 0xEF	; 239
 394:	82 bb       	out	0x12, r24	; 18
 396:	08 95       	ret
 398:	83 32       	cpi	r24, 0x23	; 35
 39a:	91 05       	cpc	r25, r1
 39c:	21 f4       	brne	.+8      	; 0x3a6 <pinChange+0x1a8>
 39e:	82 b3       	in	r24, 0x12	; 18
 3a0:	8f 7d       	andi	r24, 0xDF	; 223
 3a2:	82 bb       	out	0x12, r24	; 18
 3a4:	08 95       	ret
 3a6:	84 32       	cpi	r24, 0x24	; 36
 3a8:	91 05       	cpc	r25, r1
 3aa:	21 f4       	brne	.+8      	; 0x3b4 <pinChange+0x1b6>
 3ac:	82 b3       	in	r24, 0x12	; 18
 3ae:	8f 7b       	andi	r24, 0xBF	; 191
 3b0:	82 bb       	out	0x12, r24	; 18
 3b2:	08 95       	ret
 3b4:	85 97       	sbiw	r24, 0x25	; 37
 3b6:	09 f0       	breq	.+2      	; 0x3ba <pinChange+0x1bc>
 3b8:	e1 c0       	rjmp	.+450    	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
 3ba:	82 b3       	in	r24, 0x12	; 18
 3bc:	8f 77       	andi	r24, 0x7F	; 127
 3be:	82 bb       	out	0x12, r24	; 18
 3c0:	08 95       	ret
 3c2:	00 97       	sbiw	r24, 0x00	; 0
 3c4:	21 f4       	brne	.+8      	; 0x3ce <pinChange+0x1d0>
 3c6:	8b b3       	in	r24, 0x1b	; 27
 3c8:	81 60       	ori	r24, 0x01	; 1
 3ca:	8b bb       	out	0x1b, r24	; 27
 3cc:	08 95       	ret
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	91 05       	cpc	r25, r1
 3d2:	21 f4       	brne	.+8      	; 0x3dc <pinChange+0x1de>
 3d4:	8b b3       	in	r24, 0x1b	; 27
 3d6:	82 60       	ori	r24, 0x02	; 2
 3d8:	8b bb       	out	0x1b, r24	; 27
 3da:	08 95       	ret
 3dc:	82 30       	cpi	r24, 0x02	; 2
 3de:	91 05       	cpc	r25, r1
 3e0:	21 f4       	brne	.+8      	; 0x3ea <pinChange+0x1ec>
 3e2:	8b b3       	in	r24, 0x1b	; 27
 3e4:	84 60       	ori	r24, 0x04	; 4
 3e6:	8b bb       	out	0x1b, r24	; 27
 3e8:	08 95       	ret
 3ea:	83 30       	cpi	r24, 0x03	; 3
 3ec:	91 05       	cpc	r25, r1
 3ee:	21 f4       	brne	.+8      	; 0x3f8 <pinChange+0x1fa>
 3f0:	8b b3       	in	r24, 0x1b	; 27
 3f2:	88 60       	ori	r24, 0x08	; 8
 3f4:	8b bb       	out	0x1b, r24	; 27
 3f6:	08 95       	ret
 3f8:	84 30       	cpi	r24, 0x04	; 4
 3fa:	91 05       	cpc	r25, r1
 3fc:	21 f4       	brne	.+8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fe:	8b b3       	in	r24, 0x1b	; 27
 400:	80 61       	ori	r24, 0x10	; 16
 402:	8b bb       	out	0x1b, r24	; 27
 404:	08 95       	ret
 406:	85 30       	cpi	r24, 0x05	; 5
 408:	91 05       	cpc	r25, r1
 40a:	21 f4       	brne	.+8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 40c:	8b b3       	in	r24, 0x1b	; 27
 40e:	80 62       	ori	r24, 0x20	; 32
 410:	8b bb       	out	0x1b, r24	; 27
 412:	08 95       	ret
 414:	86 30       	cpi	r24, 0x06	; 6
 416:	91 05       	cpc	r25, r1
 418:	21 f4       	brne	.+8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41a:	8b b3       	in	r24, 0x1b	; 27
 41c:	80 64       	ori	r24, 0x40	; 64
 41e:	8b bb       	out	0x1b, r24	; 27
 420:	08 95       	ret
 422:	87 30       	cpi	r24, 0x07	; 7
 424:	91 05       	cpc	r25, r1
 426:	21 f4       	brne	.+8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 428:	8b b3       	in	r24, 0x1b	; 27
 42a:	80 68       	ori	r24, 0x80	; 128
 42c:	8b bb       	out	0x1b, r24	; 27
 42e:	08 95       	ret
 430:	8a 30       	cpi	r24, 0x0A	; 10
 432:	91 05       	cpc	r25, r1
 434:	21 f4       	brne	.+8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 436:	88 b3       	in	r24, 0x18	; 24
 438:	81 60       	ori	r24, 0x01	; 1
 43a:	88 bb       	out	0x18, r24	; 24
 43c:	08 95       	ret
 43e:	8b 30       	cpi	r24, 0x0B	; 11
 440:	91 05       	cpc	r25, r1
 442:	21 f4       	brne	.+8      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 444:	88 b3       	in	r24, 0x18	; 24
 446:	82 60       	ori	r24, 0x02	; 2
 448:	88 bb       	out	0x18, r24	; 24
 44a:	08 95       	ret
 44c:	8c 30       	cpi	r24, 0x0C	; 12
 44e:	91 05       	cpc	r25, r1
 450:	21 f4       	brne	.+8      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 452:	88 b3       	in	r24, 0x18	; 24
 454:	84 60       	ori	r24, 0x04	; 4
 456:	88 bb       	out	0x18, r24	; 24
 458:	08 95       	ret
 45a:	8d 30       	cpi	r24, 0x0D	; 13
 45c:	91 05       	cpc	r25, r1
 45e:	21 f4       	brne	.+8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 460:	88 b3       	in	r24, 0x18	; 24
 462:	88 60       	ori	r24, 0x08	; 8
 464:	88 bb       	out	0x18, r24	; 24
 466:	08 95       	ret
 468:	8e 30       	cpi	r24, 0x0E	; 14
 46a:	91 05       	cpc	r25, r1
 46c:	21 f4       	brne	.+8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 46e:	88 b3       	in	r24, 0x18	; 24
 470:	80 61       	ori	r24, 0x10	; 16
 472:	88 bb       	out	0x18, r24	; 24
 474:	08 95       	ret
 476:	8f 30       	cpi	r24, 0x0F	; 15
 478:	91 05       	cpc	r25, r1
 47a:	21 f4       	brne	.+8      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 47c:	88 b3       	in	r24, 0x18	; 24
 47e:	80 62       	ori	r24, 0x20	; 32
 480:	88 bb       	out	0x18, r24	; 24
 482:	08 95       	ret
 484:	80 31       	cpi	r24, 0x10	; 16
 486:	91 05       	cpc	r25, r1
 488:	21 f4       	brne	.+8      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 48a:	88 b3       	in	r24, 0x18	; 24
 48c:	80 64       	ori	r24, 0x40	; 64
 48e:	88 bb       	out	0x18, r24	; 24
 490:	08 95       	ret
 492:	81 31       	cpi	r24, 0x11	; 17
 494:	91 05       	cpc	r25, r1
 496:	21 f4       	brne	.+8      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 498:	88 b3       	in	r24, 0x18	; 24
 49a:	80 68       	ori	r24, 0x80	; 128
 49c:	88 bb       	out	0x18, r24	; 24
 49e:	08 95       	ret
 4a0:	84 31       	cpi	r24, 0x14	; 20
 4a2:	91 05       	cpc	r25, r1
 4a4:	21 f4       	brne	.+8      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4a6:	85 b3       	in	r24, 0x15	; 21
 4a8:	81 60       	ori	r24, 0x01	; 1
 4aa:	85 bb       	out	0x15, r24	; 21
 4ac:	08 95       	ret
 4ae:	85 31       	cpi	r24, 0x15	; 21
 4b0:	91 05       	cpc	r25, r1
 4b2:	21 f4       	brne	.+8      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4b4:	85 b3       	in	r24, 0x15	; 21
 4b6:	82 60       	ori	r24, 0x02	; 2
 4b8:	85 bb       	out	0x15, r24	; 21
 4ba:	08 95       	ret
 4bc:	86 31       	cpi	r24, 0x16	; 22
 4be:	91 05       	cpc	r25, r1
 4c0:	21 f4       	brne	.+8      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4c2:	85 b3       	in	r24, 0x15	; 21
 4c4:	84 60       	ori	r24, 0x04	; 4
 4c6:	85 bb       	out	0x15, r24	; 21
 4c8:	08 95       	ret
 4ca:	87 31       	cpi	r24, 0x17	; 23
 4cc:	91 05       	cpc	r25, r1
 4ce:	21 f4       	brne	.+8      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4d0:	85 b3       	in	r24, 0x15	; 21
 4d2:	88 60       	ori	r24, 0x08	; 8
 4d4:	85 bb       	out	0x15, r24	; 21
 4d6:	08 95       	ret
 4d8:	88 31       	cpi	r24, 0x18	; 24
 4da:	91 05       	cpc	r25, r1
 4dc:	21 f4       	brne	.+8      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 4de:	85 b3       	in	r24, 0x15	; 21
 4e0:	80 61       	ori	r24, 0x10	; 16
 4e2:	85 bb       	out	0x15, r24	; 21
 4e4:	08 95       	ret
 4e6:	89 31       	cpi	r24, 0x19	; 25
 4e8:	91 05       	cpc	r25, r1
 4ea:	21 f4       	brne	.+8      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4ec:	85 b3       	in	r24, 0x15	; 21
 4ee:	80 62       	ori	r24, 0x20	; 32
 4f0:	85 bb       	out	0x15, r24	; 21
 4f2:	08 95       	ret
 4f4:	8a 31       	cpi	r24, 0x1A	; 26
 4f6:	91 05       	cpc	r25, r1
 4f8:	21 f4       	brne	.+8      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 4fa:	85 b3       	in	r24, 0x15	; 21
 4fc:	80 64       	ori	r24, 0x40	; 64
 4fe:	85 bb       	out	0x15, r24	; 21
 500:	08 95       	ret
 502:	8b 31       	cpi	r24, 0x1B	; 27
 504:	91 05       	cpc	r25, r1
 506:	21 f4       	brne	.+8      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 508:	85 b3       	in	r24, 0x15	; 21
 50a:	80 68       	ori	r24, 0x80	; 128
 50c:	85 bb       	out	0x15, r24	; 21
 50e:	08 95       	ret
 510:	8e 31       	cpi	r24, 0x1E	; 30
 512:	91 05       	cpc	r25, r1
 514:	21 f4       	brne	.+8      	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
 516:	82 b3       	in	r24, 0x12	; 18
 518:	81 60       	ori	r24, 0x01	; 1
 51a:	82 bb       	out	0x12, r24	; 18
 51c:	08 95       	ret
 51e:	8f 31       	cpi	r24, 0x1F	; 31
 520:	91 05       	cpc	r25, r1
 522:	21 f4       	brne	.+8      	; 0x52c <__EEPROM_REGION_LENGTH__+0x12c>
 524:	82 b3       	in	r24, 0x12	; 18
 526:	82 60       	ori	r24, 0x02	; 2
 528:	82 bb       	out	0x12, r24	; 18
 52a:	08 95       	ret
 52c:	80 32       	cpi	r24, 0x20	; 32
 52e:	91 05       	cpc	r25, r1
 530:	21 f4       	brne	.+8      	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
 532:	82 b3       	in	r24, 0x12	; 18
 534:	84 60       	ori	r24, 0x04	; 4
 536:	82 bb       	out	0x12, r24	; 18
 538:	08 95       	ret
 53a:	81 32       	cpi	r24, 0x21	; 33
 53c:	91 05       	cpc	r25, r1
 53e:	21 f4       	brne	.+8      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 540:	82 b3       	in	r24, 0x12	; 18
 542:	88 60       	ori	r24, 0x08	; 8
 544:	82 bb       	out	0x12, r24	; 18
 546:	08 95       	ret
 548:	82 32       	cpi	r24, 0x22	; 34
 54a:	91 05       	cpc	r25, r1
 54c:	21 f4       	brne	.+8      	; 0x556 <__EEPROM_REGION_LENGTH__+0x156>
 54e:	82 b3       	in	r24, 0x12	; 18
 550:	80 61       	ori	r24, 0x10	; 16
 552:	82 bb       	out	0x12, r24	; 18
 554:	08 95       	ret
 556:	83 32       	cpi	r24, 0x23	; 35
 558:	91 05       	cpc	r25, r1
 55a:	21 f4       	brne	.+8      	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
 55c:	82 b3       	in	r24, 0x12	; 18
 55e:	80 62       	ori	r24, 0x20	; 32
 560:	82 bb       	out	0x12, r24	; 18
 562:	08 95       	ret
 564:	84 32       	cpi	r24, 0x24	; 36
 566:	91 05       	cpc	r25, r1
 568:	21 f4       	brne	.+8      	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
 56a:	82 b3       	in	r24, 0x12	; 18
 56c:	80 64       	ori	r24, 0x40	; 64
 56e:	82 bb       	out	0x12, r24	; 18
 570:	08 95       	ret
 572:	85 97       	sbiw	r24, 0x25	; 37
 574:	19 f4       	brne	.+6      	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
 576:	82 b3       	in	r24, 0x12	; 18
 578:	80 68       	ori	r24, 0x80	; 128
 57a:	82 bb       	out	0x12, r24	; 18
 57c:	08 95       	ret

0000057e <Lcd4_Port>:
 57e:	cf 93       	push	r28
 580:	c8 2f       	mov	r28, r24
 582:	80 ff       	sbrs	r24, 0
 584:	07 c0       	rjmp	.+14     	; 0x594 <Lcd4_Port+0x16>
 586:	61 e0       	ldi	r22, 0x01	; 1
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	84 e1       	ldi	r24, 0x14	; 20
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinChange>
 592:	06 c0       	rjmp	.+12     	; 0x5a0 <Lcd4_Port+0x22>
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	84 e1       	ldi	r24, 0x14	; 20
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinChange>
 5a0:	c1 ff       	sbrs	r28, 1
 5a2:	07 c0       	rjmp	.+14     	; 0x5b2 <Lcd4_Port+0x34>
 5a4:	61 e0       	ldi	r22, 0x01	; 1
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	85 e1       	ldi	r24, 0x15	; 21
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinChange>
 5b0:	06 c0       	rjmp	.+12     	; 0x5be <Lcd4_Port+0x40>
 5b2:	60 e0       	ldi	r22, 0x00	; 0
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	85 e1       	ldi	r24, 0x15	; 21
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinChange>
 5be:	c2 ff       	sbrs	r28, 2
 5c0:	07 c0       	rjmp	.+14     	; 0x5d0 <Lcd4_Port+0x52>
 5c2:	61 e0       	ldi	r22, 0x01	; 1
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	86 e1       	ldi	r24, 0x16	; 22
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinChange>
 5ce:	06 c0       	rjmp	.+12     	; 0x5dc <Lcd4_Port+0x5e>
 5d0:	60 e0       	ldi	r22, 0x00	; 0
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	86 e1       	ldi	r24, 0x16	; 22
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinChange>
 5dc:	c3 ff       	sbrs	r28, 3
 5de:	07 c0       	rjmp	.+14     	; 0x5ee <Lcd4_Port+0x70>
 5e0:	61 e0       	ldi	r22, 0x01	; 1
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	87 e1       	ldi	r24, 0x17	; 23
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinChange>
 5ec:	06 c0       	rjmp	.+12     	; 0x5fa <Lcd4_Port+0x7c>
 5ee:	60 e0       	ldi	r22, 0x00	; 0
 5f0:	70 e0       	ldi	r23, 0x00	; 0
 5f2:	87 e1       	ldi	r24, 0x17	; 23
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinChange>
 5fa:	cf 91       	pop	r28
 5fc:	08 95       	ret

000005fe <Lcd4_Cmd>:
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	ec 01       	movw	r28, r24
 604:	60 e0       	ldi	r22, 0x00	; 0
 606:	70 e0       	ldi	r23, 0x00	; 0
 608:	88 e1       	ldi	r24, 0x18	; 24
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinChange>
 610:	ce 01       	movw	r24, r28
 612:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Port>
 616:	61 e0       	ldi	r22, 0x01	; 1
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	8a e1       	ldi	r24, 0x1A	; 26
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinChange>
 622:	8f ec       	ldi	r24, 0xCF	; 207
 624:	97 e0       	ldi	r25, 0x07	; 7
 626:	01 97       	sbiw	r24, 0x01	; 1
 628:	f1 f7       	brne	.-4      	; 0x626 <Lcd4_Cmd+0x28>
 62a:	00 c0       	rjmp	.+0      	; 0x62c <Lcd4_Cmd+0x2e>
 62c:	00 00       	nop
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	70 e0       	ldi	r23, 0x00	; 0
 632:	8a e1       	ldi	r24, 0x1A	; 26
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinChange>
 63a:	8f ec       	ldi	r24, 0xCF	; 207
 63c:	97 e0       	ldi	r25, 0x07	; 7
 63e:	01 97       	sbiw	r24, 0x01	; 1
 640:	f1 f7       	brne	.-4      	; 0x63e <Lcd4_Cmd+0x40>
 642:	00 c0       	rjmp	.+0      	; 0x644 <Lcd4_Cmd+0x46>
 644:	00 00       	nop
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	08 95       	ret

0000064c <Lcd4_Clear>:
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Lcd4_Cmd>
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Lcd4_Cmd>
 65c:	08 95       	ret

0000065e <Lcd4_Init>:
*purpose       : initialization of LCD
*
*/
void Lcd4_Init()
{
	Lcd4_Port(0x00);
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Port>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 666:	8f e3       	ldi	r24, 0x3F	; 63
 668:	9c e9       	ldi	r25, 0x9C	; 156
 66a:	01 97       	sbiw	r24, 0x01	; 1
 66c:	f1 f7       	brne	.-4      	; 0x66a <Lcd4_Init+0xc>
 66e:	00 c0       	rjmp	.+0      	; 0x670 <Lcd4_Init+0x12>
 670:	00 00       	nop
	_delay_ms(20);
	Lcd4_Cmd(0x03);
 672:	83 e0       	ldi	r24, 0x03	; 3
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Lcd4_Cmd>
 67a:	8f e0       	ldi	r24, 0x0F	; 15
 67c:	97 e2       	ldi	r25, 0x27	; 39
 67e:	01 97       	sbiw	r24, 0x01	; 1
 680:	f1 f7       	brne	.-4      	; 0x67e <Lcd4_Init+0x20>
 682:	00 c0       	rjmp	.+0      	; 0x684 <Lcd4_Init+0x26>
 684:	00 00       	nop
	_delay_ms(5);
	Lcd4_Cmd(0x03);
 686:	83 e0       	ldi	r24, 0x03	; 3
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Lcd4_Cmd>
 68e:	8f ee       	ldi	r24, 0xEF	; 239
 690:	95 e5       	ldi	r25, 0x55	; 85
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	f1 f7       	brne	.-4      	; 0x692 <Lcd4_Init+0x34>
 696:	00 c0       	rjmp	.+0      	; 0x698 <Lcd4_Init+0x3a>
 698:	00 00       	nop
	_delay_ms(11);
	Lcd4_Cmd(0x03);
 69a:	83 e0       	ldi	r24, 0x03	; 3
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 6a2:	82 e0       	ldi	r24, 0x02	; 2
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 6aa:	82 e0       	ldi	r24, 0x02	; 2
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 6b2:	88 e0       	ldi	r24, 0x08	; 8
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 6c2:	8c e0       	ldi	r24, 0x0C	; 12
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 6ca:	80 e0       	ldi	r24, 0x00	; 0
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
 6d2:	86 e0       	ldi	r24, 0x06	; 6
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <Lcd4_Cmd>
 6da:	08 95       	ret

000006dc <Lcd4_Write_Char>:
*return		   : void
*purpose       : WRITING CAHR ON LCD
*
*/
void Lcd4_Write_Char(unsigned char UN_CH_LCD_CHAR)
{
 6dc:	cf 93       	push	r28
 6de:	df 93       	push	r29
	unsigned char UN_CH_LCD_VAR5 = 0 , UN_CH_LCD_VAR6 = 0 ;
	UN_CH_LCD_VAR5 = UN_CH_LCD_CHAR & 0x0F;
 6e0:	d8 2f       	mov	r29, r24
 6e2:	df 70       	andi	r29, 0x0F	; 15
	UN_CH_LCD_VAR6 = UN_CH_LCD_CHAR & 0xF0;
 6e4:	c8 2f       	mov	r28, r24
 6e6:	c0 7f       	andi	r28, 0xF0	; 240
	pinChange(RS,1);             // => RS = 1
 6e8:	61 e0       	ldi	r22, 0x01	; 1
 6ea:	70 e0       	ldi	r23, 0x00	; 0
 6ec:	88 e1       	ldi	r24, 0x18	; 24
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinChange>
	Lcd4_Port(UN_CH_LCD_VAR6>>4);             //Data transfer
 6f4:	8c 2f       	mov	r24, r28
 6f6:	82 95       	swap	r24
 6f8:	8f 70       	andi	r24, 0x0F	; 15
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Port>
	pinChange(EN,1);
 700:	61 e0       	ldi	r22, 0x01	; 1
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	8a e1       	ldi	r24, 0x1A	; 26
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinChange>
 70c:	8f ec       	ldi	r24, 0xCF	; 207
 70e:	97 e0       	ldi	r25, 0x07	; 7
 710:	01 97       	sbiw	r24, 0x01	; 1
 712:	f1 f7       	brne	.-4      	; 0x710 <Lcd4_Write_Char+0x34>
 714:	00 c0       	rjmp	.+0      	; 0x716 <Lcd4_Write_Char+0x3a>
 716:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 718:	60 e0       	ldi	r22, 0x00	; 0
 71a:	70 e0       	ldi	r23, 0x00	; 0
 71c:	8a e1       	ldi	r24, 0x1A	; 26
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinChange>
 724:	8f ec       	ldi	r24, 0xCF	; 207
 726:	97 e0       	ldi	r25, 0x07	; 7
 728:	01 97       	sbiw	r24, 0x01	; 1
 72a:	f1 f7       	brne	.-4      	; 0x728 <Lcd4_Write_Char+0x4c>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <Lcd4_Write_Char+0x52>
 72e:	00 00       	nop
	_delay_ms(1);
	Lcd4_Port(UN_CH_LCD_VAR5);
 730:	8d 2f       	mov	r24, r29
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 bf 02 	call	0x57e	; 0x57e <Lcd4_Port>
	pinChange(EN,1);
 738:	61 e0       	ldi	r22, 0x01	; 1
 73a:	70 e0       	ldi	r23, 0x00	; 0
 73c:	8a e1       	ldi	r24, 0x1A	; 26
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinChange>
 744:	8f ec       	ldi	r24, 0xCF	; 207
 746:	97 e0       	ldi	r25, 0x07	; 7
 748:	01 97       	sbiw	r24, 0x01	; 1
 74a:	f1 f7       	brne	.-4      	; 0x748 <Lcd4_Write_Char+0x6c>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <Lcd4_Write_Char+0x72>
 74e:	00 00       	nop
	_delay_ms(1);
	pinChange(EN,0);
 750:	60 e0       	ldi	r22, 0x00	; 0
 752:	70 e0       	ldi	r23, 0x00	; 0
 754:	8a e1       	ldi	r24, 0x1A	; 26
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pinChange>
 75c:	8f ec       	ldi	r24, 0xCF	; 207
 75e:	97 e0       	ldi	r25, 0x07	; 7
 760:	01 97       	sbiw	r24, 0x01	; 1
 762:	f1 f7       	brne	.-4      	; 0x760 <Lcd4_Write_Char+0x84>
 764:	00 c0       	rjmp	.+0      	; 0x766 <Lcd4_Write_Char+0x8a>
 766:	00 00       	nop
	_delay_ms(1);
}
 768:	df 91       	pop	r29
 76a:	cf 91       	pop	r28
 76c:	08 95       	ret

0000076e <Lcd4_Write_String>:
*return		   : void
*purpose       : Writing a string on LCD
*
*/
void Lcd4_Write_String(unsigned char *CH_LCD_STRING_PTR)
{
 76e:	0f 93       	push	r16
 770:	1f 93       	push	r17
 772:	cf 93       	push	r28
 774:	8c 01       	movw	r16, r24
	unsigned char UN_ch_LCD_COUNTER ;
	for(UN_ch_LCD_COUNTER=0;CH_LCD_STRING_PTR[UN_ch_LCD_COUNTER]!='\0';UN_ch_LCD_COUNTER++)
 776:	c0 e0       	ldi	r28, 0x00	; 0
 778:	03 c0       	rjmp	.+6      	; 0x780 <Lcd4_Write_String+0x12>
	{
		Lcd4_Write_Char(CH_LCD_STRING_PTR[UN_ch_LCD_COUNTER]);
 77a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <Lcd4_Write_Char>
*
*/
void Lcd4_Write_String(unsigned char *CH_LCD_STRING_PTR)
{
	unsigned char UN_ch_LCD_COUNTER ;
	for(UN_ch_LCD_COUNTER=0;CH_LCD_STRING_PTR[UN_ch_LCD_COUNTER]!='\0';UN_ch_LCD_COUNTER++)
 77e:	cf 5f       	subi	r28, 0xFF	; 255
 780:	f8 01       	movw	r30, r16
 782:	ec 0f       	add	r30, r28
 784:	f1 1d       	adc	r31, r1
 786:	80 81       	ld	r24, Z
 788:	81 11       	cpse	r24, r1
 78a:	f7 cf       	rjmp	.-18     	; 0x77a <Lcd4_Write_String+0xc>
	{
		Lcd4_Write_Char(CH_LCD_STRING_PTR[UN_ch_LCD_COUNTER]);
	}
}
 78c:	cf 91       	pop	r28
 78e:	1f 91       	pop	r17
 790:	0f 91       	pop	r16
 792:	08 95       	ret

00000794 <main>:
#include "lcd4.h"
#include <stdlib.h>


int main(void)
{
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	cd b7       	in	r28, 0x3d	; 61
 79a:	de b7       	in	r29, 0x3e	; 62
 79c:	60 97       	sbiw	r28, 0x10	; 16
 79e:	0f b6       	in	r0, 0x3f	; 63
 7a0:	f8 94       	cli
 7a2:	de bf       	out	0x3e, r29	; 62
 7a4:	0f be       	out	0x3f, r0	; 63
 7a6:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xff;
 7a8:	8f ef       	ldi	r24, 0xFF	; 255
 7aa:	84 bb       	out	0x14, r24	; 20
	Lcd4_Init();
 7ac:	0e 94 2f 03 	call	0x65e	; 0x65e <Lcd4_Init>
	ADC_CONFIG s1;
	s1.prescaler_selection = 128;
 7b0:	80 e8       	ldi	r24, 0x80	; 128
 7b2:	8b 83       	std	Y+3, r24	; 0x03
	s1.ref_selection = AVCC ;
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	89 83       	std	Y+1, r24	; 0x01
	ADC_INIT(&s1);
 7b8:	ce 01       	movw	r24, r28
 7ba:	01 96       	adiw	r24, 0x01	; 1
 7bc:	0e 94 45 00 	call	0x8a	; 0x8a <ADC_INIT>
	int x = 0 ;
	unsigned char y[10];
    /* Replace with your application code */
    while (1) 
    {
		Lcd4_Clear();
 7c0:	0e 94 26 03 	call	0x64c	; 0x64c <Lcd4_Clear>
		x=ADC_READ(0);
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	0e 94 c1 00 	call	0x182	; 0x182 <ADC_READ>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7ca:	4a e0       	ldi	r20, 0x0A	; 10
 7cc:	be 01       	movw	r22, r28
 7ce:	69 5f       	subi	r22, 0xF9	; 249
 7d0:	7f 4f       	sbci	r23, 0xFF	; 255
 7d2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__itoa_ncheck>
		itoa(x,y,10U);
		Lcd4_Write_String(y);
 7d6:	ce 01       	movw	r24, r28
 7d8:	07 96       	adiw	r24, 0x07	; 7
 7da:	0e 94 b7 03 	call	0x76e	; 0x76e <Lcd4_Write_String>
 7de:	2f ef       	ldi	r18, 0xFF	; 255
 7e0:	83 e2       	ldi	r24, 0x23	; 35
 7e2:	94 ef       	ldi	r25, 0xF4	; 244
 7e4:	21 50       	subi	r18, 0x01	; 1
 7e6:	80 40       	sbci	r24, 0x00	; 0
 7e8:	90 40       	sbci	r25, 0x00	; 0
 7ea:	e1 f7       	brne	.-8      	; 0x7e4 <main+0x50>
 7ec:	00 c0       	rjmp	.+0      	; 0x7ee <main+0x5a>
 7ee:	00 00       	nop
 7f0:	e7 cf       	rjmp	.-50     	; 0x7c0 <main+0x2c>

000007f2 <__tablejump2__>:
 7f2:	ee 0f       	add	r30, r30
 7f4:	ff 1f       	adc	r31, r31
 7f6:	05 90       	lpm	r0, Z+
 7f8:	f4 91       	lpm	r31, Z
 7fa:	e0 2d       	mov	r30, r0
 7fc:	09 94       	ijmp

000007fe <__itoa_ncheck>:
 7fe:	bb 27       	eor	r27, r27
 800:	4a 30       	cpi	r20, 0x0A	; 10
 802:	31 f4       	brne	.+12     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 804:	99 23       	and	r25, r25
 806:	22 f4       	brpl	.+8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 808:	bd e2       	ldi	r27, 0x2D	; 45
 80a:	90 95       	com	r25
 80c:	81 95       	neg	r24
 80e:	9f 4f       	sbci	r25, 0xFF	; 255
 810:	0c 94 0b 04 	jmp	0x816	; 0x816 <__utoa_common>

00000814 <__utoa_ncheck>:
 814:	bb 27       	eor	r27, r27

00000816 <__utoa_common>:
 816:	fb 01       	movw	r30, r22
 818:	55 27       	eor	r21, r21
 81a:	aa 27       	eor	r26, r26
 81c:	88 0f       	add	r24, r24
 81e:	99 1f       	adc	r25, r25
 820:	aa 1f       	adc	r26, r26
 822:	a4 17       	cp	r26, r20
 824:	10 f0       	brcs	.+4      	; 0x82a <__utoa_common+0x14>
 826:	a4 1b       	sub	r26, r20
 828:	83 95       	inc	r24
 82a:	50 51       	subi	r21, 0x10	; 16
 82c:	b9 f7       	brne	.-18     	; 0x81c <__utoa_common+0x6>
 82e:	a0 5d       	subi	r26, 0xD0	; 208
 830:	aa 33       	cpi	r26, 0x3A	; 58
 832:	08 f0       	brcs	.+2      	; 0x836 <__utoa_common+0x20>
 834:	a9 5d       	subi	r26, 0xD9	; 217
 836:	a1 93       	st	Z+, r26
 838:	00 97       	sbiw	r24, 0x00	; 0
 83a:	79 f7       	brne	.-34     	; 0x81a <__utoa_common+0x4>
 83c:	b1 11       	cpse	r27, r1
 83e:	b1 93       	st	Z+, r27
 840:	11 92       	st	Z+, r1
 842:	cb 01       	movw	r24, r22
 844:	0c 94 24 04 	jmp	0x848	; 0x848 <strrev>

00000848 <strrev>:
 848:	dc 01       	movw	r26, r24
 84a:	fc 01       	movw	r30, r24
 84c:	67 2f       	mov	r22, r23
 84e:	71 91       	ld	r23, Z+
 850:	77 23       	and	r23, r23
 852:	e1 f7       	brne	.-8      	; 0x84c <strrev+0x4>
 854:	32 97       	sbiw	r30, 0x02	; 2
 856:	04 c0       	rjmp	.+8      	; 0x860 <__stack+0x1>
 858:	7c 91       	ld	r23, X
 85a:	6d 93       	st	X+, r22
 85c:	70 83       	st	Z, r23
 85e:	62 91       	ld	r22, -Z
 860:	ae 17       	cp	r26, r30
 862:	bf 07       	cpc	r27, r31
 864:	c8 f3       	brcs	.-14     	; 0x858 <strrev+0x10>
 866:	08 95       	ret

00000868 <_exit>:
 868:	f8 94       	cli

0000086a <__stop_program>:
 86a:	ff cf       	rjmp	.-2      	; 0x86a <__stop_program>
