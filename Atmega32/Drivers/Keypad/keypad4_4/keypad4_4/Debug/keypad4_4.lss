
keypad4_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ee  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000621  00000000  00000000  00000aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048b  00000000  00000000  0000110f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  0000159c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034c  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008f  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000019cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 64 01 	call	0x2c8	; 0x2c8 <main>
  64:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <v_Keypad_Init>:
*/

void v_Keypad_Init(void)
{
	//set the rows direction as output
	ROW0_DDR |=(1U<<ROW0);
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	81 60       	ori	r24, 0x01	; 1
  70:	84 bb       	out	0x14, r24	; 20
	ROW1_DDR |=(1U<<ROW1);
  72:	84 b3       	in	r24, 0x14	; 20
  74:	82 60       	ori	r24, 0x02	; 2
  76:	84 bb       	out	0x14, r24	; 20
	ROW2_DDR |=(1U<<ROW2);
  78:	84 b3       	in	r24, 0x14	; 20
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	84 bb       	out	0x14, r24	; 20
	ROW3_DDR |=(1U<<ROW3);
  7e:	84 b3       	in	r24, 0x14	; 20
  80:	88 60       	ori	r24, 0x08	; 8
  82:	84 bb       	out	0x14, r24	; 20
	//set the line direction as input
	LINE0_DDR &=~(1U<<LINE0);
  84:	84 b3       	in	r24, 0x14	; 20
  86:	8f 7e       	andi	r24, 0xEF	; 239
  88:	84 bb       	out	0x14, r24	; 20
	LINE1_DDR &=~(1U<<LINE1);
  8a:	84 b3       	in	r24, 0x14	; 20
  8c:	8f 7d       	andi	r24, 0xDF	; 223
  8e:	84 bb       	out	0x14, r24	; 20
	LINE2_DDR &=~(1U<<LINE2);
  90:	84 b3       	in	r24, 0x14	; 20
  92:	8f 7b       	andi	r24, 0xBF	; 191
  94:	84 bb       	out	0x14, r24	; 20
	LINE3_DDR &=~(1U<<LINE3);
  96:	84 b3       	in	r24, 0x14	; 20
  98:	8f 77       	andi	r24, 0x7F	; 127
  9a:	84 bb       	out	0x14, r24	; 20
	//enable line pullup
	LINE0_PULLUP |=(1U<<LINE0);
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	85 bb       	out	0x15, r24	; 21
	LINE1_PULLUP |=(1U<<LINE1);
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	80 62       	ori	r24, 0x20	; 32
  a6:	85 bb       	out	0x15, r24	; 21
	LINE2_PULLUP |=(1U<<LINE2);
  a8:	85 b3       	in	r24, 0x15	; 21
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	85 bb       	out	0x15, r24	; 21
	LINE3_PULLUP |=(1U<<LINE3);
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bb       	out	0x15, r24	; 21
	//set the rows high
	ROW0_PORT |=(1U<<ROW0);
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	85 bb       	out	0x15, r24	; 21
	ROW1_PORT |=(1U<<ROW1);
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	85 bb       	out	0x15, r24	; 21
	ROW2_PORT |=(1U<<ROW2);
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	85 bb       	out	0x15, r24	; 21
	ROW3_PORT |=(1U<<ROW3);
  c6:	85 b3       	in	r24, 0x15	; 21
  c8:	88 60       	ori	r24, 0x08	; 8
  ca:	85 bb       	out	0x15, r24	; 21
  cc:	08 95       	ret

000000ce <u8_cKeypad_Scan>:
*/
uint8_t u8_cKeypad_Scan(void)
{
	uint8_t row=0,input;
	//loop on row
	for(row=0;row<4;row++)
  ce:	40 e0       	ldi	r20, 0x00	; 0
  d0:	9a c0       	rjmp	.+308    	; 0x206 <u8_cKeypad_Scan+0x138>
	{
		//set all row high
		ROW0_PORT |=(1U<<ROW0);
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	85 bb       	out	0x15, r24	; 21
		ROW1_PORT |=(1U<<ROW1);
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	85 bb       	out	0x15, r24	; 21
		ROW2_PORT |=(1U<<ROW2);
  de:	85 b3       	in	r24, 0x15	; 21
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	85 bb       	out	0x15, r24	; 21
		ROW3_PORT |=(1U<<ROW3);
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	88 60       	ori	r24, 0x08	; 8
  e8:	85 bb       	out	0x15, r24	; 21
		//clear row number from iteration
		switch(row)
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	51 f0       	breq	.+20     	; 0x102 <u8_cKeypad_Scan+0x34>
  ee:	28 f0       	brcs	.+10     	; 0xfa <u8_cKeypad_Scan+0x2c>
  f0:	42 30       	cpi	r20, 0x02	; 2
  f2:	59 f0       	breq	.+22     	; 0x10a <u8_cKeypad_Scan+0x3c>
  f4:	43 30       	cpi	r20, 0x03	; 3
  f6:	69 f0       	breq	.+26     	; 0x112 <u8_cKeypad_Scan+0x44>
  f8:	0f c0       	rjmp	.+30     	; 0x118 <u8_cKeypad_Scan+0x4a>
		{
			case 0:ROW0_PORT &=~(1U<<ROW0);
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	8e 7f       	andi	r24, 0xFE	; 254
  fe:	85 bb       	out	0x15, r24	; 21
			break;
 100:	0b c0       	rjmp	.+22     	; 0x118 <u8_cKeypad_Scan+0x4a>
			case 1:ROW1_PORT &=~(1U<<ROW1);
 102:	85 b3       	in	r24, 0x15	; 21
 104:	8d 7f       	andi	r24, 0xFD	; 253
 106:	85 bb       	out	0x15, r24	; 21
			break;
 108:	07 c0       	rjmp	.+14     	; 0x118 <u8_cKeypad_Scan+0x4a>
			case 2:ROW2_PORT &=~(1U<<ROW2);
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	8b 7f       	andi	r24, 0xFB	; 251
 10e:	85 bb       	out	0x15, r24	; 21
			break;
 110:	03 c0       	rjmp	.+6      	; 0x118 <u8_cKeypad_Scan+0x4a>
			case 3:ROW3_PORT &=~(1U<<ROW3);
 112:	85 b3       	in	r24, 0x15	; 21
 114:	87 7f       	andi	r24, 0xF7	; 247
 116:	85 bb       	out	0x15, r24	; 21
			break;
		}
		//read the input
		input  = (((LINE0_PIN&(1U<<LINE0))>>LINE0)<<4);
 118:	93 b3       	in	r25, 0x13	; 19
 11a:	29 2f       	mov	r18, r25
 11c:	20 71       	andi	r18, 0x10	; 16
		input |= (((LINE1_PIN&(1U<<LINE1))>>LINE1)<<5);
 11e:	53 b3       	in	r21, 0x13	; 19
 120:	50 72       	andi	r21, 0x20	; 32
 122:	95 2f       	mov	r25, r21
 124:	92 2b       	or	r25, r18
		input |= (((LINE2_PIN&(1U<<LINE2))>>LINE2)<<6);
 126:	53 b3       	in	r21, 0x13	; 19
 128:	50 74       	andi	r21, 0x40	; 64
 12a:	59 2b       	or	r21, r25
		input |= (((LINE3_PIN&(1U<<LINE3))>>LINE3)<<7);
 12c:	83 b3       	in	r24, 0x13	; 19
 12e:	98 2f       	mov	r25, r24
 130:	99 1f       	adc	r25, r25
 132:	99 27       	eor	r25, r25
 134:	99 1f       	adc	r25, r25
 136:	89 2f       	mov	r24, r25
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	96 95       	lsr	r25
 13c:	98 2f       	mov	r25, r24
 13e:	88 27       	eor	r24, r24
 140:	97 95       	ror	r25
 142:	87 95       	ror	r24
 144:	58 2b       	or	r21, r24
		//0xF0
		//if it was input
		if(ALL_LINES != 1)
 146:	83 b3       	in	r24, 0x13	; 19
 148:	80 71       	andi	r24, 0x10	; 16
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	9c 01       	movw	r18, r24
 14e:	32 95       	swap	r19
 150:	22 95       	swap	r18
 152:	2f 70       	andi	r18, 0x0F	; 15
 154:	23 27       	eor	r18, r19
 156:	3f 70       	andi	r19, 0x0F	; 15
 158:	23 27       	eor	r18, r19
 15a:	93 b3       	in	r25, 0x13	; 19
 15c:	90 72       	andi	r25, 0x20	; 32
 15e:	89 2f       	mov	r24, r25
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	96 95       	lsr	r25
 164:	87 95       	ror	r24
 166:	92 95       	swap	r25
 168:	82 95       	swap	r24
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	89 27       	eor	r24, r25
 16e:	9f 70       	andi	r25, 0x0F	; 15
 170:	89 27       	eor	r24, r25
 172:	82 23       	and	r24, r18
 174:	93 23       	and	r25, r19
 176:	23 b3       	in	r18, 0x13	; 19
 178:	20 74       	andi	r18, 0x40	; 64
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	00 24       	eor	r0, r0
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	00 1c       	adc	r0, r0
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	00 1c       	adc	r0, r0
 18a:	23 2f       	mov	r18, r19
 18c:	30 2d       	mov	r19, r0
 18e:	82 23       	and	r24, r18
 190:	93 23       	and	r25, r19
 192:	23 b3       	in	r18, 0x13	; 19
 194:	22 1f       	adc	r18, r18
 196:	22 27       	eor	r18, r18
 198:	22 1f       	adc	r18, r18
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	82 23       	and	r24, r18
 19e:	93 23       	and	r25, r19
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	81 f1       	breq	.+96     	; 0x204 <u8_cKeypad_Scan+0x136>
		{
			//wait till the input is gone
			while(ALL_LINES != 1);
 1a4:	83 b3       	in	r24, 0x13	; 19
 1a6:	80 71       	andi	r24, 0x10	; 16
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	9c 01       	movw	r18, r24
 1ac:	32 95       	swap	r19
 1ae:	22 95       	swap	r18
 1b0:	2f 70       	andi	r18, 0x0F	; 15
 1b2:	23 27       	eor	r18, r19
 1b4:	3f 70       	andi	r19, 0x0F	; 15
 1b6:	23 27       	eor	r18, r19
 1b8:	93 b3       	in	r25, 0x13	; 19
 1ba:	90 72       	andi	r25, 0x20	; 32
 1bc:	89 2f       	mov	r24, r25
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	96 95       	lsr	r25
 1c2:	87 95       	ror	r24
 1c4:	92 95       	swap	r25
 1c6:	82 95       	swap	r24
 1c8:	8f 70       	andi	r24, 0x0F	; 15
 1ca:	89 27       	eor	r24, r25
 1cc:	9f 70       	andi	r25, 0x0F	; 15
 1ce:	89 27       	eor	r24, r25
 1d0:	82 23       	and	r24, r18
 1d2:	93 23       	and	r25, r19
 1d4:	23 b3       	in	r18, 0x13	; 19
 1d6:	20 74       	andi	r18, 0x40	; 64
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	00 24       	eor	r0, r0
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	00 1c       	adc	r0, r0
 1e2:	22 0f       	add	r18, r18
 1e4:	33 1f       	adc	r19, r19
 1e6:	00 1c       	adc	r0, r0
 1e8:	23 2f       	mov	r18, r19
 1ea:	30 2d       	mov	r19, r0
 1ec:	82 23       	and	r24, r18
 1ee:	93 23       	and	r25, r19
 1f0:	23 b3       	in	r18, 0x13	; 19
 1f2:	22 1f       	adc	r18, r18
 1f4:	22 27       	eor	r18, r18
 1f6:	22 1f       	adc	r18, r18
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	82 23       	and	r24, r18
 1fc:	93 23       	and	r25, r19
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	89 f6       	brne	.-94     	; 0x1a4 <u8_cKeypad_Scan+0xd6>
 202:	04 c0       	rjmp	.+8      	; 0x20c <u8_cKeypad_Scan+0x13e>
*/
uint8_t u8_cKeypad_Scan(void)
{
	uint8_t row=0,input;
	//loop on row
	for(row=0;row<4;row++)
 204:	4f 5f       	subi	r20, 0xFF	; 255
 206:	44 30       	cpi	r20, 0x04	; 4
 208:	08 f4       	brcc	.+2      	; 0x20c <u8_cKeypad_Scan+0x13e>
 20a:	63 cf       	rjmp	.-314    	; 0xd2 <u8_cKeypad_Scan+0x4>
			//wait till the input is gone
			while(ALL_LINES != 1);
			break;
		}
	}
	if(row == 4)
 20c:	44 30       	cpi	r20, 0x04	; 4
 20e:	09 f4       	brne	.+2      	; 0x212 <u8_cKeypad_Scan+0x144>
 210:	4f c0       	rjmp	.+158    	; 0x2b0 <u8_cKeypad_Scan+0x1e2>
	{
		return 0;
	}
	//switch the rows
	switch(row)
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	c1 f0       	breq	.+48     	; 0x246 <u8_cKeypad_Scan+0x178>
 216:	28 f0       	brcs	.+10     	; 0x222 <u8_cKeypad_Scan+0x154>
 218:	42 30       	cpi	r20, 0x02	; 2
 21a:	31 f1       	breq	.+76     	; 0x268 <u8_cKeypad_Scan+0x19a>
 21c:	43 30       	cpi	r20, 0x03	; 3
 21e:	a9 f1       	breq	.+106    	; 0x28a <u8_cKeypad_Scan+0x1bc>
 220:	49 c0       	rjmp	.+146    	; 0x2b4 <u8_cKeypad_Scan+0x1e6>
	{
		case 0://switch the input
		switch(input)
 222:	50 3b       	cpi	r21, 0xB0	; 176
 224:	09 f4       	brne	.+2      	; 0x228 <u8_cKeypad_Scan+0x15a>
 226:	48 c0       	rjmp	.+144    	; 0x2b8 <u8_cKeypad_Scan+0x1ea>
 228:	18 f4       	brcc	.+6      	; 0x230 <u8_cKeypad_Scan+0x162>
 22a:	50 37       	cpi	r21, 0x70	; 112
 22c:	31 f0       	breq	.+12     	; 0x23a <u8_cKeypad_Scan+0x16c>
 22e:	0b c0       	rjmp	.+22     	; 0x246 <u8_cKeypad_Scan+0x178>
 230:	50 3d       	cpi	r21, 0xD0	; 208
 232:	29 f0       	breq	.+10     	; 0x23e <u8_cKeypad_Scan+0x170>
 234:	50 3e       	cpi	r21, 0xE0	; 224
 236:	29 f0       	breq	.+10     	; 0x242 <u8_cKeypad_Scan+0x174>
 238:	06 c0       	rjmp	.+12     	; 0x246 <u8_cKeypad_Scan+0x178>
		{
			case 0x70: return '/';
 23a:	8f e2       	ldi	r24, 0x2F	; 47
 23c:	08 95       	ret
			case 0xB0: return '9';
			case 0xD0: return '8';
 23e:	88 e3       	ldi	r24, 0x38	; 56
 240:	08 95       	ret
			case 0xE0: return '7';
 242:	87 e3       	ldi	r24, 0x37	; 55
 244:	08 95       	ret
		}
		case 1://switch the input
		switch(input)
 246:	50 3b       	cpi	r21, 0xB0	; 176
 248:	c9 f1       	breq	.+114    	; 0x2bc <u8_cKeypad_Scan+0x1ee>
 24a:	18 f4       	brcc	.+6      	; 0x252 <u8_cKeypad_Scan+0x184>
 24c:	50 37       	cpi	r21, 0x70	; 112
 24e:	31 f0       	breq	.+12     	; 0x25c <u8_cKeypad_Scan+0x18e>
 250:	0b c0       	rjmp	.+22     	; 0x268 <u8_cKeypad_Scan+0x19a>
 252:	50 3d       	cpi	r21, 0xD0	; 208
 254:	29 f0       	breq	.+10     	; 0x260 <u8_cKeypad_Scan+0x192>
 256:	50 3e       	cpi	r21, 0xE0	; 224
 258:	29 f0       	breq	.+10     	; 0x264 <u8_cKeypad_Scan+0x196>
 25a:	06 c0       	rjmp	.+12     	; 0x268 <u8_cKeypad_Scan+0x19a>
		{
			case 0x70: return '*';
 25c:	8a e2       	ldi	r24, 0x2A	; 42
 25e:	08 95       	ret
			case 0xB0: return '6';
			case 0xD0: return '5';
 260:	85 e3       	ldi	r24, 0x35	; 53
 262:	08 95       	ret
			case 0xE0: return '4';
 264:	84 e3       	ldi	r24, 0x34	; 52
 266:	08 95       	ret
		}
		case 2://switch the input
		switch(input)
 268:	50 3b       	cpi	r21, 0xB0	; 176
 26a:	51 f1       	breq	.+84     	; 0x2c0 <u8_cKeypad_Scan+0x1f2>
 26c:	18 f4       	brcc	.+6      	; 0x274 <u8_cKeypad_Scan+0x1a6>
 26e:	50 37       	cpi	r21, 0x70	; 112
 270:	31 f0       	breq	.+12     	; 0x27e <u8_cKeypad_Scan+0x1b0>
 272:	0b c0       	rjmp	.+22     	; 0x28a <u8_cKeypad_Scan+0x1bc>
 274:	50 3d       	cpi	r21, 0xD0	; 208
 276:	29 f0       	breq	.+10     	; 0x282 <u8_cKeypad_Scan+0x1b4>
 278:	50 3e       	cpi	r21, 0xE0	; 224
 27a:	29 f0       	breq	.+10     	; 0x286 <u8_cKeypad_Scan+0x1b8>
 27c:	06 c0       	rjmp	.+12     	; 0x28a <u8_cKeypad_Scan+0x1bc>
		{
			case 0x70: return '-';
 27e:	8d e2       	ldi	r24, 0x2D	; 45
 280:	08 95       	ret
			case 0xB0: return '3';
			case 0xD0: return '2';
 282:	82 e3       	ldi	r24, 0x32	; 50
 284:	08 95       	ret
			case 0xE0: return '1';
 286:	81 e3       	ldi	r24, 0x31	; 49
 288:	08 95       	ret
		}
		case 3://switch the input
		switch(input)
 28a:	50 3b       	cpi	r21, 0xB0	; 176
 28c:	d9 f0       	breq	.+54     	; 0x2c4 <u8_cKeypad_Scan+0x1f6>
 28e:	18 f4       	brcc	.+6      	; 0x296 <u8_cKeypad_Scan+0x1c8>
 290:	50 37       	cpi	r21, 0x70	; 112
 292:	31 f0       	breq	.+12     	; 0x2a0 <u8_cKeypad_Scan+0x1d2>
 294:	07 c0       	rjmp	.+14     	; 0x2a4 <u8_cKeypad_Scan+0x1d6>
 296:	50 3d       	cpi	r21, 0xD0	; 208
 298:	39 f0       	breq	.+14     	; 0x2a8 <u8_cKeypad_Scan+0x1da>
 29a:	50 3e       	cpi	r21, 0xE0	; 224
 29c:	39 f0       	breq	.+14     	; 0x2ac <u8_cKeypad_Scan+0x1de>
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <u8_cKeypad_Scan+0x1d6>
		{
			case 0x70: return '+';
 2a0:	8b e2       	ldi	r24, 0x2B	; 43
 2a2:	08 95       	ret
			case 0xB0: return '=';
			case 0xD0: return '0';
			case 0xE0: return 'C';
		}
	}
	return 0;
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	08 95       	ret
		case 3://switch the input
		switch(input)
		{
			case 0x70: return '+';
			case 0xB0: return '=';
			case 0xD0: return '0';
 2a8:	80 e3       	ldi	r24, 0x30	; 48
 2aa:	08 95       	ret
			case 0xE0: return 'C';
 2ac:	83 e4       	ldi	r24, 0x43	; 67
 2ae:	08 95       	ret
			break;
		}
	}
	if(row == 4)
	{
		return 0;
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	08 95       	ret
			case 0xB0: return '=';
			case 0xD0: return '0';
			case 0xE0: return 'C';
		}
	}
	return 0;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret
	{
		case 0://switch the input
		switch(input)
		{
			case 0x70: return '/';
			case 0xB0: return '9';
 2b8:	89 e3       	ldi	r24, 0x39	; 57
 2ba:	08 95       	ret
		}
		case 1://switch the input
		switch(input)
		{
			case 0x70: return '*';
			case 0xB0: return '6';
 2bc:	86 e3       	ldi	r24, 0x36	; 54
 2be:	08 95       	ret
		}
		case 2://switch the input
		switch(input)
		{
			case 0x70: return '-';
			case 0xB0: return '3';
 2c0:	83 e3       	ldi	r24, 0x33	; 51
 2c2:	08 95       	ret
		}
		case 3://switch the input
		switch(input)
		{
			case 0x70: return '+';
			case 0xB0: return '=';
 2c4:	8d e3       	ldi	r24, 0x3D	; 61
			case 0xD0: return '0';
			case 0xE0: return 'C';
		}
	}
	return 0;
 2c6:	08 95       	ret

000002c8 <main>:
#include "keypad.h"
#define F_CPU 8000000UL
#include <util/delay.h>
int main(void)
{
	v_Keypad_Init();
 2c8:	0e 94 36 00 	call	0x6c	; 0x6c <v_Keypad_Init>
	DDRA = 0xff;
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0;
 2d0:	1b ba       	out	0x1b, r1	; 27
	int a = 0;
    /* Replace with your application code */
    while (1) 
    {
		PORTA =0;
 2d2:	1b ba       	out	0x1b, r1	; 27
		//_delay_ms(100);
		a = u8_cKeypad_Scan();
 2d4:	0e 94 67 00 	call	0xce	; 0xce <u8_cKeypad_Scan>
		
		if(a!=0)
 2d8:	88 23       	and	r24, r24
 2da:	d9 f3       	breq	.-10     	; 0x2d2 <main+0xa>
		{
			PORTA =a-48;
 2dc:	80 53       	subi	r24, 0x30	; 48
 2de:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e0:	2f ef       	ldi	r18, 0xFF	; 255
 2e2:	81 ee       	ldi	r24, 0xE1	; 225
 2e4:	94 e0       	ldi	r25, 0x04	; 4
 2e6:	21 50       	subi	r18, 0x01	; 1
 2e8:	80 40       	sbci	r24, 0x00	; 0
 2ea:	90 40       	sbci	r25, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <main+0x1e>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <main+0x28>
 2f0:	00 00       	nop
 2f2:	ef cf       	rjmp	.-34     	; 0x2d2 <main+0xa>

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
