
TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000002b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a7  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c5  00000000  00000000  00000c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000446  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001710  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000416  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000db  00000000  00000000  00001b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001c59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#define F_CPU 8000000UL
#include "TIMER.h"
#include <util/delay.h>

int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	2a 97       	sbiw	r28, 0x0a	; 10
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
	t_init t1;
	t1.timer_n = TIMER_0;
  90:	19 82       	std	Y+1, r1	; 0x01
	t1.mode = TIMER_0_FAST_PWM_MODE;
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	8a 83       	std	Y+2, r24	; 0x02
	t1.clock_select = CLK_8_MODE ;
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	8c 83       	std	Y+4, r24	; 0x04
  a0:	9d 83       	std	Y+5, r25	; 0x05
  a2:	ae 83       	std	Y+6, r26	; 0x06
  a4:	bf 83       	std	Y+7, r27	; 0x07
	t1.com	 = CLEAR_OC_MODE ;
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	8b 83       	std	Y+3, r24	; 0x03
	timer_init(&t1);
  aa:	ce 01       	movw	r24, r28
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	0e 94 71 00 	call	0xe2	; 0xe2 <timer_init>
	//TCNT0 =0;
    while (1) 
    {
		for(int i = 0 ; i<255 ; i++)
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 c0       	rjmp	.+16     	; 0xc8 <main+0x4c>
		{
			TIMER_0_OUTPUT_COMPARE_REG = i ;
  b8:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	ef e3       	ldi	r30, 0x3F	; 63
  bc:	fc e9       	ldi	r31, 0x9C	; 156
  be:	31 97       	sbiw	r30, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <main+0x42>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x48>
  c4:	00 00       	nop
	t1.com	 = CLEAR_OC_MODE ;
	timer_init(&t1);
	//TCNT0 =0;
    while (1) 
    {
		for(int i = 0 ; i<255 ; i++)
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	8f 3f       	cpi	r24, 0xFF	; 255
  ca:	91 05       	cpc	r25, r1
  cc:	ac f3       	brlt	.-22     	; 0xb8 <main+0x3c>
  ce:	ff ef       	ldi	r31, 0xFF	; 255
  d0:	23 e2       	ldi	r18, 0x23	; 35
  d2:	84 ef       	ldi	r24, 0xF4	; 244
  d4:	f1 50       	subi	r31, 0x01	; 1
  d6:	20 40       	sbci	r18, 0x00	; 0
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x58>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x62>
  de:	00 00       	nop
  e0:	e8 cf       	rjmp	.-48     	; 0xb2 <main+0x36>

000000e2 <timer_init>:

// TIMER 0 STATUS
uint8_t TIMER_STATUS[TIMER_NUMBERS];

unsigned int timer_init(t_init *param)
{
  e2:	dc 01       	movw	r26, r24
	if (TIMER_STATUS[param->timer_n] == NOT_INIT)
  e4:	8c 91       	ld	r24, X
  e6:	e8 2f       	mov	r30, r24
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	e0 5a       	subi	r30, 0xA0	; 160
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	90 81       	ld	r25, Z
  f0:	91 11       	cpse	r25, r1
  f2:	96 c0       	rjmp	.+300    	; 0x220 <timer_init+0x13e>
	{
		switch(param->timer_n)
  f4:	81 11       	cpse	r24, r1
  f6:	91 c0       	rjmp	.+290    	; 0x21a <timer_init+0x138>
		{
			// Timer 0 INIT.
			case TIMER_0 :
			switch(param->mode)
  f8:	11 96       	adiw	r26, 0x01	; 1
  fa:	8c 91       	ld	r24, X
  fc:	11 97       	sbiw	r26, 0x01	; 1
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	41 f0       	breq	.+16     	; 0x112 <timer_init+0x30>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	51 f0       	breq	.+20     	; 0x11a <timer_init+0x38>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	59 f4       	brne	.+22     	; 0x120 <timer_init+0x3e>
			{
				case TIMER_0_PWM_PHASE_CORRECT_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_WAVEFORME_GENERATOR_MODE_BIT_0);
 10a:	83 b7       	in	r24, 0x33	; 51
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	83 bf       	out	0x33, r24	; 51
				break;
 110:	07 c0       	rjmp	.+14     	; 0x120 <timer_init+0x3e>
				
				case TIMER_0_CTC_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_WAVEFORME_GENERATOR_MODE_BIT_1);
 112:	83 b7       	in	r24, 0x33	; 51
 114:	88 60       	ori	r24, 0x08	; 8
 116:	83 bf       	out	0x33, r24	; 51
				break;
 118:	03 c0       	rjmp	.+6      	; 0x120 <timer_init+0x3e>
				
				case TIMER_0_FAST_PWM_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_WAVEFORME_GENERATOR_MODE_BIT_0)|ENABLE(TIMER_0_WAVEFORME_GENERATOR_MODE_BIT_1);
 11a:	83 b7       	in	r24, 0x33	; 51
 11c:	88 64       	ori	r24, 0x48	; 72
 11e:	83 bf       	out	0x33, r24	; 51
				break;
			}
			switch(param->com)
 120:	12 96       	adiw	r26, 0x02	; 2
 122:	8c 91       	ld	r24, X
 124:	12 97       	sbiw	r26, 0x02	; 2
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	89 f0       	breq	.+34     	; 0x14c <timer_init+0x6a>
 12a:	83 30       	cpi	r24, 0x03	; 3
 12c:	99 f0       	breq	.+38     	; 0x154 <timer_init+0x72>
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	a1 f4       	brne	.+40     	; 0x15a <timer_init+0x78>
			{
				case TOGGLE_OC_MODE : 
				if ((param->mode == TIMER_0_PWM_PHASE_CORRECT_MODE )||(param->mode == TIMER_0_FAST_PWM_MODE))
 132:	11 96       	adiw	r26, 0x01	; 1
 134:	8c 91       	ld	r24, X
 136:	11 97       	sbiw	r26, 0x01	; 1
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	09 f4       	brne	.+2      	; 0x13e <timer_init+0x5c>
 13c:	74 c0       	rjmp	.+232    	; 0x226 <timer_init+0x144>
 13e:	83 30       	cpi	r24, 0x03	; 3
 140:	09 f4       	brne	.+2      	; 0x144 <timer_init+0x62>
 142:	74 c0       	rjmp	.+232    	; 0x22c <timer_init+0x14a>
				{
					return FAILED;
				}
				else{
					TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_COMPARE_MATCH_BIT_0);
 144:	83 b7       	in	r24, 0x33	; 51
 146:	80 61       	ori	r24, 0x10	; 16
 148:	83 bf       	out	0x33, r24	; 51
				}
				break;
 14a:	07 c0       	rjmp	.+14     	; 0x15a <timer_init+0x78>
				
				case CLEAR_OC_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_COMPARE_MATCH_BIT_1);
 14c:	83 b7       	in	r24, 0x33	; 51
 14e:	80 62       	ori	r24, 0x20	; 32
 150:	83 bf       	out	0x33, r24	; 51
				break;
 152:	03 c0       	rjmp	.+6      	; 0x15a <timer_init+0x78>
				
				case  SET_OC_MODE : 
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_COMPARE_MATCH_BIT_0) | ENABLE(TIMER_0_COMPARE_MATCH_BIT_1);
 154:	83 b7       	in	r24, 0x33	; 51
 156:	80 63       	ori	r24, 0x30	; 48
 158:	83 bf       	out	0x33, r24	; 51
				break;
			}
			switch(param->clock_select)
 15a:	13 96       	adiw	r26, 0x03	; 3
 15c:	4d 91       	ld	r20, X+
 15e:	5d 91       	ld	r21, X+
 160:	6d 91       	ld	r22, X+
 162:	7c 91       	ld	r23, X
 164:	16 97       	sbiw	r26, 0x06	; 6
 166:	43 30       	cpi	r20, 0x03	; 3
 168:	51 05       	cpc	r21, r1
 16a:	61 05       	cpc	r22, r1
 16c:	71 05       	cpc	r23, r1
 16e:	c9 f1       	breq	.+114    	; 0x1e2 <timer_init+0x100>
 170:	40 f4       	brcc	.+16     	; 0x182 <timer_init+0xa0>
 172:	41 30       	cpi	r20, 0x01	; 1
 174:	51 05       	cpc	r21, r1
 176:	61 05       	cpc	r22, r1
 178:	71 05       	cpc	r23, r1
 17a:	d9 f0       	breq	.+54     	; 0x1b2 <timer_init+0xd0>
 17c:	08 f4       	brcc	.+2      	; 0x180 <timer_init+0x9e>
 17e:	59 c0       	rjmp	.+178    	; 0x232 <timer_init+0x150>
 180:	2c c0       	rjmp	.+88     	; 0x1da <timer_init+0xf8>
 182:	40 34       	cpi	r20, 0x40	; 64
 184:	51 05       	cpc	r21, r1
 186:	61 05       	cpc	r22, r1
 188:	71 05       	cpc	r23, r1
 18a:	d9 f0       	breq	.+54     	; 0x1c2 <timer_init+0xe0>
 18c:	30 f4       	brcc	.+12     	; 0x19a <timer_init+0xb8>
 18e:	48 30       	cpi	r20, 0x08	; 8
 190:	51 05       	cpc	r21, r1
 192:	61 05       	cpc	r22, r1
 194:	71 05       	cpc	r23, r1
 196:	89 f0       	breq	.+34     	; 0x1ba <timer_init+0xd8>
 198:	27 c0       	rjmp	.+78     	; 0x1e8 <timer_init+0x106>
 19a:	41 15       	cp	r20, r1
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	58 07       	cpc	r21, r24
 1a0:	61 05       	cpc	r22, r1
 1a2:	71 05       	cpc	r23, r1
 1a4:	91 f0       	breq	.+36     	; 0x1ca <timer_init+0xe8>
 1a6:	41 15       	cp	r20, r1
 1a8:	54 40       	sbci	r21, 0x04	; 4
 1aa:	61 05       	cpc	r22, r1
 1ac:	71 05       	cpc	r23, r1
 1ae:	89 f0       	breq	.+34     	; 0x1d2 <timer_init+0xf0>
 1b0:	1b c0       	rjmp	.+54     	; 0x1e8 <timer_init+0x106>
				case NO_CLOCK_SOURCE_MODE : 
				return FAILED_NO_CLOCK_SOURCE ;
				break;
				
				case NO_PRESCALING_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_0);
 1b2:	83 b7       	in	r24, 0x33	; 51
 1b4:	81 60       	ori	r24, 0x01	; 1
 1b6:	83 bf       	out	0x33, r24	; 51
				break;
 1b8:	17 c0       	rjmp	.+46     	; 0x1e8 <timer_init+0x106>
				
				case CLK_8_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_1);
 1ba:	83 b7       	in	r24, 0x33	; 51
 1bc:	82 60       	ori	r24, 0x02	; 2
 1be:	83 bf       	out	0x33, r24	; 51
				break;
 1c0:	13 c0       	rjmp	.+38     	; 0x1e8 <timer_init+0x106>
				
				case CLK_64_MODE:
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_0) | ENABLE(TIMER_0_CLOCK_SELECT_BIT_1);
 1c2:	83 b7       	in	r24, 0x33	; 51
 1c4:	83 60       	ori	r24, 0x03	; 3
 1c6:	83 bf       	out	0x33, r24	; 51
				break;
 1c8:	0f c0       	rjmp	.+30     	; 0x1e8 <timer_init+0x106>
				
				case CLK_256_MODE:
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_2);
 1ca:	83 b7       	in	r24, 0x33	; 51
 1cc:	84 60       	ori	r24, 0x04	; 4
 1ce:	83 bf       	out	0x33, r24	; 51
				break;
 1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <timer_init+0x106>
				
				case CLK_1024_MODE:
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_0) | ENABLE(TIMER_0_CLOCK_SELECT_BIT_2);
 1d2:	83 b7       	in	r24, 0x33	; 51
 1d4:	85 60       	ori	r24, 0x05	; 5
 1d6:	83 bf       	out	0x33, r24	; 51
				break;
 1d8:	07 c0       	rjmp	.+14     	; 0x1e8 <timer_init+0x106>
				
				case FALLING_EDGE_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_1) | ENABLE(TIMER_0_CLOCK_SELECT_BIT_2);
 1da:	83 b7       	in	r24, 0x33	; 51
 1dc:	86 60       	ori	r24, 0x06	; 6
 1de:	83 bf       	out	0x33, r24	; 51
				break;
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <timer_init+0x106>
				
				case RISING_EDGE_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_0) | ENABLE(TIMER_0_CLOCK_SELECT_BIT_1) | ENABLE(TIMER_0_CLOCK_SELECT_BIT_2);
 1e2:	83 b7       	in	r24, 0x33	; 51
 1e4:	87 60       	ori	r24, 0x07	; 7
 1e6:	83 bf       	out	0x33, r24	; 51
				break;
			}
			if(param->compare_match_interrupt_enable == ENABLE_OUTPUT_COMPARE_MATCH_INTERRUPT )
 1e8:	17 96       	adiw	r26, 0x07	; 7
 1ea:	8c 91       	ld	r24, X
 1ec:	17 97       	sbiw	r26, 0x07	; 7
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	19 f4       	brne	.+6      	; 0x1f8 <timer_init+0x116>
			{
				TIMER_INTERRUPT_MASK_REG |= ENABLE(TIMER_0_OUTPUT_COMPARE_MATCH_INTERRUPT_ENABLE); 
 1f2:	89 b7       	in	r24, 0x39	; 57
 1f4:	82 60       	ori	r24, 0x02	; 2
 1f6:	89 bf       	out	0x39, r24	; 57
			}
			
			if(param->overflow_interrupt_enable == ENABLE_OVERFLOW_INTERRUPT)
 1f8:	18 96       	adiw	r26, 0x08	; 8
 1fa:	8c 91       	ld	r24, X
 1fc:	18 97       	sbiw	r26, 0x08	; 8
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	19 f4       	brne	.+6      	; 0x208 <timer_init+0x126>
			{
				TIMER_INTERRUPT_MASK_REG |= ENABLE(TIMER_0_OVERFLOW_INTERRUPT_ENABLE);
 202:	89 b7       	in	r24, 0x39	; 57
 204:	81 60       	ori	r24, 0x01	; 1
 206:	89 bf       	out	0x39, r24	; 57
			}
			TIMER_STATUS[param->timer_n] = INIT;
 208:	ec 91       	ld	r30, X
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	e0 5a       	subi	r30, 0xA0	; 160
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 83       	st	Z, r24
			return DONE ;
 214:	83 e0       	ldi	r24, 0x03	; 3
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	08 95       	ret
		}
	}
	else{
		return FAILED_INIT_BEFORE;
	}
	return TIMER_STATUS[param->timer_n];
 21a:	89 2f       	mov	r24, r25
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	08 95       	ret
			TIMER_STATUS[param->timer_n] = INIT;
			return DONE ;
		}
	}
	else{
		return FAILED_INIT_BEFORE;
 220:	84 e0       	ldi	r24, 0x04	; 4
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	08 95       	ret
			switch(param->com)
			{
				case TOGGLE_OC_MODE : 
				if ((param->mode == TIMER_0_PWM_PHASE_CORRECT_MODE )||(param->mode == TIMER_0_FAST_PWM_MODE))
				{
					return FAILED;
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	08 95       	ret
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	08 95       	ret
				break;
			}
			switch(param->clock_select)
			{
				case NO_CLOCK_SOURCE_MODE : 
				return FAILED_NO_CLOCK_SOURCE ;
 232:	85 e0       	ldi	r24, 0x05	; 5
 234:	90 e0       	ldi	r25, 0x00	; 0
	}
	else{
		return FAILED_INIT_BEFORE;
	}
	return TIMER_STATUS[param->timer_n];
 236:	08 95       	ret

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
