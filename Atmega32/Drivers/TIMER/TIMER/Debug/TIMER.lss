
TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000256  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007d0  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000675  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000411  00000000  00000000  00001149  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000155c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a0  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013d  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001a8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 ef 00 	jmp	0x1de	; 0x1de <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "TIMER.h"
#include <util/delay.h>

int main(void)
{
	DDRC = 0xff;
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	84 bb       	out	0x14, r24	; 20
	timer_init(0,TIMER_0_FAST_PWM_MODE,CLEAR_OC_MODE,CLK_8_MODE);
  80:	08 e0       	ldi	r16, 0x08	; 8
  82:	10 e0       	ldi	r17, 0x00	; 0
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	42 e0       	ldi	r20, 0x02	; 2
  8a:	63 e0       	ldi	r22, 0x03	; 3
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	0e 94 61 00 	call	0xc2	; 0xc2 <timer_init>
	//TCNT0 =0;
    while (1) 
    {
		for(int i = 0 ; i<255 ; i++)
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	08 c0       	rjmp	.+16     	; 0xa8 <main+0x2c>
		{
			TIMER_0_OUTPUT_COMPARE_REG = i ;
  98:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	ef e3       	ldi	r30, 0x3F	; 63
  9c:	fc e9       	ldi	r31, 0x9C	; 156
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x22>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x28>
  a4:	00 00       	nop
	DDRC = 0xff;
	timer_init(0,TIMER_0_FAST_PWM_MODE,CLEAR_OC_MODE,CLK_8_MODE);
	//TCNT0 =0;
    while (1) 
    {
		for(int i = 0 ; i<255 ; i++)
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	8f 3f       	cpi	r24, 0xFF	; 255
  aa:	91 05       	cpc	r25, r1
  ac:	ac f3       	brlt	.-22     	; 0x98 <main+0x1c>
  ae:	ff ef       	ldi	r31, 0xFF	; 255
  b0:	23 e2       	ldi	r18, 0x23	; 35
  b2:	84 ef       	ldi	r24, 0xF4	; 244
  b4:	f1 50       	subi	r31, 0x01	; 1
  b6:	20 40       	sbci	r18, 0x00	; 0
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x38>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x42>
  be:	00 00       	nop
  c0:	e8 cf       	rjmp	.-48     	; 0x92 <main+0x16>

000000c2 <timer_init>:

// TIMER 0 STATUS
uint8_t TIMER_STATUS[TIMER_NUMBERS];

unsigned int timer_init(uint8_t timer_n , uint8_t mode , uint8_t com , uint32_t clock_select)
{
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
	if (TIMER_STATUS[timer_n] == NOT_INIT)
  c6:	a8 2f       	mov	r26, r24
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	fd 01       	movw	r30, r26
  cc:	e0 5a       	subi	r30, 0xA0	; 160
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	90 81       	ld	r25, Z
  d2:	91 11       	cpse	r25, r1
  d4:	76 c0       	rjmp	.+236    	; 0x1c2 <timer_init+0x100>
	{
		switch(timer_n)
  d6:	81 11       	cpse	r24, r1
  d8:	71 c0       	rjmp	.+226    	; 0x1bc <timer_init+0xfa>
		{
			// Timer 0 INIT.
			case TIMER_0 :
			switch(mode)
  da:	62 30       	cpi	r22, 0x02	; 2
  dc:	41 f0       	breq	.+16     	; 0xee <timer_init+0x2c>
  de:	63 30       	cpi	r22, 0x03	; 3
  e0:	51 f0       	breq	.+20     	; 0xf6 <timer_init+0x34>
  e2:	61 30       	cpi	r22, 0x01	; 1
  e4:	59 f4       	brne	.+22     	; 0xfc <timer_init+0x3a>
			{
				case TIMER_0_PWM_PHASE_CORRECT_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_WAVEFORME_GENERATOR_MODE_BIT_0);
  e6:	83 b7       	in	r24, 0x33	; 51
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	83 bf       	out	0x33, r24	; 51
				break;
  ec:	07 c0       	rjmp	.+14     	; 0xfc <timer_init+0x3a>
				
				case TIMER_0_CTC_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_WAVEFORME_GENERATOR_MODE_BIT_1);
  ee:	83 b7       	in	r24, 0x33	; 51
  f0:	88 60       	ori	r24, 0x08	; 8
  f2:	83 bf       	out	0x33, r24	; 51
				break;
  f4:	03 c0       	rjmp	.+6      	; 0xfc <timer_init+0x3a>
				
				case TIMER_0_FAST_PWM_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_WAVEFORME_GENERATOR_MODE_BIT_0)|ENABLE(TIMER_0_WAVEFORME_GENERATOR_MODE_BIT_1);
  f6:	83 b7       	in	r24, 0x33	; 51
  f8:	88 64       	ori	r24, 0x48	; 72
  fa:	83 bf       	out	0x33, r24	; 51
				break;
			}
			switch(com)
  fc:	42 30       	cpi	r20, 0x02	; 2
  fe:	71 f0       	breq	.+28     	; 0x11c <timer_init+0x5a>
 100:	43 30       	cpi	r20, 0x03	; 3
 102:	81 f0       	breq	.+32     	; 0x124 <timer_init+0x62>
 104:	41 30       	cpi	r20, 0x01	; 1
 106:	89 f4       	brne	.+34     	; 0x12a <timer_init+0x68>
			{
				case TOGGLE_OC_MODE : 
				if ((mode == TIMER_0_PWM_PHASE_CORRECT_MODE )||(mode == TIMER_0_FAST_PWM_MODE))
 108:	61 30       	cpi	r22, 0x01	; 1
 10a:	09 f4       	brne	.+2      	; 0x10e <timer_init+0x4c>
 10c:	5d c0       	rjmp	.+186    	; 0x1c8 <timer_init+0x106>
 10e:	63 30       	cpi	r22, 0x03	; 3
 110:	09 f4       	brne	.+2      	; 0x114 <timer_init+0x52>
 112:	5d c0       	rjmp	.+186    	; 0x1ce <timer_init+0x10c>
				{
					return FAILED;
				}
				else{
					TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_COMPARE_MATCH_BIT_0);
 114:	83 b7       	in	r24, 0x33	; 51
 116:	80 61       	ori	r24, 0x10	; 16
 118:	83 bf       	out	0x33, r24	; 51
				}
				break;
 11a:	07 c0       	rjmp	.+14     	; 0x12a <timer_init+0x68>
				
				case CLEAR_OC_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_COMPARE_MATCH_BIT_1);
 11c:	83 b7       	in	r24, 0x33	; 51
 11e:	80 62       	ori	r24, 0x20	; 32
 120:	83 bf       	out	0x33, r24	; 51
				break;
 122:	03 c0       	rjmp	.+6      	; 0x12a <timer_init+0x68>
				
				case  SET_OC_MODE : 
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_COMPARE_MATCH_BIT_0) | ENABLE(TIMER_0_COMPARE_MATCH_BIT_1);
 124:	83 b7       	in	r24, 0x33	; 51
 126:	80 63       	ori	r24, 0x30	; 48
 128:	83 bf       	out	0x33, r24	; 51
				break;
			}
			switch(clock_select)
 12a:	03 30       	cpi	r16, 0x03	; 3
 12c:	11 05       	cpc	r17, r1
 12e:	21 05       	cpc	r18, r1
 130:	31 05       	cpc	r19, r1
 132:	c9 f1       	breq	.+114    	; 0x1a6 <timer_init+0xe4>
 134:	40 f4       	brcc	.+16     	; 0x146 <timer_init+0x84>
 136:	01 30       	cpi	r16, 0x01	; 1
 138:	11 05       	cpc	r17, r1
 13a:	21 05       	cpc	r18, r1
 13c:	31 05       	cpc	r19, r1
 13e:	d9 f0       	breq	.+54     	; 0x176 <timer_init+0xb4>
 140:	08 f4       	brcc	.+2      	; 0x144 <timer_init+0x82>
 142:	48 c0       	rjmp	.+144    	; 0x1d4 <timer_init+0x112>
 144:	2c c0       	rjmp	.+88     	; 0x19e <timer_init+0xdc>
 146:	00 34       	cpi	r16, 0x40	; 64
 148:	11 05       	cpc	r17, r1
 14a:	21 05       	cpc	r18, r1
 14c:	31 05       	cpc	r19, r1
 14e:	d9 f0       	breq	.+54     	; 0x186 <timer_init+0xc4>
 150:	30 f4       	brcc	.+12     	; 0x15e <timer_init+0x9c>
 152:	08 30       	cpi	r16, 0x08	; 8
 154:	11 05       	cpc	r17, r1
 156:	21 05       	cpc	r18, r1
 158:	31 05       	cpc	r19, r1
 15a:	89 f0       	breq	.+34     	; 0x17e <timer_init+0xbc>
 15c:	27 c0       	rjmp	.+78     	; 0x1ac <timer_init+0xea>
 15e:	01 15       	cp	r16, r1
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	18 07       	cpc	r17, r24
 164:	21 05       	cpc	r18, r1
 166:	31 05       	cpc	r19, r1
 168:	91 f0       	breq	.+36     	; 0x18e <timer_init+0xcc>
 16a:	01 15       	cp	r16, r1
 16c:	14 40       	sbci	r17, 0x04	; 4
 16e:	21 05       	cpc	r18, r1
 170:	31 05       	cpc	r19, r1
 172:	89 f0       	breq	.+34     	; 0x196 <timer_init+0xd4>
 174:	1b c0       	rjmp	.+54     	; 0x1ac <timer_init+0xea>
				case NO_CLOCK_SOURCE_MODE : 
				return FAILED_NO_CLOCK_SOURCE ;
				break;
				
				case NO_PRESCALING_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_0);
 176:	83 b7       	in	r24, 0x33	; 51
 178:	81 60       	ori	r24, 0x01	; 1
 17a:	83 bf       	out	0x33, r24	; 51
				break;
 17c:	17 c0       	rjmp	.+46     	; 0x1ac <timer_init+0xea>
				
				case CLK_8_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_1);
 17e:	83 b7       	in	r24, 0x33	; 51
 180:	82 60       	ori	r24, 0x02	; 2
 182:	83 bf       	out	0x33, r24	; 51
				break;
 184:	13 c0       	rjmp	.+38     	; 0x1ac <timer_init+0xea>
				
				case CLK_64_MODE:
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_0) | ENABLE(TIMER_0_CLOCK_SELECT_BIT_1);
 186:	83 b7       	in	r24, 0x33	; 51
 188:	83 60       	ori	r24, 0x03	; 3
 18a:	83 bf       	out	0x33, r24	; 51
				break;
 18c:	0f c0       	rjmp	.+30     	; 0x1ac <timer_init+0xea>
				
				case CLK_256_MODE:
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_2);
 18e:	83 b7       	in	r24, 0x33	; 51
 190:	84 60       	ori	r24, 0x04	; 4
 192:	83 bf       	out	0x33, r24	; 51
				break;
 194:	0b c0       	rjmp	.+22     	; 0x1ac <timer_init+0xea>
				
				case CLK_1024_MODE:
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_0) | ENABLE(TIMER_0_CLOCK_SELECT_BIT_2);
 196:	83 b7       	in	r24, 0x33	; 51
 198:	85 60       	ori	r24, 0x05	; 5
 19a:	83 bf       	out	0x33, r24	; 51
				break;
 19c:	07 c0       	rjmp	.+14     	; 0x1ac <timer_init+0xea>
				
				case FALLING_EDGE_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_1) | ENABLE(TIMER_0_CLOCK_SELECT_BIT_2);
 19e:	83 b7       	in	r24, 0x33	; 51
 1a0:	86 60       	ori	r24, 0x06	; 6
 1a2:	83 bf       	out	0x33, r24	; 51
				break;
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <timer_init+0xea>
				
				case RISING_EDGE_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_0) | ENABLE(TIMER_0_CLOCK_SELECT_BIT_1) | ENABLE(TIMER_0_CLOCK_SELECT_BIT_2);
 1a6:	83 b7       	in	r24, 0x33	; 51
 1a8:	87 60       	ori	r24, 0x07	; 7
 1aa:	83 bf       	out	0x33, r24	; 51
				break;
			}
			TIMER_STATUS[timer_n] = INIT;
 1ac:	fd 01       	movw	r30, r26
 1ae:	e0 5a       	subi	r30, 0xA0	; 160
 1b0:	ff 4f       	sbci	r31, 0xFF	; 255
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 83       	st	Z, r24
			return DONE ;
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e c0       	rjmp	.+28     	; 0x1d8 <timer_init+0x116>
		}
	}
	else{
		return FAILED_INIT_BEFORE;
	}
	return TIMER_STATUS[timer_n];
 1bc:	89 2f       	mov	r24, r25
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0b c0       	rjmp	.+22     	; 0x1d8 <timer_init+0x116>
			TIMER_STATUS[timer_n] = INIT;
			return DONE ;
		}
	}
	else{
		return FAILED_INIT_BEFORE;
 1c2:	84 e0       	ldi	r24, 0x04	; 4
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	08 c0       	rjmp	.+16     	; 0x1d8 <timer_init+0x116>
			switch(com)
			{
				case TOGGLE_OC_MODE : 
				if ((mode == TIMER_0_PWM_PHASE_CORRECT_MODE )||(mode == TIMER_0_FAST_PWM_MODE))
				{
					return FAILED;
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <timer_init+0x116>
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <timer_init+0x116>
				break;
			}
			switch(clock_select)
			{
				case NO_CLOCK_SOURCE_MODE : 
				return FAILED_NO_CLOCK_SOURCE ;
 1d4:	85 e0       	ldi	r24, 0x05	; 5
 1d6:	90 e0       	ldi	r25, 0x00	; 0
	}
	else{
		return FAILED_INIT_BEFORE;
	}
	return TIMER_STATUS[timer_n];
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
