
TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000624  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000624  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000092d  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c5  00000000  00000000  00000ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ef  00000000  00000000  000016c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047e  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000db  00000000  00000000  0000228a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00002365  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	31 01       	movw	r6, r2
  56:	35 01       	movw	r6, r10
  58:	39 01       	movw	r6, r18
  5a:	3d 01       	movw	r6, r26
  5c:	41 01       	movw	r8, r2
  5e:	48 01       	movw	r8, r16
  60:	4f 01       	movw	r8, r30
  62:	56 01       	movw	r10, r12
  64:	5a 01       	movw	r10, r20
  66:	61 01       	movw	r12, r2
  68:	68 01       	movw	r12, r16
  6a:	6f 01       	movw	r12, r30
  6c:	73 01       	movw	r14, r6
  6e:	7a 01       	movw	r14, r20
  70:	81 01       	movw	r16, r2

00000072 <__ctors_end>:
  72:	11 24       	eor	r1, r1
  74:	1f be       	out	0x3f, r1	; 63
  76:	cf e5       	ldi	r28, 0x5F	; 95
  78:	d8 e0       	ldi	r29, 0x08	; 8
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_clear_bss>:
  7e:	20 e0       	ldi	r18, 0x00	; 0
  80:	a0 e6       	ldi	r26, 0x60	; 96
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a3 36       	cpi	r26, 0x63	; 99
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  92:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <main>:
#define F_CPU 8000000UL
#include "TIMER.h"
#include <util/delay.h>

int main(void)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	2e 97       	sbiw	r28, 0x0e	; 14
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
	t_init t1;
	t1.timer_n = TIMER_0;
  ae:	19 82       	std	Y+1, r1	; 0x01
	t1.mode = TIMER_0_FAST_PWM_MODE;
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	8a 83       	std	Y+2, r24	; 0x02
	t1.clock_select = CLK_8_MODE ;
  b4:	88 e0       	ldi	r24, 0x08	; 8
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	8e 83       	std	Y+6, r24	; 0x06
  be:	9f 83       	std	Y+7, r25	; 0x07
  c0:	a8 87       	std	Y+8, r26	; 0x08
  c2:	b9 87       	std	Y+9, r27	; 0x09
	t1.com	 = CLEAR_OC_MODE ;
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	8b 83       	std	Y+3, r24	; 0x03
	timer_init(&t1);
  c8:	ce 01       	movw	r24, r28
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	0e 94 80 00 	call	0x100	; 0x100 <timer_init>
    while (1) 
    {
		for(int i = 0 ; i<255 ; i++)
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	08 c0       	rjmp	.+16     	; 0xe6 <main+0x4c>
		{
			TIMER_0_OUTPUT_COMPARE_REG = i ;
  d6:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	ef e3       	ldi	r30, 0x3F	; 63
  da:	fc e9       	ldi	r31, 0x9C	; 156
  dc:	31 97       	sbiw	r30, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <main+0x42>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x48>
  e2:	00 00       	nop
	t1.clock_select = CLK_8_MODE ;
	t1.com	 = CLEAR_OC_MODE ;
	timer_init(&t1);
    while (1) 
    {
		for(int i = 0 ; i<255 ; i++)
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	8f 3f       	cpi	r24, 0xFF	; 255
  e8:	91 05       	cpc	r25, r1
  ea:	ac f3       	brlt	.-22     	; 0xd6 <main+0x3c>
  ec:	ff ef       	ldi	r31, 0xFF	; 255
  ee:	23 e2       	ldi	r18, 0x23	; 35
  f0:	84 ef       	ldi	r24, 0xF4	; 244
  f2:	f1 50       	subi	r31, 0x01	; 1
  f4:	20 40       	sbci	r18, 0x00	; 0
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x58>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x62>
  fc:	00 00       	nop
  fe:	e8 cf       	rjmp	.-48     	; 0xd0 <main+0x36>

00000100 <timer_init>:

// TIMER 0 STATUS
uint8_t TIMER_STATUS[TIMER_NUMBERS];

unsigned int timer_init(t_init *param)
{
 100:	dc 01       	movw	r26, r24
	if (TIMER_STATUS[param->timer_n] == NOT_INIT)
 102:	8c 91       	ld	r24, X
 104:	e8 2f       	mov	r30, r24
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	e0 5a       	subi	r30, 0xA0	; 160
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	90 81       	ld	r25, Z
 10e:	91 11       	cpse	r25, r1
 110:	2f c2       	rjmp	.+1118   	; 0x570 <__EEPROM_REGION_LENGTH__+0x170>
	{
		switch(param->timer_n)
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	09 f4       	brne	.+2      	; 0x118 <timer_init+0x18>
 116:	96 c0       	rjmp	.+300    	; 0x244 <timer_init+0x144>
 118:	20 f0       	brcs	.+8      	; 0x122 <timer_init+0x22>
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	09 f4       	brne	.+2      	; 0x120 <timer_init+0x20>
 11e:	8f c1       	rjmp	.+798    	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 120:	24 c2       	rjmp	.+1096   	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
		{
			// Timer 0 INIT.
			case TIMER_0 :
			switch(param->mode)
 122:	11 96       	adiw	r26, 0x01	; 1
 124:	8c 91       	ld	r24, X
 126:	11 97       	sbiw	r26, 0x01	; 1
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	41 f0       	breq	.+16     	; 0x13c <timer_init+0x3c>
 12c:	83 30       	cpi	r24, 0x03	; 3
 12e:	51 f0       	breq	.+20     	; 0x144 <timer_init+0x44>
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	59 f4       	brne	.+22     	; 0x14a <timer_init+0x4a>
			{
				case TIMER_0_PWM_PHASE_CORRECT_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_WAVEFORME_GENERATOR_MODE_BIT_0);
 134:	83 b7       	in	r24, 0x33	; 51
 136:	80 64       	ori	r24, 0x40	; 64
 138:	83 bf       	out	0x33, r24	; 51
				break;
 13a:	07 c0       	rjmp	.+14     	; 0x14a <timer_init+0x4a>
				
				case TIMER_0_CTC_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_WAVEFORME_GENERATOR_MODE_BIT_1);
 13c:	83 b7       	in	r24, 0x33	; 51
 13e:	88 60       	ori	r24, 0x08	; 8
 140:	83 bf       	out	0x33, r24	; 51
				break;
 142:	03 c0       	rjmp	.+6      	; 0x14a <timer_init+0x4a>
				
				case TIMER_0_FAST_PWM_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_WAVEFORME_GENERATOR_MODE_BIT_0)|ENABLE(TIMER_0_WAVEFORME_GENERATOR_MODE_BIT_1);
 144:	83 b7       	in	r24, 0x33	; 51
 146:	88 64       	ori	r24, 0x48	; 72
 148:	83 bf       	out	0x33, r24	; 51
				break;
			}
			switch(param->com)
 14a:	12 96       	adiw	r26, 0x02	; 2
 14c:	8c 91       	ld	r24, X
 14e:	12 97       	sbiw	r26, 0x02	; 2
 150:	82 30       	cpi	r24, 0x02	; 2
 152:	89 f0       	breq	.+34     	; 0x176 <timer_init+0x76>
 154:	83 30       	cpi	r24, 0x03	; 3
 156:	99 f0       	breq	.+38     	; 0x17e <timer_init+0x7e>
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	a1 f4       	brne	.+40     	; 0x184 <timer_init+0x84>
			{
				case TOGGLE_OC_MODE : 
				if ((param->mode == TIMER_0_PWM_PHASE_CORRECT_MODE )||(param->mode == TIMER_0_FAST_PWM_MODE))
 15c:	11 96       	adiw	r26, 0x01	; 1
 15e:	8c 91       	ld	r24, X
 160:	11 97       	sbiw	r26, 0x01	; 1
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	09 f4       	brne	.+2      	; 0x168 <timer_init+0x68>
 166:	07 c2       	rjmp	.+1038   	; 0x576 <__EEPROM_REGION_LENGTH__+0x176>
 168:	83 30       	cpi	r24, 0x03	; 3
 16a:	09 f4       	brne	.+2      	; 0x16e <timer_init+0x6e>
 16c:	07 c2       	rjmp	.+1038   	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
				{
					return FAILED;
				}
				else{
					TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_COMPARE_MATCH_BIT_0);
 16e:	83 b7       	in	r24, 0x33	; 51
 170:	80 61       	ori	r24, 0x10	; 16
 172:	83 bf       	out	0x33, r24	; 51
				}
				break;
 174:	07 c0       	rjmp	.+14     	; 0x184 <timer_init+0x84>
				
				case CLEAR_OC_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_COMPARE_MATCH_BIT_1);
 176:	83 b7       	in	r24, 0x33	; 51
 178:	80 62       	ori	r24, 0x20	; 32
 17a:	83 bf       	out	0x33, r24	; 51
				break;
 17c:	03 c0       	rjmp	.+6      	; 0x184 <timer_init+0x84>
				
				case  SET_OC_MODE : 
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_COMPARE_MATCH_BIT_0) | ENABLE(TIMER_0_COMPARE_MATCH_BIT_1);
 17e:	83 b7       	in	r24, 0x33	; 51
 180:	80 63       	ori	r24, 0x30	; 48
 182:	83 bf       	out	0x33, r24	; 51
				break;
			}
			switch(param->clock_select)
 184:	15 96       	adiw	r26, 0x05	; 5
 186:	4d 91       	ld	r20, X+
 188:	5d 91       	ld	r21, X+
 18a:	6d 91       	ld	r22, X+
 18c:	7c 91       	ld	r23, X
 18e:	18 97       	sbiw	r26, 0x08	; 8
 190:	43 30       	cpi	r20, 0x03	; 3
 192:	51 05       	cpc	r21, r1
 194:	61 05       	cpc	r22, r1
 196:	71 05       	cpc	r23, r1
 198:	c9 f1       	breq	.+114    	; 0x20c <timer_init+0x10c>
 19a:	40 f4       	brcc	.+16     	; 0x1ac <timer_init+0xac>
 19c:	41 30       	cpi	r20, 0x01	; 1
 19e:	51 05       	cpc	r21, r1
 1a0:	61 05       	cpc	r22, r1
 1a2:	71 05       	cpc	r23, r1
 1a4:	d9 f0       	breq	.+54     	; 0x1dc <timer_init+0xdc>
 1a6:	08 f4       	brcc	.+2      	; 0x1aa <timer_init+0xaa>
 1a8:	ec c1       	rjmp	.+984    	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
 1aa:	2c c0       	rjmp	.+88     	; 0x204 <timer_init+0x104>
 1ac:	40 34       	cpi	r20, 0x40	; 64
 1ae:	51 05       	cpc	r21, r1
 1b0:	61 05       	cpc	r22, r1
 1b2:	71 05       	cpc	r23, r1
 1b4:	d9 f0       	breq	.+54     	; 0x1ec <timer_init+0xec>
 1b6:	30 f4       	brcc	.+12     	; 0x1c4 <timer_init+0xc4>
 1b8:	48 30       	cpi	r20, 0x08	; 8
 1ba:	51 05       	cpc	r21, r1
 1bc:	61 05       	cpc	r22, r1
 1be:	71 05       	cpc	r23, r1
 1c0:	89 f0       	breq	.+34     	; 0x1e4 <timer_init+0xe4>
 1c2:	27 c0       	rjmp	.+78     	; 0x212 <timer_init+0x112>
 1c4:	41 15       	cp	r20, r1
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	58 07       	cpc	r21, r24
 1ca:	61 05       	cpc	r22, r1
 1cc:	71 05       	cpc	r23, r1
 1ce:	91 f0       	breq	.+36     	; 0x1f4 <timer_init+0xf4>
 1d0:	41 15       	cp	r20, r1
 1d2:	54 40       	sbci	r21, 0x04	; 4
 1d4:	61 05       	cpc	r22, r1
 1d6:	71 05       	cpc	r23, r1
 1d8:	89 f0       	breq	.+34     	; 0x1fc <timer_init+0xfc>
 1da:	1b c0       	rjmp	.+54     	; 0x212 <timer_init+0x112>
				case NO_CLOCK_SOURCE_MODE : 
				return FAILED_NO_CLOCK_SOURCE ;
				break;
				
				case NO_PRESCALING_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_0);
 1dc:	83 b7       	in	r24, 0x33	; 51
 1de:	81 60       	ori	r24, 0x01	; 1
 1e0:	83 bf       	out	0x33, r24	; 51
				break;
 1e2:	17 c0       	rjmp	.+46     	; 0x212 <timer_init+0x112>
				
				case CLK_8_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_1);
 1e4:	83 b7       	in	r24, 0x33	; 51
 1e6:	82 60       	ori	r24, 0x02	; 2
 1e8:	83 bf       	out	0x33, r24	; 51
				break;
 1ea:	13 c0       	rjmp	.+38     	; 0x212 <timer_init+0x112>
				
				case CLK_64_MODE:
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_0) | ENABLE(TIMER_0_CLOCK_SELECT_BIT_1);
 1ec:	83 b7       	in	r24, 0x33	; 51
 1ee:	83 60       	ori	r24, 0x03	; 3
 1f0:	83 bf       	out	0x33, r24	; 51
				break;
 1f2:	0f c0       	rjmp	.+30     	; 0x212 <timer_init+0x112>
				
				case CLK_256_MODE:
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_2);
 1f4:	83 b7       	in	r24, 0x33	; 51
 1f6:	84 60       	ori	r24, 0x04	; 4
 1f8:	83 bf       	out	0x33, r24	; 51
				break;
 1fa:	0b c0       	rjmp	.+22     	; 0x212 <timer_init+0x112>
				
				case CLK_1024_MODE:
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_0) | ENABLE(TIMER_0_CLOCK_SELECT_BIT_2);
 1fc:	83 b7       	in	r24, 0x33	; 51
 1fe:	85 60       	ori	r24, 0x05	; 5
 200:	83 bf       	out	0x33, r24	; 51
				break;
 202:	07 c0       	rjmp	.+14     	; 0x212 <timer_init+0x112>
				
				case FALLING_EDGE_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_1) | ENABLE(TIMER_0_CLOCK_SELECT_BIT_2);
 204:	83 b7       	in	r24, 0x33	; 51
 206:	86 60       	ori	r24, 0x06	; 6
 208:	83 bf       	out	0x33, r24	; 51
				break;
 20a:	03 c0       	rjmp	.+6      	; 0x212 <timer_init+0x112>
				
				case RISING_EDGE_MODE :
				TIMER_0_CONTROL_REG |= ENABLE(TIMER_0_CLOCK_SELECT_BIT_0) | ENABLE(TIMER_0_CLOCK_SELECT_BIT_1) | ENABLE(TIMER_0_CLOCK_SELECT_BIT_2);
 20c:	83 b7       	in	r24, 0x33	; 51
 20e:	87 60       	ori	r24, 0x07	; 7
 210:	83 bf       	out	0x33, r24	; 51
				break;
			}
			if(param->compare_match_interrupt_enable == ENABLE_OUTPUT_COMPARE_MATCH_INTERRUPT )
 212:	19 96       	adiw	r26, 0x09	; 9
 214:	8c 91       	ld	r24, X
 216:	19 97       	sbiw	r26, 0x09	; 9
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	19 f4       	brne	.+6      	; 0x222 <timer_init+0x122>
			{
				TIMER_INTERRUPT_MASK_REG |= ENABLE(TIMER_0_OUTPUT_COMPARE_MATCH_INTERRUPT_ENABLE); 
 21c:	89 b7       	in	r24, 0x39	; 57
 21e:	82 60       	ori	r24, 0x02	; 2
 220:	89 bf       	out	0x39, r24	; 57
			}
			
			if(param->overflow_interrupt_enable == ENABLE_OVERFLOW_INTERRUPT)
 222:	1c 96       	adiw	r26, 0x0c	; 12
 224:	8c 91       	ld	r24, X
 226:	1c 97       	sbiw	r26, 0x0c	; 12
 228:	82 30       	cpi	r24, 0x02	; 2
 22a:	19 f4       	brne	.+6      	; 0x232 <timer_init+0x132>
			{
				TIMER_INTERRUPT_MASK_REG |= ENABLE(TIMER_0_OVERFLOW_INTERRUPT_ENABLE);
 22c:	89 b7       	in	r24, 0x39	; 57
 22e:	81 60       	ori	r24, 0x01	; 1
 230:	89 bf       	out	0x39, r24	; 57
			}
			TIMER_STATUS[param->timer_n] = INIT;
 232:	ec 91       	ld	r30, X
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	e0 5a       	subi	r30, 0xA0	; 160
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 83       	st	Z, r24
			return DONE ;
 23e:	83 e0       	ldi	r24, 0x03	; 3
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	08 95       	ret
			break;
			
			
			// Timer 1
			case TIMER_1 :
			switch(param->mode)
 244:	11 96       	adiw	r26, 0x01	; 1
 246:	ec 91       	ld	r30, X
 248:	11 97       	sbiw	r26, 0x01	; 1
 24a:	4e 2f       	mov	r20, r30
 24c:	50 e0       	ldi	r21, 0x00	; 0
 24e:	fa 01       	movw	r30, r20
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	ef 30       	cpi	r30, 0x0F	; 15
 254:	f1 05       	cpc	r31, r1
 256:	08 f0       	brcs	.+2      	; 0x25a <timer_init+0x15a>
 258:	5a c0       	rjmp	.+180    	; 0x30e <timer_init+0x20e>
 25a:	e6 5d       	subi	r30, 0xD6	; 214
 25c:	ff 4f       	sbci	r31, 0xFF	; 255
 25e:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__tablejump2__>
			{
				case TIMER_1_PWM_PHASE_CORRECT_8_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_0);
 262:	8f b5       	in	r24, 0x2f	; 47
 264:	81 60       	ori	r24, 0x01	; 1
 266:	8f bd       	out	0x2f, r24	; 47
				break;
 268:	52 c0       	rjmp	.+164    	; 0x30e <timer_init+0x20e>
				
				case TIMER_1_PWM_PHASE_CORRECT_9_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_1);
 26a:	8f b5       	in	r24, 0x2f	; 47
 26c:	82 60       	ori	r24, 0x02	; 2
 26e:	8f bd       	out	0x2f, r24	; 47
				break;
 270:	4e c0       	rjmp	.+156    	; 0x30e <timer_init+0x20e>
				
				case TIMER_1_PWM_PHASE_CORRECT_10_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_0) | ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_1);
 272:	8f b5       	in	r24, 0x2f	; 47
 274:	83 60       	ori	r24, 0x03	; 3
 276:	8f bd       	out	0x2f, r24	; 47
				break;
 278:	4a c0       	rjmp	.+148    	; 0x30e <timer_init+0x20e>
				
				case TIMER_1_CTC_OCR_MODE:
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_2);
 27a:	8e b5       	in	r24, 0x2e	; 46
 27c:	88 60       	ori	r24, 0x08	; 8
 27e:	8e bd       	out	0x2e, r24	; 46
				break;
 280:	46 c0       	rjmp	.+140    	; 0x30e <timer_init+0x20e>
				
				case TIMER_1_FAST_PWM_8_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_0);
 282:	8f b5       	in	r24, 0x2f	; 47
 284:	81 60       	ori	r24, 0x01	; 1
 286:	8f bd       	out	0x2f, r24	; 47
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_2);
 288:	8e b5       	in	r24, 0x2e	; 46
 28a:	88 60       	ori	r24, 0x08	; 8
 28c:	8e bd       	out	0x2e, r24	; 46
				break;
 28e:	3f c0       	rjmp	.+126    	; 0x30e <timer_init+0x20e>
				
				case TIMER_1_FAST_PWM_9_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_1);
 290:	8f b5       	in	r24, 0x2f	; 47
 292:	82 60       	ori	r24, 0x02	; 2
 294:	8f bd       	out	0x2f, r24	; 47
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_2);
 296:	8e b5       	in	r24, 0x2e	; 46
 298:	88 60       	ori	r24, 0x08	; 8
 29a:	8e bd       	out	0x2e, r24	; 46
				break;
 29c:	38 c0       	rjmp	.+112    	; 0x30e <timer_init+0x20e>
				
				case TIMER_1_FAST_PWM_10_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_0) | ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_1);
 29e:	8f b5       	in	r24, 0x2f	; 47
 2a0:	83 60       	ori	r24, 0x03	; 3
 2a2:	8f bd       	out	0x2f, r24	; 47
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_2);
 2a4:	8e b5       	in	r24, 0x2e	; 46
 2a6:	88 60       	ori	r24, 0x08	; 8
 2a8:	8e bd       	out	0x2e, r24	; 46
				break;
 2aa:	31 c0       	rjmp	.+98     	; 0x30e <timer_init+0x20e>
				
				case TIMER_1_PWM_FREQUENCY_CORRECT_ICR_MODE:
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_3);
 2ac:	8e b5       	in	r24, 0x2e	; 46
 2ae:	80 61       	ori	r24, 0x10	; 16
 2b0:	8e bd       	out	0x2e, r24	; 46
				break;
 2b2:	2d c0       	rjmp	.+90     	; 0x30e <timer_init+0x20e>
				
				case TIMER_1_PWM_FREQUENCY_CORRECT_OCR_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_0);
 2b4:	8f b5       	in	r24, 0x2f	; 47
 2b6:	81 60       	ori	r24, 0x01	; 1
 2b8:	8f bd       	out	0x2f, r24	; 47
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_3);
 2ba:	8e b5       	in	r24, 0x2e	; 46
 2bc:	80 61       	ori	r24, 0x10	; 16
 2be:	8e bd       	out	0x2e, r24	; 46
				break;
 2c0:	26 c0       	rjmp	.+76     	; 0x30e <timer_init+0x20e>
				
				case TIMER_1_PWM_PHASE_CORRECT_ICR_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_1);
 2c2:	8f b5       	in	r24, 0x2f	; 47
 2c4:	82 60       	ori	r24, 0x02	; 2
 2c6:	8f bd       	out	0x2f, r24	; 47
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_3);
 2c8:	8e b5       	in	r24, 0x2e	; 46
 2ca:	80 61       	ori	r24, 0x10	; 16
 2cc:	8e bd       	out	0x2e, r24	; 46
				break;
 2ce:	1f c0       	rjmp	.+62     	; 0x30e <timer_init+0x20e>
				
				case TIMER_1_PWM_PHASE_CORRECT_OCR_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_0) | ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_1);
 2d0:	8f b5       	in	r24, 0x2f	; 47
 2d2:	83 60       	ori	r24, 0x03	; 3
 2d4:	8f bd       	out	0x2f, r24	; 47
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_3);
 2d6:	8e b5       	in	r24, 0x2e	; 46
 2d8:	80 61       	ori	r24, 0x10	; 16
 2da:	8e bd       	out	0x2e, r24	; 46
				break;
 2dc:	18 c0       	rjmp	.+48     	; 0x30e <timer_init+0x20e>
				
				case TIMER_1_CTC_ICR_MODE:
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_2) | ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_3);
 2de:	8e b5       	in	r24, 0x2e	; 46
 2e0:	88 61       	ori	r24, 0x18	; 24
 2e2:	8e bd       	out	0x2e, r24	; 46
				break;
 2e4:	14 c0       	rjmp	.+40     	; 0x30e <timer_init+0x20e>
				
				case TIMER_1_RESERVED_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_0);
 2e6:	8f b5       	in	r24, 0x2f	; 47
 2e8:	81 60       	ori	r24, 0x01	; 1
 2ea:	8f bd       	out	0x2f, r24	; 47
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_2) | ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_3);
 2ec:	8e b5       	in	r24, 0x2e	; 46
 2ee:	88 61       	ori	r24, 0x18	; 24
 2f0:	8e bd       	out	0x2e, r24	; 46
				break;
 2f2:	0d c0       	rjmp	.+26     	; 0x30e <timer_init+0x20e>
				
				case TIMER_1_FAST_PWM_ICR_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_1);
 2f4:	8f b5       	in	r24, 0x2f	; 47
 2f6:	82 60       	ori	r24, 0x02	; 2
 2f8:	8f bd       	out	0x2f, r24	; 47
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_2) | ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_3);
 2fa:	8e b5       	in	r24, 0x2e	; 46
 2fc:	88 61       	ori	r24, 0x18	; 24
 2fe:	8e bd       	out	0x2e, r24	; 46
				break;
 300:	06 c0       	rjmp	.+12     	; 0x30e <timer_init+0x20e>
				
				case TIMER_1_FAST_PWM_OCR_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_0) | ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_1);
 302:	8f b5       	in	r24, 0x2f	; 47
 304:	83 60       	ori	r24, 0x03	; 3
 306:	8f bd       	out	0x2f, r24	; 47
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_2) | ENABLE(TIMER_1_WAVEFORME_GENERATOR_MODE_BIT_3);
 308:	8e b5       	in	r24, 0x2e	; 46
 30a:	88 61       	ori	r24, 0x18	; 24
 30c:	8e bd       	out	0x2e, r24	; 46
				break;
			}
			
			switch(param->com1a)
 30e:	13 96       	adiw	r26, 0x03	; 3
 310:	8c 91       	ld	r24, X
 312:	13 97       	sbiw	r26, 0x03	; 3
 314:	85 30       	cpi	r24, 0x05	; 5
 316:	41 f0       	breq	.+16     	; 0x328 <timer_init+0x228>
 318:	86 30       	cpi	r24, 0x06	; 6
 31a:	51 f0       	breq	.+20     	; 0x330 <timer_init+0x230>
 31c:	84 30       	cpi	r24, 0x04	; 4
 31e:	59 f4       	brne	.+22     	; 0x336 <timer_init+0x236>
			{
				case TOGGLE_OC_OCR1A_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_COMPARE_MATCH_BIT_A_0);
 320:	8f b5       	in	r24, 0x2f	; 47
 322:	80 64       	ori	r24, 0x40	; 64
 324:	8f bd       	out	0x2f, r24	; 47
				break;
 326:	07 c0       	rjmp	.+14     	; 0x336 <timer_init+0x236>
				
				case CLEAR_OC_OCR1A_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_COMPARE_MATCH_BIT_A_1);
 328:	8f b5       	in	r24, 0x2f	; 47
 32a:	80 68       	ori	r24, 0x80	; 128
 32c:	8f bd       	out	0x2f, r24	; 47
				break;
 32e:	03 c0       	rjmp	.+6      	; 0x336 <timer_init+0x236>
				
				case SET_OC_OCR1A_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_COMPARE_MATCH_BIT_A_0) | ENABLE(TIMER_1_COMPARE_MATCH_BIT_A_1);
 330:	8f b5       	in	r24, 0x2f	; 47
 332:	80 6c       	ori	r24, 0xC0	; 192
 334:	8f bd       	out	0x2f, r24	; 47
				break;
			}
			
			switch(param->com1b)
 336:	14 96       	adiw	r26, 0x04	; 4
 338:	8c 91       	ld	r24, X
 33a:	14 97       	sbiw	r26, 0x04	; 4
 33c:	88 30       	cpi	r24, 0x08	; 8
 33e:	41 f0       	breq	.+16     	; 0x350 <timer_init+0x250>
 340:	89 30       	cpi	r24, 0x09	; 9
 342:	51 f0       	breq	.+20     	; 0x358 <timer_init+0x258>
 344:	87 30       	cpi	r24, 0x07	; 7
 346:	59 f4       	brne	.+22     	; 0x35e <timer_init+0x25e>
			{
				case TOGGLE_OC_OCR1B_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_COMPARE_MATCH_BIT_B_0);
 348:	8f b5       	in	r24, 0x2f	; 47
 34a:	80 61       	ori	r24, 0x10	; 16
 34c:	8f bd       	out	0x2f, r24	; 47
				break;
 34e:	07 c0       	rjmp	.+14     	; 0x35e <timer_init+0x25e>
				
				case CLEAR_OC_OCR1B_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_COMPARE_MATCH_BIT_B_1);
 350:	8f b5       	in	r24, 0x2f	; 47
 352:	80 62       	ori	r24, 0x20	; 32
 354:	8f bd       	out	0x2f, r24	; 47
				break;
 356:	03 c0       	rjmp	.+6      	; 0x35e <timer_init+0x25e>
				
				case SET_OC_OCR1B_MODE:
				TIMER_1_CONTROL_A_REG |= ENABLE(TIMER_1_COMPARE_MATCH_BIT_B_0) | ENABLE(TIMER_1_COMPARE_MATCH_BIT_B_1);
 358:	8f b5       	in	r24, 0x2f	; 47
 35a:	80 63       	ori	r24, 0x30	; 48
 35c:	8f bd       	out	0x2f, r24	; 47
				break;
			}
			
			switch(param->clock_select)
 35e:	15 96       	adiw	r26, 0x05	; 5
 360:	4d 91       	ld	r20, X+
 362:	5d 91       	ld	r21, X+
 364:	6d 91       	ld	r22, X+
 366:	7c 91       	ld	r23, X
 368:	18 97       	sbiw	r26, 0x08	; 8
 36a:	43 30       	cpi	r20, 0x03	; 3
 36c:	51 05       	cpc	r21, r1
 36e:	61 05       	cpc	r22, r1
 370:	71 05       	cpc	r23, r1
 372:	c9 f1       	breq	.+114    	; 0x3e6 <timer_init+0x2e6>
 374:	40 f4       	brcc	.+16     	; 0x386 <timer_init+0x286>
 376:	41 30       	cpi	r20, 0x01	; 1
 378:	51 05       	cpc	r21, r1
 37a:	61 05       	cpc	r22, r1
 37c:	71 05       	cpc	r23, r1
 37e:	d9 f0       	breq	.+54     	; 0x3b6 <timer_init+0x2b6>
 380:	08 f4       	brcc	.+2      	; 0x384 <timer_init+0x284>
 382:	02 c1       	rjmp	.+516    	; 0x588 <__EEPROM_REGION_LENGTH__+0x188>
 384:	2c c0       	rjmp	.+88     	; 0x3de <timer_init+0x2de>
 386:	40 34       	cpi	r20, 0x40	; 64
 388:	51 05       	cpc	r21, r1
 38a:	61 05       	cpc	r22, r1
 38c:	71 05       	cpc	r23, r1
 38e:	d9 f0       	breq	.+54     	; 0x3c6 <timer_init+0x2c6>
 390:	30 f4       	brcc	.+12     	; 0x39e <timer_init+0x29e>
 392:	48 30       	cpi	r20, 0x08	; 8
 394:	51 05       	cpc	r21, r1
 396:	61 05       	cpc	r22, r1
 398:	71 05       	cpc	r23, r1
 39a:	89 f0       	breq	.+34     	; 0x3be <timer_init+0x2be>
 39c:	27 c0       	rjmp	.+78     	; 0x3ec <timer_init+0x2ec>
 39e:	41 15       	cp	r20, r1
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	58 07       	cpc	r21, r24
 3a4:	61 05       	cpc	r22, r1
 3a6:	71 05       	cpc	r23, r1
 3a8:	91 f0       	breq	.+36     	; 0x3ce <timer_init+0x2ce>
 3aa:	41 15       	cp	r20, r1
 3ac:	54 40       	sbci	r21, 0x04	; 4
 3ae:	61 05       	cpc	r22, r1
 3b0:	71 05       	cpc	r23, r1
 3b2:	89 f0       	breq	.+34     	; 0x3d6 <timer_init+0x2d6>
 3b4:	1b c0       	rjmp	.+54     	; 0x3ec <timer_init+0x2ec>
				case NO_CLOCK_SOURCE_MODE : 
				return FAILED_NO_CLOCK_SOURCE;
				break;
				
				case NO_PRESCALING_MODE :
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_CLOCK_SELECT_BIT_0);
 3b6:	8e b5       	in	r24, 0x2e	; 46
 3b8:	81 60       	ori	r24, 0x01	; 1
 3ba:	8e bd       	out	0x2e, r24	; 46
				break;
 3bc:	17 c0       	rjmp	.+46     	; 0x3ec <timer_init+0x2ec>
				
				case CLK_8_MODE :
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_CLOCK_SELECT_BIT_1);
 3be:	8e b5       	in	r24, 0x2e	; 46
 3c0:	82 60       	ori	r24, 0x02	; 2
 3c2:	8e bd       	out	0x2e, r24	; 46
				break;
 3c4:	13 c0       	rjmp	.+38     	; 0x3ec <timer_init+0x2ec>
				
				case CLK_64_MODE :
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_CLOCK_SELECT_BIT_0) | ENABLE(TIMER_0_CLOCK_SELECT_BIT_1);
 3c6:	8e b5       	in	r24, 0x2e	; 46
 3c8:	83 60       	ori	r24, 0x03	; 3
 3ca:	8e bd       	out	0x2e, r24	; 46
				break;
 3cc:	0f c0       	rjmp	.+30     	; 0x3ec <timer_init+0x2ec>
				
				case CLK_256_MODE :
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_CLOCK_SELECT_BIT_2);
 3ce:	8e b5       	in	r24, 0x2e	; 46
 3d0:	84 60       	ori	r24, 0x04	; 4
 3d2:	8e bd       	out	0x2e, r24	; 46
				break;
 3d4:	0b c0       	rjmp	.+22     	; 0x3ec <timer_init+0x2ec>
				
				case CLK_1024_MODE :
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_CLOCK_SELECT_BIT_0) | ENABLE(TIMER_1_CLOCK_SELECT_BIT_2);
 3d6:	8e b5       	in	r24, 0x2e	; 46
 3d8:	85 60       	ori	r24, 0x05	; 5
 3da:	8e bd       	out	0x2e, r24	; 46
				break;
 3dc:	07 c0       	rjmp	.+14     	; 0x3ec <timer_init+0x2ec>
				
				case FALLING_EDGE_MODE :
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_CLOCK_SELECT_BIT_1) | ENABLE(TIMER_1_CLOCK_SELECT_BIT_2);
 3de:	8e b5       	in	r24, 0x2e	; 46
 3e0:	86 60       	ori	r24, 0x06	; 6
 3e2:	8e bd       	out	0x2e, r24	; 46
				break;
 3e4:	03 c0       	rjmp	.+6      	; 0x3ec <timer_init+0x2ec>
				
				case RISING_EDGE_MODE :
				TIMER_1_CONTROL_B_REG |= ENABLE(TIMER_1_CLOCK_SELECT_BIT_0) | ENABLE(TIMER_1_CLOCK_SELECT_BIT_1) | ENABLE(TIMER_1_CLOCK_SELECT_BIT_2);
 3e6:	8e b5       	in	r24, 0x2e	; 46
 3e8:	87 60       	ori	r24, 0x07	; 7
 3ea:	8e bd       	out	0x2e, r24	; 46
				break;
			}
			
			if(param->compare_match_A_interrupt_enable == ENABLE_OUTPUT_COMPARE_A_MATCH_INTERRUPT )
 3ec:	1a 96       	adiw	r26, 0x0a	; 10
 3ee:	8c 91       	ld	r24, X
 3f0:	1a 97       	sbiw	r26, 0x0a	; 10
 3f2:	84 30       	cpi	r24, 0x04	; 4
 3f4:	19 f4       	brne	.+6      	; 0x3fc <timer_init+0x2fc>
			{
				TIMER_INTERRUPT_MASK_REG |= ENABLE(TIMER_1_OUTPUT_COMPARE_A_MATCH_INTERRUPT_ENABLE);
 3f6:	89 b7       	in	r24, 0x39	; 57
 3f8:	80 61       	ori	r24, 0x10	; 16
 3fa:	89 bf       	out	0x39, r24	; 57
			}
			
			if(param->compare_match_B_interrupt_enable == ENABLE_OUTPUT_COMPARE_B_MATCH_INTERRUPT )
 3fc:	1b 96       	adiw	r26, 0x0b	; 11
 3fe:	8c 91       	ld	r24, X
 400:	1b 97       	sbiw	r26, 0x0b	; 11
 402:	85 30       	cpi	r24, 0x05	; 5
 404:	19 f4       	brne	.+6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			{
				TIMER_INTERRUPT_MASK_REG |= ENABLE(TIMER_1_OUTPUT_COMPARE_B_MATCH_INTERRUPT_ENABLE);
 406:	89 b7       	in	r24, 0x39	; 57
 408:	88 60       	ori	r24, 0x08	; 8
 40a:	89 bf       	out	0x39, r24	; 57
			}
			
			if(param->input_capture_interrupt_enable == ENABLE_INPUT_CAPTURE_INTERRUPT )
 40c:	1d 96       	adiw	r26, 0x0d	; 13
 40e:	8c 91       	ld	r24, X
 410:	1d 97       	sbiw	r26, 0x0d	; 13
 412:	83 30       	cpi	r24, 0x03	; 3
 414:	19 f4       	brne	.+6      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			{
				TIMER_INTERRUPT_MASK_REG |= ENABLE(TIMER_1_INPUT_CAPTURE_INTERRUPT_ENABLE);
 416:	89 b7       	in	r24, 0x39	; 57
 418:	80 62       	ori	r24, 0x20	; 32
 41a:	89 bf       	out	0x39, r24	; 57
			}
			
			if(param->overflow_interrupt_enable == ENABLE_OVERFLOW_INTERRUPT)
 41c:	1c 96       	adiw	r26, 0x0c	; 12
 41e:	8c 91       	ld	r24, X
 420:	1c 97       	sbiw	r26, 0x0c	; 12
 422:	82 30       	cpi	r24, 0x02	; 2
 424:	19 f4       	brne	.+6      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			{
				TIMER_INTERRUPT_MASK_REG |= ENABLE(TIMER_1_OVERFLOW_INTERRUPT_ENABLE);
 426:	89 b7       	in	r24, 0x39	; 57
 428:	84 60       	ori	r24, 0x04	; 4
 42a:	89 bf       	out	0x39, r24	; 57
			}
			TIMER_STATUS[param->timer_n] = INIT;
 42c:	ec 91       	ld	r30, X
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	e0 5a       	subi	r30, 0xA0	; 160
 432:	ff 4f       	sbci	r31, 0xFF	; 255
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	80 83       	st	Z, r24
			return DONE ;
 438:	83 e0       	ldi	r24, 0x03	; 3
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	08 95       	ret
			break;
			
			
			// TIIMER 2
			case TIMER_2:
			switch(param->mode)
 43e:	11 96       	adiw	r26, 0x01	; 1
 440:	8c 91       	ld	r24, X
 442:	11 97       	sbiw	r26, 0x01	; 1
 444:	82 30       	cpi	r24, 0x02	; 2
 446:	41 f0       	breq	.+16     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 448:	83 30       	cpi	r24, 0x03	; 3
 44a:	51 f0       	breq	.+20     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	59 f4       	brne	.+22     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
			{
				case TIMER_2_PWM_PHASE_CORRECT_MODE:
				TIMER_2_CONTROL_REG |= ENABLE(TIMER_2_WAVEFORME_GENERATOR_MODE_BIT_0);
 450:	85 b5       	in	r24, 0x25	; 37
 452:	80 64       	ori	r24, 0x40	; 64
 454:	85 bd       	out	0x25, r24	; 37
				break;
 456:	07 c0       	rjmp	.+14     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
				
				case TIMER_2_CTC_MODE:
				TIMER_2_CONTROL_REG |= ENABLE(TIMER_2_WAVEFORME_GENERATOR_MODE_BIT_1);
 458:	85 b5       	in	r24, 0x25	; 37
 45a:	88 60       	ori	r24, 0x08	; 8
 45c:	85 bd       	out	0x25, r24	; 37
				break;
 45e:	03 c0       	rjmp	.+6      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
				
				case TIMER_2_FAST_PWM_MODE:
				TIMER_2_CONTROL_REG |= ENABLE(TIMER_2_WAVEFORME_GENERATOR_MODE_BIT_0) | ENABLE(TIMER_2_WAVEFORME_GENERATOR_MODE_BIT_1);
 460:	85 b5       	in	r24, 0x25	; 37
 462:	88 64       	ori	r24, 0x48	; 72
 464:	85 bd       	out	0x25, r24	; 37
				break;
			}
			
			switch(param->com)
 466:	12 96       	adiw	r26, 0x02	; 2
 468:	8c 91       	ld	r24, X
 46a:	12 97       	sbiw	r26, 0x02	; 2
 46c:	82 30       	cpi	r24, 0x02	; 2
 46e:	89 f0       	breq	.+34     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 470:	83 30       	cpi	r24, 0x03	; 3
 472:	99 f0       	breq	.+38     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 474:	81 30       	cpi	r24, 0x01	; 1
 476:	a1 f4       	brne	.+40     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
			{
				case TOGGLE_OC_MODE :
				if ((param->mode == TIMER_2_PWM_PHASE_CORRECT_MODE )||(param->mode == TIMER_2_FAST_PWM_MODE))
 478:	11 96       	adiw	r26, 0x01	; 1
 47a:	8c 91       	ld	r24, X
 47c:	11 97       	sbiw	r26, 0x01	; 1
 47e:	81 30       	cpi	r24, 0x01	; 1
 480:	09 f4       	brne	.+2      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 482:	85 c0       	rjmp	.+266    	; 0x58e <__EEPROM_REGION_LENGTH__+0x18e>
 484:	83 30       	cpi	r24, 0x03	; 3
 486:	09 f4       	brne	.+2      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 488:	85 c0       	rjmp	.+266    	; 0x594 <__EEPROM_REGION_LENGTH__+0x194>
				{
					return FAILED;
				}
				else{
					TIMER_2_CONTROL_REG |= ENABLE(TIMER_2_COMPARE_MATCH_BIT_0);
 48a:	85 b5       	in	r24, 0x25	; 37
 48c:	80 61       	ori	r24, 0x10	; 16
 48e:	85 bd       	out	0x25, r24	; 37
				}
				break;
 490:	07 c0       	rjmp	.+14     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
				
				case CLEAR_OC_MODE :
				TIMER_2_CONTROL_REG |= ENABLE(TIMER_2_COMPARE_MATCH_BIT_1);
 492:	85 b5       	in	r24, 0x25	; 37
 494:	80 62       	ori	r24, 0x20	; 32
 496:	85 bd       	out	0x25, r24	; 37
				break;
 498:	03 c0       	rjmp	.+6      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
				
				case  SET_OC_MODE :
				TIMER_2_CONTROL_REG |= ENABLE(TIMER_2_COMPARE_MATCH_BIT_0) | ENABLE(TIMER_2_COMPARE_MATCH_BIT_1);
 49a:	85 b5       	in	r24, 0x25	; 37
 49c:	80 63       	ori	r24, 0x30	; 48
 49e:	85 bd       	out	0x25, r24	; 37
				break;
			}
			
			switch(param->clock_select)
 4a0:	15 96       	adiw	r26, 0x05	; 5
 4a2:	4d 91       	ld	r20, X+
 4a4:	5d 91       	ld	r21, X+
 4a6:	6d 91       	ld	r22, X+
 4a8:	7c 91       	ld	r23, X
 4aa:	18 97       	sbiw	r26, 0x08	; 8
 4ac:	40 32       	cpi	r20, 0x20	; 32
 4ae:	51 05       	cpc	r21, r1
 4b0:	61 05       	cpc	r22, r1
 4b2:	71 05       	cpc	r23, r1
 4b4:	71 f1       	breq	.+92     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
 4b6:	68 f4       	brcc	.+26     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4b8:	41 30       	cpi	r20, 0x01	; 1
 4ba:	51 05       	cpc	r21, r1
 4bc:	61 05       	cpc	r22, r1
 4be:	71 05       	cpc	r23, r1
 4c0:	01 f1       	breq	.+64     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 4c2:	08 f4       	brcc	.+2      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4c4:	6a c0       	rjmp	.+212    	; 0x59a <__EEPROM_REGION_LENGTH__+0x19a>
 4c6:	48 30       	cpi	r20, 0x08	; 8
 4c8:	51 05       	cpc	r21, r1
 4ca:	61 05       	cpc	r22, r1
 4cc:	71 05       	cpc	r23, r1
 4ce:	e9 f0       	breq	.+58     	; 0x50a <__EEPROM_REGION_LENGTH__+0x10a>
 4d0:	33 c0       	rjmp	.+102    	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 4d2:	40 38       	cpi	r20, 0x80	; 128
 4d4:	51 05       	cpc	r21, r1
 4d6:	61 05       	cpc	r22, r1
 4d8:	71 05       	cpc	r23, r1
 4da:	19 f1       	breq	.+70     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 4dc:	30 f4       	brcc	.+12     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4de:	40 34       	cpi	r20, 0x40	; 64
 4e0:	51 05       	cpc	r21, r1
 4e2:	61 05       	cpc	r22, r1
 4e4:	71 05       	cpc	r23, r1
 4e6:	c9 f0       	breq	.+50     	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 4e8:	27 c0       	rjmp	.+78     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
 4ea:	41 15       	cp	r20, r1
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	58 07       	cpc	r21, r24
 4f0:	61 05       	cpc	r22, r1
 4f2:	71 05       	cpc	r23, r1
 4f4:	d1 f0       	breq	.+52     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 4f6:	41 15       	cp	r20, r1
 4f8:	54 40       	sbci	r21, 0x04	; 4
 4fa:	61 05       	cpc	r22, r1
 4fc:	71 05       	cpc	r23, r1
 4fe:	c9 f0       	breq	.+50     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 500:	1b c0       	rjmp	.+54     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
				case NO_CLOCK_SOURCE_MODE :
				return FAILED_NO_CLOCK_SOURCE ;
				break;
				
				case NO_PRESCALING_MODE :
				TIMER_2_CONTROL_REG |= ENABLE(TIMER_2_CLOCK_SELECT_BIT_0);
 502:	85 b5       	in	r24, 0x25	; 37
 504:	81 60       	ori	r24, 0x01	; 1
 506:	85 bd       	out	0x25, r24	; 37
				break;
 508:	17 c0       	rjmp	.+46     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
				
				case CLK_8_MODE :
				TIMER_2_CONTROL_REG |= ENABLE(TIMER_2_CLOCK_SELECT_BIT_1);
 50a:	85 b5       	in	r24, 0x25	; 37
 50c:	82 60       	ori	r24, 0x02	; 2
 50e:	85 bd       	out	0x25, r24	; 37
				break;
 510:	13 c0       	rjmp	.+38     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
				
				case CLK_32_MODE:
				TIMER_2_CONTROL_REG |= ENABLE(TIMER_2_CLOCK_SELECT_BIT_0) | ENABLE(TIMER_2_CLOCK_SELECT_BIT_1);
 512:	85 b5       	in	r24, 0x25	; 37
 514:	83 60       	ori	r24, 0x03	; 3
 516:	85 bd       	out	0x25, r24	; 37
				break;
 518:	0f c0       	rjmp	.+30     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
				
				case CLK_64_MODE:
				TIMER_2_CONTROL_REG |= ENABLE(TIMER_2_CLOCK_SELECT_BIT_2);
 51a:	85 b5       	in	r24, 0x25	; 37
 51c:	84 60       	ori	r24, 0x04	; 4
 51e:	85 bd       	out	0x25, r24	; 37
				break;
 520:	0b c0       	rjmp	.+22     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
				
				case CLK_128_MODE:
				TIMER_2_CONTROL_REG |= ENABLE(TIMER_2_CLOCK_SELECT_BIT_0) | ENABLE(TIMER_2_CLOCK_SELECT_BIT_2);
 522:	85 b5       	in	r24, 0x25	; 37
 524:	85 60       	ori	r24, 0x05	; 5
 526:	85 bd       	out	0x25, r24	; 37
				break;
 528:	07 c0       	rjmp	.+14     	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
				
				case CLK_256_MODE :
				TIMER_2_CONTROL_REG |= ENABLE(TIMER_2_CLOCK_SELECT_BIT_1) | ENABLE(TIMER_2_CLOCK_SELECT_BIT_2);
 52a:	85 b5       	in	r24, 0x25	; 37
 52c:	86 60       	ori	r24, 0x06	; 6
 52e:	85 bd       	out	0x25, r24	; 37
				break;
 530:	03 c0       	rjmp	.+6      	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
				
				case CLK_1024_MODE :
				TIMER_2_CONTROL_REG |= ENABLE(TIMER_2_CLOCK_SELECT_BIT_0) | ENABLE(TIMER_2_CLOCK_SELECT_BIT_1) | ENABLE(TIMER_2_CLOCK_SELECT_BIT_2);
 532:	85 b5       	in	r24, 0x25	; 37
 534:	87 60       	ori	r24, 0x07	; 7
 536:	85 bd       	out	0x25, r24	; 37
				break;
			}
			if(param->compare_match_interrupt_enable == ENABLE_OUTPUT_COMPARE_MATCH_INTERRUPT )
 538:	19 96       	adiw	r26, 0x09	; 9
 53a:	8c 91       	ld	r24, X
 53c:	19 97       	sbiw	r26, 0x09	; 9
 53e:	81 30       	cpi	r24, 0x01	; 1
 540:	19 f4       	brne	.+6      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
			{
				TIMER_INTERRUPT_MASK_REG |= ENABLE(TIMER_0_OUTPUT_COMPARE_MATCH_INTERRUPT_ENABLE);
 542:	89 b7       	in	r24, 0x39	; 57
 544:	82 60       	ori	r24, 0x02	; 2
 546:	89 bf       	out	0x39, r24	; 57
			}
			
			if(param->overflow_interrupt_enable == ENABLE_OVERFLOW_INTERRUPT)
 548:	1c 96       	adiw	r26, 0x0c	; 12
 54a:	8c 91       	ld	r24, X
 54c:	1c 97       	sbiw	r26, 0x0c	; 12
 54e:	82 30       	cpi	r24, 0x02	; 2
 550:	19 f4       	brne	.+6      	; 0x558 <__EEPROM_REGION_LENGTH__+0x158>
			{
				TIMER_INTERRUPT_MASK_REG |= ENABLE(TIMER_0_OVERFLOW_INTERRUPT_ENABLE);
 552:	89 b7       	in	r24, 0x39	; 57
 554:	81 60       	ori	r24, 0x01	; 1
 556:	89 bf       	out	0x39, r24	; 57
			}
			TIMER_STATUS[param->timer_n] = INIT;
 558:	ec 91       	ld	r30, X
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	e0 5a       	subi	r30, 0xA0	; 160
 55e:	ff 4f       	sbci	r31, 0xFF	; 255
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	80 83       	st	Z, r24
			return DONE ;
 564:	83 e0       	ldi	r24, 0x03	; 3
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	08 95       	ret
		}
	}
	else{
		return FAILED_INIT_BEFORE;
	}
	return TIMER_STATUS[param->timer_n];
 56a:	89 2f       	mov	r24, r25
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	08 95       	ret
			return DONE ;
			break;
		}
	}
	else{
		return FAILED_INIT_BEFORE;
 570:	84 e0       	ldi	r24, 0x04	; 4
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	08 95       	ret
			switch(param->com)
			{
				case TOGGLE_OC_MODE : 
				if ((param->mode == TIMER_0_PWM_PHASE_CORRECT_MODE )||(param->mode == TIMER_0_FAST_PWM_MODE))
				{
					return FAILED;
 576:	82 e0       	ldi	r24, 0x02	; 2
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	08 95       	ret
 57c:	82 e0       	ldi	r24, 0x02	; 2
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	08 95       	ret
				break;
			}
			switch(param->clock_select)
			{
				case NO_CLOCK_SOURCE_MODE : 
				return FAILED_NO_CLOCK_SOURCE ;
 582:	85 e0       	ldi	r24, 0x05	; 5
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	08 95       	ret
			}
			
			switch(param->clock_select)
			{
				case NO_CLOCK_SOURCE_MODE : 
				return FAILED_NO_CLOCK_SOURCE;
 588:	85 e0       	ldi	r24, 0x05	; 5
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	08 95       	ret
			switch(param->com)
			{
				case TOGGLE_OC_MODE :
				if ((param->mode == TIMER_2_PWM_PHASE_CORRECT_MODE )||(param->mode == TIMER_2_FAST_PWM_MODE))
				{
					return FAILED;
 58e:	82 e0       	ldi	r24, 0x02	; 2
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	08 95       	ret
 594:	82 e0       	ldi	r24, 0x02	; 2
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	08 95       	ret
			}
			
			switch(param->clock_select)
			{
				case NO_CLOCK_SOURCE_MODE :
				return FAILED_NO_CLOCK_SOURCE ;
 59a:	85 e0       	ldi	r24, 0x05	; 5
 59c:	90 e0       	ldi	r25, 0x00	; 0
	}
	else{
		return FAILED_INIT_BEFORE;
	}
	return TIMER_STATUS[param->timer_n];
 59e:	08 95       	ret

000005a0 <__tablejump2__>:
 5a0:	ee 0f       	add	r30, r30
 5a2:	ff 1f       	adc	r31, r31
 5a4:	05 90       	lpm	r0, Z+
 5a6:	f4 91       	lpm	r31, Z
 5a8:	e0 2d       	mov	r30, r0
 5aa:	09 94       	ijmp

000005ac <_exit>:
 5ac:	f8 94       	cli

000005ae <__stop_program>:
 5ae:	ff cf       	rjmp	.-2      	; 0x5ae <__stop_program>
