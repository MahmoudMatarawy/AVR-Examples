
TWI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007cc  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000665  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fc  00000000  00000000  0000103d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036a  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000104  00000000  00000000  0000184e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001952  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include "TWI.h"
#include <util/delay.h>
int main(void)
{
	twi_init();
  6c:	0e 94 55 00 	call	0xaa	; 0xaa <twi_init>
	int i = 0 ;
  70:	c0 e0       	ldi	r28, 0x00	; 0
  72:	d0 e0       	ldi	r29, 0x00	; 0
	
    /* Replace with your application code */
    while (1) 
    {
		twi_start();
  74:	0e 94 5b 00 	call	0xb6	; 0xb6 <twi_start>
		twi_write(i);
  78:	8c 2f       	mov	r24, r28
  7a:	0e 94 64 00 	call	0xc8	; 0xc8 <twi_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	2f ef       	ldi	r18, 0xFF	; 255
  80:	83 ed       	ldi	r24, 0xD3	; 211
  82:	90 e3       	ldi	r25, 0x30	; 48
  84:	21 50       	subi	r18, 0x01	; 1
  86:	80 40       	sbci	r24, 0x00	; 0
  88:	90 40       	sbci	r25, 0x00	; 0
  8a:	e1 f7       	brne	.-8      	; 0x84 <main+0x18>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <main+0x22>
  8e:	00 00       	nop
		_delay_ms(2000);
		twi_stop();
  90:	0e 94 61 00 	call	0xc2	; 0xc2 <twi_stop>
  94:	2f e7       	ldi	r18, 0x7F	; 127
  96:	88 e3       	ldi	r24, 0x38	; 56
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	80 40       	sbci	r24, 0x00	; 0
  9e:	90 40       	sbci	r25, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x2e>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x38>
  a4:	00 00       	nop
		_delay_ms(50);
		i++;
  a6:	21 96       	adiw	r28, 0x01	; 1
  a8:	e5 cf       	rjmp	.-54     	; 0x74 <main+0x8>

000000aa <twi_init>:

// Function to initialize TWI 
void twi_init(void)
{
	// set SCL to 100KHZ
	TWSR = 0X00;
  aa:	11 b8       	out	0x01, r1	; 1
	TWBR = 32;
  ac:	80 e2       	ldi	r24, 0x20	; 32
  ae:	80 b9       	out	0x00, r24	; 0
	//enable TWI 
	TWCR = (1<<TWEN);
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	86 bf       	out	0x36, r24	; 54
  b4:	08 95       	ret

000000b6 <twi_start>:

// function to start TWI
void twi_start(void)
{
	// SET TWI to start mode 
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  b6:	84 ea       	ldi	r24, 0xA4	; 164
  b8:	86 bf       	out	0x36, r24	; 54
	// WAIT till TWI start 
	while ((TWCR & (1<<TWINT))==0);
  ba:	06 b6       	in	r0, 0x36	; 54
  bc:	07 fe       	sbrs	r0, 7
  be:	fd cf       	rjmp	.-6      	; 0xba <twi_start+0x4>
}
  c0:	08 95       	ret

000000c2 <twi_stop>:

// function to stop TWI
void twi_stop(void)
{
	// SET TWI to stop mode 
	TWCR = (1<<TWINT)|(1<<TWEN)|(TWSTO);
  c2:	84 e8       	ldi	r24, 0x84	; 132
  c4:	86 bf       	out	0x36, r24	; 54
  c6:	08 95       	ret

000000c8 <twi_write>:
}

// function to write 
void twi_write(uint8_t u8_data)
{
	TWDR = u8_data;
  c8:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT)|(1<<TWEN);
  ca:	84 e8       	ldi	r24, 0x84	; 132
  cc:	86 bf       	out	0x36, r24	; 54
	while ((TWCR & (1<<TWINT))==0);
  ce:	06 b6       	in	r0, 0x36	; 54
  d0:	07 fe       	sbrs	r0, 7
  d2:	fd cf       	rjmp	.-6      	; 0xce <twi_write+0x6>
}
  d4:	08 95       	ret

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
